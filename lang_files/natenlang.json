{
    "config":{
        "name":"naten",
        "type":"natural",
        "tabsensitive": false
    },
    "tokens":{
        "keywords":
        {
            "If":"If",
            "then":"then",
            "else":"else",
            "from":"from",
            "to":"to",
            "break":"break",
            "continue":"continue",
            "function":"function",
            "loop":"loop",
            "inttype":"int",
            "shorttype":"short",
            "realtype":"double",
            "chartype":"char",
            "return":"Return",
            "template":"template",
            "type":"type",
            "void":"void",
            "nul":"nul",
            "boolean":"boolean",
            "true":"true",
            "false":"false",
            "jsload":"jsload",
            "jsexport":"jsexport",
            "sizeof":"sizeof",
            "class":"class",
            "public":"public",
            "private":"private",
            "protected":"protected",
            "repeat":"repeat",
            "operator":"operator",
            "typeComp":"typeComp",
            "Assign":"Assign",
            "Add":"Add",
            "Substract":"Substract",
            "Multiply":"Multiply",
            "Divide":"Divide",
            "by":"by",
            "is":"is",
            "not":"not",
            "of":"of",
            "in":"in",
            "Increment":"Increment",
            "Decrement":"Decrement",
            "Until":"Until",
            "First":"First",
            "Initialize":"Initialize",
            "initialize":"initialize",
            "Declare":"Declare",
            "as":"as",
            "at":"at",
            "with":"with",
            "variable":"variable",
            "object":"object",
            "value":"value",
            "Call":"Call",
            "element":"element",
            "pointer":"pointer",
            "here":"here",
            "that":"that",
            "takes":"takes",
            "and":"and",
            "returns":"returns",
            "code":"code",
            "times":"times",
            "tohere":"ending here.",
            "fromhere":"starting here",
            "Load":"Load",
            "Export":"Export",
            "execute":"execute",
            "inheriting":"inherting",
            "members":"members",
            "Otherwise":"Otherwise"
        },
        "int":"[0-9]",
        "hex":"0x[0-9A-F]+",
        "char":"[㐀-龯ぁ-んァ-ヶa-zA-Z_ー]",
        "comment":"(^(\\s*\/\/.*)$|^(\\s*#.*)$)",
        "string":"\"((?:[^\\\\\"]|\\.)*)\"",
        "ops":[
            {"name":":", "regex": "^(:|：)", "precedence": 20},
            {"name":";", "regex": "^(;|；)", "precedence": 20},
            {"name":"(", "regex": "^(\\(|（)", "precedence":3},
            {"name":")", "regex": "^(\\)|）)", "precedence":3},
            {"name":"[", "regex": "^(\\[)", "precedence": 20},
            {"name":"]", "regex": "^(\\])", "precedence": 20},
            {"name":"{", "regex": "^(\\{|｛)", "precedence": 20},
            {"name":"}", "regex": "^(\\}|｝)", "precedence": 20},
            {"name":"<-", "regex": "^(\\<\\-)", "precedence": 20},
            {"name":"=>", "regex": "^(=\\>|＝＞)", "precedence": 20},
            {"name":".", "regex": "^(\\.)", "precedence": 1},
            {"name":"->", "regex": "^(\\-\\>)", "precedence": 1},
            {"name":"*", "regex": "^(\\*|＊)", "precedence": 4},
            {"name":"/", "regex": "^(\\/|／)", "precedence": 4},
            {"name":"%", "regex": "^(%|％)", "precedence": 4},
            {"name":"+", "regex": "^(\\+|＋)", "precedence": 5},
            {"name":"-", "regex": "^(\\-)", "precedence": 5},
            {"name":"==", "regex": "^(==|＝＝)", "precedence": 7},
            {"name":"!=", "regex": "^(!=|！＝)", "precedence": 7},
            {"name":"<=", "regex": "^(\\<=|＜＝)", "precedence": 6},
            {"name":">=", "regex": "^(\\>=|＞＝)", "precedence": 6},
            {"name":"<", "regex": "^(\\<|＜)", "precedence": 6},
            {"name":">", "regex": "^(\\>|＞)", "precedence": 6},
            {"name":"=", "regex": "^(=|＝)", "precedence": 20},
            {"name":"&&", "regex": "^(&&|＆＆)", "precedence": 8},
            {"name":"&", "regex": "^(&|＆)", "precedence": 2},
            {"name":"||", "regex": "^(\\|\\||｜)", "precedence": 8},
            {"name":",", "regex": "^(,|、)", "precedence": 20}
        ],
        "main":"main",
        "stringClass":"string",
        "stmliststart": "fromhere",
        "stmlistend":"tohere"
    },
    "grammar":{
        "exp":{
            "op":"exp(1) oper exp(2)",
            "minus":"- exp",
            "paren": "( exp )",
            "call":"exp ( explist )",
            "address":"& var",
            "sizeof":"sizeof ( var )",
            "array":"[ explist ]",
            "func": "( fieldlist(params) ) => ( fieldlist(result) ) stm",
            "var":"var",
            "field":"id of exp",
            "subscript":"exp(arrayname) [ exp(index) ]",
            "arrowfield":"exp -> id",
            "int": "int",
            "char": "char",
            "string": "string",
            "real": "real",
            "true": "true",
            "false": "false",
            "typeeq": "typeComp ( ty(1) , ty(2) )"
        },
        "oper": {
            "add":"+",
            "sub":"-",
            "mul":"*",
            "div":"/",
            "mod":"%",
            "eq":"is",
            "neq":"is not",
            "ge":">=",
            "gt":">",
            "le":"<=",
            "lt":"<",
            "and":"&&",
            "or":"||"
        },
        "stm":{
            "assign":{
                "normal":"Assign exp to var .",
                "add":"Add exp to var .",
                "sub":"Substract exp from var .",
                "mul":"Multiply var by exp .",
                "div":"Divide var by exp .",
                "increment":"Increment var .",
                "decrement":"Decrement var ."
            },
            "if":{
                "if":"If exp then execute code stm(then)",
                "ifelse":"If exp then execute code stm(then) Otherwise execute code stm(else)"
            },
            "while":"Until exp stm",
            "dec": "dec(stm)",
            "for":"( stm(init) ) from ( exp ) to ( stm(incr) ) stm",
            "return":{
                "noexp":"return .",
                "exp":"return value exp ."
            },
            "call":{
                "normal":"Call exp with value explist .",
                "noexp":"Call exp ."
            },
            "loop":"loop stm",
            "break":"break .",
            "continue":"continue .",
            "compound":"fromhere stmlist tohere",
            "repeat":"repeat exp times stm"
        },
        "dec":{
            "var": {
                "init":"Initialize variable var as ty with exp .",
                "noinit":"Declare variable var as ty ."
            },
            "object": "Initialize object var as ty with explist .",
            "class": {
                "noinherit":"Declare class id(name) with members fromhere memlist tohere",
                "inherit":"Declare class id(name) inheriting from id(inherit) with members fromhere memlist tohere"
            },
            "func": {
                "normal":"Declare function id that takes fieldlist(params) and returns fieldlist(result) with code stm",
                "noparam":"Declare function id that returns fieldlist(result) with code stm",
                "noresult":"Declare function id that takes fieldlist(params) with code stm",
                "noparamnoresult":"Declare function id with code stm"
            },
            "jsload": {
                "normal":"Load function id from string(func) of string(module) that takes fieldlist(params) and returns fieldlist(result) .",
                "noparam":"Load function id from string(func) of string(module) that returns fieldlist(result) .",
                "noresult":"Load function id from string(func) of string(module) that takes fieldlist(params) .",
                "noparamnoresult":"Load function id from string(func) of string(module) ."
            },
            "jsexport": "Export function id to string .",
            "operator": {
                "normal":"function : operator oper ( fieldlist(params) ) => ( fieldlist(result) ) stm",
                "noparam":"function : operator oper ( ) => ( fieldlist(result) ) stm",
                "noresult":"function : operator oper ( fieldlist(params) ) => ( ) stm",
                "noparamnoresult":"function : operator oper ( ) => ( ) stm",
                "assignnormal":"function operator = ( fieldlist(params) ) => ( fieldlist(result) ) stm",
                "assignnoparam":"function operator = ( ) => ( fieldlist(result) ) stm",
                "assignnoresult":"function operator = ( fieldlist(params) ) => ( ) stm",
                "assignnoparamnoresult":"function operator = ( ) => ( ) stm"
            },
            "template": "Declare template that takes id . dec"
        },
        "var": {
            "simple":"id",
            "field":"id of var",
            "deref":"variable at var",
            "subscript":"element exp in var",
            "arrowfield":"var -> id"
        },
        "varExp": {
            "var":"var",
            "field":"id of exp",
            "subscript":"element exp(index) of exp(arrayname)",
            "arrowfield":"exp -> id"
        },
        "ty": {
            "name" : "id",
            "void" : "void",
            "int" : "inttype",
            "real" : "realtype",
            "bool" : "boolean",
            "char" : "chartype",
            "short" : "shorttype",
            "pointer" : "pointer of ty",
            "poly" : "id < ty >",
            "funcnormal":"function : ( fieldlist(params) ) => ( fieldlist(result) )",
            "funcnoparam":"function : ( ) => ( fieldlist(result) )",
            "funcnoresult":"function : ( fieldlist(params) ) => ( )",
            "funcnoparamnoresult":"function : ( ) => ( )"        
        },
        "mems":{
            "nospecifier": "declist",
            "public": "public : declist",
            "private": "private : declist",
            "protected": "protected : declist"
        },
        "memlist":{
            "mems": "mems",
            "memlist": "memlist mems"
        },
        "field": {
            "noinit":"var as ty",
            "func":"function : id ( fieldlist(params) ) => ( fieldlist(result) )"
        },
        "explist":{
            "null":"",
            "exp":"exp",
            "explist":"exp , explist"
        },
        "stmlist":{
            "null":"",
            "stm":"stm",
            "stmlist":"stm stmlist"
        },
        "declist":{
            "null":"",
            "dec":"dec",
            "declist":"dec declist"
        },
        "fieldlist":{
            "field":"field",
            "fieldlist":"field , fieldlist"
        }
    },
    "errors":{
        "keywords":{
            "lineNum":"Line $1",
            "charNum":"Column $1"
        },
        "parser":{
            "unexpectedtoken":"「$1」の前の単語、もしくは文字が抜けています。"
        },
        "code":{
            "none":"プログラムがありません。",
            "nomain":"実行関数がありません。",
            "declaredoesntwork":"この宣言をすることはできません。",
            "templatedoesntwork":"関数とクラス以外のテンプレートを宣言することはできません。"
        },
        "notsupport":{
            "multiplereturn":"複数変数を返す関数を宣言することはできません。",
            "importinclass":"クラス宣言内で関数をJavaScriptから読み込むことはできません。"
        },
        "type":{
            "nomatch":"$1と$2の型が合いません。",
            "notclass":"$1の型がクラスではありません。",
            "notobject":"$1はオブジェクトではありません。",
            "notarray":"$1は配列ではありません。",
            "notpointer":"$1はポインターではありません。",
            "element":"$1番目の要素が他の要素の型と合いません。",
            "add":"この二つの項を足すことはできません。",
            "sub":"この二つの項を引くことはできません。",
            "mul":"この二つの項を掛けることはできません。",
            "div":"この二つの項を割ることはできません。",
            "mod":"左辺を右辺で割ったときの余りを出すことができません。",
            "comp":"この二つの項を比べることができません。",
            "lhs":"左辺が型を持ちません。",
            "rhs":"右辺が型を持ちません。",
            "bhs":"両辺が型を持ちません。",
            "lhsnotbool":"左辺が真偽型ではありません。",
            "rhsnotbool":"左辺が真偽型ではありません。",
            "alreadyexists":"$1という名前の型が既にあります。"
        },
        "if":{
            "boolean":"もし文の条件が真偽型ではありません。"
        },
        "while":{
            "boolean":"まで文の条件が真偽型ではありません。"
        },
        "for":{
            "boolean":"からまで文の条件が真偽型ではありません。"
        },
        "sizeof":{
            "var":"この変数のバイト数はわかりません。"
        },
        "array":{
            "invalidsize":"配列の大きさは定数でなければいけません。"
        },
        "operator":{
            "arrow":"この変数はポインターではないため、->演算子を使うことはできません。",
            "subscript":"配列でもポインターでもないため、要素をアクセスすることはできません。",
            "field":"この変数はオブジェクトでないため、メンバーをアクセスすることはできません。"
        },
        "noexist":{
            "class":"$1というクラスは存在しません。",
            "template":"$1というテンプレートは存在しません。",
            "member":"$1というメンバーは存在しません。",
            "func":"$1という関数は存在しません。",
            "var":"$1という変数は存在しません。",
            "type":"$1という型は存在しません。"
        },
        "func":{
            "few":"関数の引数が足りません。",
            "many":"関数の引数が多いです。",
            "cannotcall":"この関数は呼べません。",
            "unknownfield":"この引数は変数か配列の形に直してください。"
        },
        "class":{
            "private":"$1は非公開メンバーなので、クラス外からアクセスできません。",
            "protected":"$1は保護メンバーなので、クラス外からアクセスできません。",
            "nomember":"$1に$2というメンバーはありません。"
        }
    }
}