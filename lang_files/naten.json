{
    "config":{
        "name":"naten",
        "type":"natural",
        "tabsensitive": false
    },
    "tokens":{
        "keywords":[
            {"name":"If", "value":"If"},
            {"name":"then", "value":"then"},
            {"name":"else", "value":"else"},
            {"name":"from", "value":"from"},
            {"name":"to", "value":"to"},
            {"name":"break", "value":"break"},
            {"name":"continue", "value":"continue"},
            {"name":"function", "value":"function"},
            {"name":"loop", "value":"loop"},
            {"name":"inttype", "value":"int"},
            {"name":"shorttype", "value":"short"},
            {"name":"realtype", "value":"double"},
            {"name":"chartype", "value":"char"},
            {"name":"return", "value":"Return"},
            {"name":"template", "value":"template"},
            {"name":"type", "value":"type"},
            {"name":"void", "value":"void"},
            {"name":"nul", "value":"nul"},
            {"name":"boolean", "value":"bool"},
            {"name":"true", "value":"true"},
            {"name":"false", "value":"false"},
            {"name":"jsload", "value":"jsload"},
            {"name":"jsexport", "value":"jsexport"},
            {"name":"sizeof", "value":"sizeof"},
            {"name":"class", "value":"class"},
            {"name":"public", "value":"public"},
            {"name":"private", "value":"private"},
            {"name":"protected", "value":"protected"},
            {"name":"repeat", "value":"repeat"},
            {"name":"operator", "value":"operator"},
            {"name":"typeComp", "value":"typeComp"},
            {"name":"Assign", "value":"Assign"},
            {"name":"Add", "value":"Add"},
            {"name":"Substract", "value":"Substract"},
            {"name":"Multiply", "value":"Multiply"},
            {"name":"Divide", "value":"Divide"},
            {"name":"by", "value":"by"},
            {"name":"is", "value":"is"},
            {"name":"not", "value":"not"},
            {"name":"of", "value":"of"},
            {"name":"in", "value":"in"},
            {"name":"Increment", "value":"Increment"},
            {"name":"Decrement", "value":"Decrement"},
            {"name":"Until", "value":"Until"},
            {"name":"First", "value":"First"},
            {"name":"Initialize", "value":"Initialize"},
            {"name":"initialize", "value":"initialize"},
            {"name":"Declare", "value":"Declare"},
            {"name":"as", "value":"as"},
            {"name":"at", "value":"at"},
            {"name":"with", "value":"with"},
            {"name":"variable", "value":"variable"},
            {"name":"object", "value":"object"},
            {"name":"value", "value":"value"},
            {"name":"Call", "value":"Call"},
            {"name":"element", "value":"element"},
            {"name":"pointer", "value":"pointer"},
            {"name":"fromhere", "value":"starting here"},
            {"name":"tohere", "value":"ending here"},
            {"name":"here", "value":"here"},
            {"name":"that", "value":"that"},
            {"name":"takes", "value":"takes"},
            {"name":"and", "value":"and"},
            {"name":"or", "value":"or"},
            {"name":"returns", "value":"returns"},
            {"name":"code", "value":"code"},
            {"name":"times", "value":"times"},
            {"name":"Load", "value":"Load"},
            {"name":"Export", "value":"Export"},
            {"name":"execute", "value":"execute"},
            {"name":"inheriting", "value":"inherting"},
            {"name":"members", "value":"members"},
            {"name":"Otherwise", "value":"Otherwise"}
        ],
        "int":"[0-9]",
        "hex":"0x[0-9A-F]+",
        "char":"[㐀-龯ぁ-んァ-ヶa-zA-Z_ー]",
        "comment":"((\\s*\/\/.*))\n",
        "string":"\"((?:[^\\\\\"]|\\.)*)\"",
        "ops":[
            {"name":":", "regex": "(:|：)", "precedence": 20},
            {"name":";", "regex": "(;|；)", "precedence": 20},
            {"name":"(", "regex": "(\\(|（)", "precedence":3},
            {"name":")", "regex": "(\\)|）)", "precedence":3},
            {"name":"[", "regex": "(\\[)", "precedence": 20},
            {"name":"]", "regex": "(\\])", "precedence": 20},
            {"name":"{", "regex": "(\\{|｛)", "precedence": 20},
            {"name":"}", "regex": "(\\}|｝)", "precedence": 20},
            {"name":"<-", "regex": "(\\<\\-)", "precedence": 20},
            {"name":"=>", "regex": "(=\\>|＝＞)", "precedence": 20},
            {"name":".", "regex": "(\\.)", "precedence": 1},
            {"name":"->", "regex": "(\\-\\>)", "precedence": 1},
            {"name":"*", "regex": "(\\*|＊)", "precedence": 4},
            {"name":"/", "regex": "(\\/|／)", "precedence": 4},
            {"name":"%", "regex": "(%|％)", "precedence": 4},
            {"name":"+", "regex": "(\\+|＋)", "precedence": 5},
            {"name":"-", "regex": "(\\-)", "precedence": 5},
            {"name":"==", "regex": "(==|＝＝)", "precedence": 7},
            {"name":"!=", "regex": "(!=|！＝)", "precedence": 7},
            {"name":"!", "regex": "(!|！)", "precedence": 10},
            {"name":"<=", "regex": "(\\<=|＜＝)", "precedence": 6},
            {"name":">=", "regex": "(\\>=|＞＝)", "precedence": 6},
            {"name":"<", "regex": "(\\<|＜)", "precedence": 6},
            {"name":">", "regex": "(\\>|＞)", "precedence": 6},
            {"name":"=", "regex": "(=|＝)", "precedence": 20},
            {"name":"&&", "regex": "(&&|＆＆)", "precedence": 8},
            {"name":"&", "regex": "(&|＆)", "precedence": 2},
            {"name":"||", "regex": "(\\|\\||｜)", "precedence": 8},
            {"name":",", "regex": "(,|、)", "precedence": 20}
        ],
        "main":"main",
        "stringClass":"string",
        "arrayTemplate":"Array",
        "stmliststart": "fromhere",
        "stmlistend":"tohere",
        "counter":"counter"
    },
    "grammar":{
        "exp":{
            "op":"exp(1) oper exp(2)",
            "minus":"- exp",
            "paren": "( exp )",
            "call":"exp ( explist )",
            "address":"& var",
            "sizeof":"sizeof ( var )",
            "array":"[ explist ]",
            "func": "( fieldlist(params) ) => ( fieldlist(result) ) stm",
            "var":"var",
            "field":"id of exp",
            "subscript":"exp(arrayname) [ exp(index) ]",
            "arrowfield":"exp -> id",
            "int": "int",
            "char": "char",
            "string": "string",
            "real": "real",
            "true": "true",
            "false": "false",
            "typeeq": "typeComp ( ty(1) , ty(2) )",
            "notbool": "! exp"
        },
        "oper": {
            "add":"+",
            "sub":"-",
            "mul":"*",
            "div":"/",
            "mod":"%",
            "eq":"is",
            "neq":"is not",
            "ge":">=",
            "gt":">",
            "le":"<=",
            "lt":"<",
            "and":"and",
            "or":"or"
        },
        "stm":{
            "assign":{
                "normal":"Assign exp to var .",
                "add":"Add exp to var .",
                "sub":"Substract exp from var .",
                "mul":"Multiply var by exp .",
                "div":"Divide var by exp .",
                "mod":"var % = exp ;",
                "increment":"Increment var .",
                "decrement":"Decrement var ."
            },
            "if":"ifelselist",
            "while":"Until exp stm",
            "dec": "dec(stm)",
            "for":"( stm(init) ) from ( exp ) to ( stm(incr) ) stm",
            "return":{
                "noexp":"return .",
                "exp":"return value exp ."
            },
            "call":{
                "normal":"Call exp with value explist .",
                "noexp":"Call exp ."
            },
            "loop":"loop stm",
            "break":"break .",
            "continue":"continue .",
            "compound":"fromhere stmlist tohere",
            "repeat":"repeat exp times stm"
        },
        "ifelse":{
            "ifelse":"Otherwise If exp then execute code stm",
            "else":"Otherwise execute code stm"
        },
        "ifelselist":{
            "null":"",
            "if":"If exp then execute code stm",
            "ifelse":"ifelse",
            "ififelselist":"If exp then execute code stm ifelse",
            "ifelselist":"ifelse ifelselist"
        },
        "dec":{
            "var": {
                "init":"Initialize variable var as ty with exp .",
                "noinit":"Declare variable var as ty ."
            },
            "object": "Initialize object var as ty with explist .",
            "class": {
                "noinherit":"Declare class id(name) with members fromhere memlist tohere",
                "inherit":"Declare class id(name) inheriting from id(inherit) with members fromhere memlist tohere"
            },
            "func": {
                "normal":"Declare function id that takes fieldlist(params) and returns fieldlist(result) with code stm",
                "noparam":"Declare function id that returns fieldlist(result) with code stm",
                "noresult":"Declare function id that takes fieldlist(params) with code stm",
                "noparamnoresult":"Declare function id with code stm",
                "prototype":"Declare function id that takes fieldlist(params) and returns fieldlist(result) .",
                "prototypenoparam":"Declare function id that returns fieldlist(result) .",
                "prototypenoresult":"Declare function id that takes fieldlist(params) .",
                "prototypenoparamnoresult":"Declare function id ."
            },
            "jsload": {
                "normal":"Load function id from string(func) of string(module) that takes fieldlist(params) and returns fieldlist(result) .",
                "noparam":"Load function id from string(func) of string(module) that returns fieldlist(result) .",
                "noresult":"Load function id from string(func) of string(module) that takes fieldlist(params) .",
                "noparamnoresult":"Load function id from string(func) of string(module) ."
            },
            "jsexport": "Export function id to string .",
            "operator": {
                "normal":"function : operator oper ( fieldlist(params) ) => ( fieldlist(result) ) stm",
                "noparam":"function : operator oper ( ) => ( fieldlist(result) ) stm",
                "noresult":"function : operator oper ( fieldlist(params) ) => ( ) stm",
                "noparamnoresult":"function : operator oper ( ) => ( ) stm",
                "assignnormal":"function : operator = ( fieldlist(params) ) => ( fieldlist(result) ) stm",
                "assignnoparam":"function : operator = ( ) => ( fieldlist(result) ) stm",
                "assignnoresult":"function : operator = ( fieldlist(params) ) => ( ) stm",
                "assignnoparamnoresult":"function : operator = ( ) => ( ) stm"
            },
            "template": "Declare template that takes id . dec"
        },
        "var": {
            "simple":"id",
            "field":"id of var",
            "deref":"variable at var",
            "subscript":"element exp in var",
            "arrowfield":"var -> id"
        },
        "varExp": {
            "var":"var",
            "field":"id of exp",
            "subscript":"element exp(index) of exp(arrayname)",
            "arrowfield":"exp -> id"
        },
        "ty": {
            "name" : "id",
            "void" : "void",
            "int" : "inttype",
            "real" : "realtype",
            "bool" : "boolean",
            "char" : "chartype",
            "short" : "shorttype",
            "pointer" : "pointer of ty",
            "poly" : "id < ty >",
            "funcnormal":"function : ( fieldlist(params) ) => ( fieldlist(result) )",
            "funcnoparam":"function : ( ) => ( fieldlist(result) )",
            "funcnoresult":"function : ( fieldlist(params) ) => ( )",
            "funcnoparamnoresult":"function : ( ) => ( )"        
        },
        "mems":{
            "nospecifier": "declist",
            "public": "public : declist",
            "private": "private : declist",
            "protected": "protected : declist"
        },
        "memlist":{
            "mems": "mems",
            "memlist": "memlist mems"
        },
        "field": {
            "noinit":"var as ty",
            "func":"function : id ( fieldlist(params) ) => ( fieldlist(result) )"
        },
        "explist":{
            "null":"",
            "exp":"exp",
            "explist":"exp , explist"
        },
        "stmlist":{
            "null":"",
            "stm":"stm",
            "stmlist":"stm stmlist"
        },
        "declist":{
            "null":"",
            "dec":"dec",
            "declist":"dec declist"
        },
        "fieldlist":{
            "null":"",
            "field":"field",
            "fieldlist":"field , fieldlist"
        }
    },
    "errors":{
        "keywords":{
            "lineNum":"Line $1",
            "charNum":"Column $1"
        },
        "parser":{
            "unexpectedtoken":"A letter or a word is missing before '$1'."
        },
        "code":{
            "none":"There is no program to compile.",
            "nomain":"There is no main function.",
            "declaredoesntwork":"This declaration is not allowed.",
            "templatedoesntwork":"Only templates for functions and classes are allowed.",
            "import":"Function imports must be done at the start of the standard library."
        },
        "notsupport":{
            "multiplereturn":"Laze does not support functions that return multiple variables.",
            "importinclass":"Importing a function from JavaScript inside a class declaration is not allowed."
        },
        "type":{
            "nomatch":"Type $1 and type $2 do not match.",
            "notclass":"$1 is not a class type.",
            "notobject":"$1 is not an object.",
            "notarray":"$1 is not an array.",
            "notpointer":"$1 is not a pointer",
            "element":"Element $1's type does not match other elements.",
            "add":"Adding these two expressions is not allowed.",
            "sub":"Subtracting these two expressions is not allowed.",
            "mul":"Multiplying these two expressions is not allowed.",
            "div":"Dividing these two expressions is not allowed.",
            "mod":"Dividing these two expressions is not allowed.",
            "comp":"Comparing these two expressions is not allowed.",
            "lhs":"The left hand side of the expression does not have a type.",
            "rhs":"The right hand side of the expression does not have a type.",
            "bhs":"Both sides of the expression does not have a type.",
            "lhsnotbool":"The left hand side of the expression is not a boolean type.",
            "rhsnotbool":"The right hand side of the expression is not a boolean type.",
            "alreadyexists":"A type name $1 already exists."
        },
        "if":{
            "boolean":"The test expression of the if statement is not a boolean type."
        },
        "while":{
            "boolean":"The test expression of the while statement is not a boolean type."
        },
        "for":{
            "boolean":"The test expression of the for statement is not a boolean type."
        },
        "sizeof":{
            "var":"The size of this variable cannot be identified."
        },
        "array":{
            "invalidsize":"The size of the array must be a constant."
        },
        "operator":{
            "arrow":"Since this variable is not a pointer, using the -> operator is not allowed.",
            "subscript":"Since this variable is not a pointer or an array, you cannot access its elements.",
            "field":"Since this variable is not an object, you cannot access its members."
        },
        "noexist":{
            "class":"A class named $1 does not exist.",
            "template":"A template named $1 does not exist.",
            "member":"Member $1 does not exist.",
            "func":"Function $1 does not exist.",
            "var":"Variable $1 does not exist.",
            "type":"Type $1 does not exist."
        },
        "func":{
            "few":"This function call lacks arguments.",
            "many":"There are too many arguments in this function call.",
            "cannotcall":"This function cannot be called.",
            "unknownfield":"Change this argument into a variable or an array.",
            "notdefined":"Function $1 is declared but not defined."
        },
        "class":{
            "private":"Since $1 is a private member, you cannot access it outside the class.",
            "protected":"$Since $1 is a protected member, you cannot access it outside the class.",
            "nomember":"Member $1 does not exist in class $2."
        }
    }
}