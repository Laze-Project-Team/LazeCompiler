{
    "config":{
        "name":"ja",
        "type":"programming",
        "tabsensitive": false
    },
    "tokens":{
        "keywords":[
            {"name":"if", "value":"もし"},
            {"name":"then", "value":"ならば"},
            {"name":"else", "value":"でなければ"},
            {"name":"from", "value":"から"},
            {"name":"to", "value":"まで"},
            {"name":"break", "value":"抜ける"},
            {"name":"continue", "value":"次へ"},
            {"name":"function", "value":"関数"},
            {"name":"loop", "value":"無限ループ"},
            {"name":"inttype", "value":"整数"},
            {"name":"shorttype", "value":"整数32"},
            {"name":"realtype", "value":"実数"},
            {"name":"chartype", "value":"文字"},
            {"name":"return", "value":"終了"},
            {"name":"type", "value":"型"},
            {"name":"void", "value":"無"},
            {"name":"nul", "value":"空"},
            {"name":"boolean", "value":"真偽"},
            {"name":"true", "value":"真"},
            {"name":"false", "value":"偽"},
            {"name":"jsload", "value":"js読み込み"},
            {"name":"jsexport", "value":"js書き出し"},
            {"name":"sizeof", "value":"バイト数"},
            {"name":"class", "value":"クラス"},
            {"name":"public", "value":"公開"},
            {"name":"private", "value":"非公開"},
            {"name":"protected", "value":"保護"},
            {"name":"repeat", "value":"回繰り返す"},
            {"name":"operator", "value":"演算子"},
            {"name":"typeComp", "value":"型比較"}
        ],
        "int":"[0-9]",
        "hex":"0x[0-9A-F]+",
        "char":"[㐀-龯ぁ-んァ-ヶa-zA-Z_ー]",
        "comment":"((\\s*\/\/.*))\n",
        "string":"\"((?:[^\\\\\"]|\\.)*)\"",
        "ops":[
            {"name":":", "regex": "(:|：)", "precedence": 20},
            {"name":";", "regex": "(;|；)", "precedence": 20},
            {"name":"(", "regex": "(\\(|（)", "precedence":3},
            {"name":")", "regex": "(\\)|）)", "precedence":3},
            {"name":"[", "regex": "(\\[)", "precedence": 20},
            {"name":"]", "regex": "(\\])", "precedence": 20},
            {"name":"{", "regex": "(\\{|｛)", "precedence": 20},
            {"name":"}", "regex": "(\\}|｝)", "precedence": 20},
            {"name":"<-", "regex": "(\\<\\-)", "precedence": 20},
            {"name":"=>", "regex": "(=\\>|＝＞)", "precedence": 20},
            {"name":".", "regex": "(\\.)", "precedence": 1},
            {"name":"->", "regex": "(\\-\\>)", "precedence": 1},
            {"name":"*", "regex": "(\\*|＊)", "precedence": 4},
            {"name":"/", "regex": "(\\/|／)", "precedence": 4},
            {"name":"%", "regex": "(%|％)", "precedence": 4},
            {"name":"+", "regex": "(\\+|＋)", "precedence": 5},
            {"name":"-", "regex": "(\\-)", "precedence": 5},
            {"name":"==", "regex": "(==|＝＝)", "precedence": 7},
            {"name":"!=", "regex": "(!=|！＝)", "precedence": 7},
            {"name":"<=", "regex": "(\\<=|＜＝)", "precedence": 6},
            {"name":">=", "regex": "(\\>=|＞＝)", "precedence": 6},
            {"name":"<", "regex": "(\\<|＜)", "precedence": 6},
            {"name":">", "regex": "(\\>|＞)", "precedence": 6},
            {"name":"=", "regex": "(=|＝)", "precedence": 20},
            {"name":"&&", "regex": "(&&|＆＆)", "precedence": 8},
            {"name":"&", "regex": "(&|＆)", "precedence": 2},
            {"name":"||", "regex": "(\\|\\||｜)", "precedence": 8},
            {"name":",", "regex": "(,|、)", "precedence": 20}
        ],
        "main": "実行",
        "stringClass":"文字列",
        "stmliststart": "{",
        "stmlistend":"}"
    },
    "grammar":{
        "exp":{
            "op":"exp(1) oper exp(2)",
            "minus":"- exp",
            "paren": "( exp )",
            "call":"exp ( explist )",
            "address":"& var",
            "sizeof":"sizeof ( var )",
            "array":"[ explist ]",
            "func": "( fieldlist(params) ) => ( fieldlist(result) ) stm",
            "var":"var",
            "field":"exp . id",
            "subscript":"exp(arrayname) [ exp(index) ]",
            "arrowfield":"exp -> id",
            "int": "int",
            "char": "char",
            "string": "string",
            "real": "real",
            "true": "true",
            "false": "false",
            "typeeq": "typeComp ( ty(1) , ty(2) )"
        },
        "oper": {
            "add":"+",
            "sub":"-",
            "mul":"*",
            "div":"/",
            "mod":"%",
            "eq":"==",
            "neq":"!=",
            "ge":">=",
            "gt":">",
            "le":"<=",
            "lt":"<",
            "and":"&&",
            "or":"||"
        },
        "stm":{
            "assign":{
                "normal":"var = exp ;",
                "add":"var + = exp ;",
                "sub":"var - = exp ;",
                "mul":"var * = exp ;",
                "div":"var / = exp ;",
                "increment":"var + + ;",
                "decrement":"var - - ;"
            },
            "if":{
                "if":"if ( exp ) then stm(then)",
                "ifelse":"if ( exp ) then stm(then) else stm(else)"
            },
            "while":"( exp ) to stm",
            "dec": "dec(stm)",
            "for":"( stm(init) ) from ( exp ) to ( stm(incr) ) stm",
            "return":{
                "noexp":"return ;",
                "exp":"return ( exp ) ;"
            },
            "call":{
                "normal":"exp ( explist ) ;"
            },
            "loop":"loop stm",
            "break":"break ;",
            "continue":"continue ;",
            "compound":"{ stmlist }",
            "repeat":"( exp ) repeat stm"
        },
        "dec":{
            "var": {
                "init":"ty : var = exp ;",
                "noinit":"ty : var ;"
            },
            "object": "ty : var ( explist ) ;",
            "class": {
                "noinherit":"class : id(name) { memlist }",
                "inherit":"class : id(name) <- id(inherit) { memlist }"
            },
            "func": {
                "normal":"function : id ( fieldlist(params) ) => ( fieldlist(result) ) stm"
            },
            "jsload": {
                "normal":"function : id ( fieldlist(params) ) => ( fieldlist(result) ) = jsload ( string(module) , string(func) ) ;"
            },
            "jsexport": "jsexport ( id , string ) ;",
            "operator": {
                "normal":"function : operator oper ( fieldlist(params) ) => ( fieldlist(result) ) stm",
                "assignnormal":"function : operator = ( fieldlist(params) ) => ( fieldlist(result) ) stm"
            },
            "template": "type < id > : dec"
        },
        "var": {
            "simple":"id",
            "field":"var . id",
            "deref":"* var",
            "subscript":"var [ exp ]",
            "arrowfield":"var -> id"
        },
        "ty": {
            "name" : "id",
            "void" : "void",
            "int" : "inttype",
            "real" : "realtype",
            "bool" : "boolean",
            "char" : "chartype",
            "short" : "shorttype",
            "pointer" : "* ty",
            "poly" : "id < ty >",
            "funcnormal":"function : ( fieldlist(params) ) => ( fieldlist(result) )"
        },
        "mems":{
            "nospecifier": "declist",
            "public": "public : declist",
            "private": "private : declist",
            "protected": "protected : declist"
        },
        "memlist":{
            "mems": "mems",
            "memlist": "memlist mems"
        },
        "field": {
            "noinit":"ty : var",
            "func":"function : id ( fieldlist(params) ) => ( fieldlist(result) )"
        },
        "explist":{
            "null":"",
            "exp":"exp",
            "explist":"exp , explist"
        },
        "stmlist":{
            "null":"",
            "stm":"stm",
            "stmlist":"stm stmlist"
        },
        "declist":{
            "null":"",
            "dec":"dec",
            "declist":"dec declist"
        },
        "fieldlist":{
            "null":"",
            "field":"field",
            "fieldlist":"field , fieldlist"
        }
    },
    "errors":{
        "keywords":{
            "lineNum":"$1行目",
            "charNum":"$1文字目"
        },
        "parser":{
            "unexpectedtoken":"「$1」の前の単語、もしくは文字が抜けています。"
        },
        "code":{
            "none":"プログラムがありません。",
            "nomain":"実行関数がありません。",
            "declaredoesntwork":"この宣言をすることはできません。",
            "templatedoesntwork":"関数とクラス以外のテンプレートを宣言することはできません。",
            "import":"関数の読み込みは標準ライブラリの最初に行わなければいけません。"
        },
        "notsupport":{
            "multiplereturn":"複数変数を返す関数を宣言することはできません。",
            "importinclass":"クラス宣言内で関数をJavaScriptから読み込むことはできません。"
        },
        "type":{
            "nomatch":"$1と$2の型が合いません。",
            "notclass":"$1の型がクラスではありません。",
            "notobject":"$1はオブジェクトではありません。",
            "notarray":"$1は配列ではありません。",
            "notpointer":"$1はポインターではありません。",
            "element":"$1番目の要素が他の要素の型と合いません。",
            "add":"この二つの項を足すことはできません。",
            "sub":"この二つの項を引くことはできません。",
            "mul":"この二つの項を掛けることはできません。",
            "div":"この二つの項を割ることはできません。",
            "mod":"左辺を右辺で割ったときの余りを出すことができません。",
            "comp":"この二つの項を比べることができません。",
            "lhs":"左辺が型を持ちません。",
            "rhs":"右辺が型を持ちません。",
            "bhs":"両辺が型を持ちません。",
            "lhsnotbool":"左辺が真偽型ではありません。",
            "rhsnotbool":"左辺が真偽型ではありません。",
            "alreadyexists":"$1という名前の型が既にあります。"
        },
        "if":{
            "boolean":"もし文の条件が真偽型ではありません。"
        },
        "while":{
            "boolean":"まで文の条件が真偽型ではありません。"
        },
        "for":{
            "boolean":"からまで文の条件が真偽型ではありません。"
        },
        "sizeof":{
            "var":"この変数のバイト数はわかりません。"
        },
        "array":{
            "invalidsize":"配列の大きさは定数でなければいけません。"
        },
        "operator":{
            "arrow":"この変数はポインターではないため、->演算子を使うことはできません。",
            "subscript":"配列でもポインターでもないため、要素をアクセスすることはできません。",
            "field":"この変数はオブジェクトでないため、メンバーをアクセスすることはできません。"
        },
        "noexist":{
            "class":"$1というクラスは存在しません。",
            "template":"$1というテンプレートは存在しません。",
            "member":"$1というメンバーは存在しません。",
            "func":"$1という関数は存在しません。",
            "var":"$1という変数は存在しません。",
            "type":"$1という型は存在しません。"
        },
        "func":{
            "few":"関数の引数が足りません。",
            "many":"関数の引数が多いです。",
            "cannotcall":"この関数は呼べません。",
            "unknownfield":"この引数は変数か配列の形に直してください。"
        },
        "class":{
            "private":"$1は非公開メンバーなので、クラス外からアクセスできません。",
            "protected":"$1は保護メンバーなので、クラス外からアクセスできません。",
            "nomember":"$1に$2というメンバーはありません。"
        }
    }
}