{
    "config":{
        "name":"ja",
        "type":"programming"
    },
    "tokens":{
        "keywords":
        {
            "if":"もし",
            "then":"ならば",
            "else":"でなければ",
            "from":"から",
            "to":"まで",
            "break":"抜ける",
            "continue":"次へ",
            "function":"関数",
            "loop":"無限ループ",
            "inttype":"整数",
            "shorttype":"整数32",
            "realtype":"実数",
            "chartype":"文字",
            "return":"終了",
            "type":"型",
            "void":"無",
            "nul":"空",
            "boolean":"真偽",
            "true":"真",
            "false":"偽",
            "jsload":"js読み込み",
            "jsexport":"js書き出し",
            "sizeof":"バイト数",
            "class":"クラス",
            "public":"公開",
            "private":"非公開",
            "protected":"保護",
            "repeat":"回繰り返す",
            "lineend": ";",
            "operator":"演算子"
        },
        "int":"[0-9]",
        "hex":"0x[0-9A-F]+",
        "char":"[㐀-龯ぁ-んァ-ヶa-zA-Z_ー]",
        "comment":"(^(\\s*\/\/.*)$|^(\\s*#.*)$)",
        "string":"\"((?:[^\\\\\"]|\\.)*)\"",
        "ops":[
            {"name":":", "regex": "^(:|：)", "precedence": 20},
            {"name":";", "regex": "^(;|；)", "precedence": 20},
            {"name":"(", "regex": "^(\\(|（)", "precedence":3},
            {"name":")", "regex": "^(\\)|）)", "precedence":3},
            {"name":"[", "regex": "^(\\[)", "precedence": 20},
            {"name":"]", "regex": "^(\\])", "precedence": 20},
            {"name":"{", "regex": "^(\\{|｛)", "precedence": 20},
            {"name":"}", "regex": "^(\\}|｝)", "precedence": 20},
            {"name":"<-", "regex": "^(\\<\\-)", "precedence": 20},
            {"name":"=>", "regex": "^(=\\>|＝＞)", "precedence": 20},
            {"name":".", "regex": "^(\\.)", "precedence": 1},
            {"name":"->", "regex": "^(\\-\\>)", "precedence": 1},
            {"name":"*", "regex": "^(\\*|＊)", "precedence": 4},
            {"name":"/", "regex": "^(\\/|／)", "precedence": 4},
            {"name":"%", "regex": "^(%|％)", "precedence": 4},
            {"name":"+", "regex": "^(\\+|＋)", "precedence": 5},
            {"name":"-", "regex": "^(\\-)", "precedence": 5},
            {"name":"==", "regex": "^(==|＝＝)", "precedence": 7},
            {"name":"!=", "regex": "^(!=|！＝)", "precedence": 7},
            {"name":"<=", "regex": "^(\\<=|＜＝)", "precedence": 6},
            {"name":">=", "regex": "^(\\>=|＞＝)", "precedence": 6},
            {"name":"<", "regex": "^(\\<|＜)", "precedence": 6},
            {"name":">", "regex": "^(\\>|＞)", "precedence": 6},
            {"name":"=", "regex": "^(=|＝)", "precedence": 20},
            {"name":"&&", "regex": "^(&&|＆＆)", "precedence": 8},
            {"name":"&", "regex": "^(&|＆)", "precedence": 2},
            {"name":"||", "regex": "^(\\|\\||｜)", "precedence": 8},
            {"name":",", "regex": "^(,|、)", "precedence": 20}
        ],
        "main": "実行"
    },
    "grammar":{
        "exp":{
            "op":"exp(1) oper exp(2)",
            "minus":"- exp",
            "paren": "( exp )",
            "call":"exp ( explist )",
            "address":"& var",
            "sizeof":"sizeof ( var )",
            "array":"[ explist ]",
            "func": "( fieldlist(params) ) => ( fieldlist(result) ) stm",
            "var":"var",
            "field":"exp . id",
            "subscript":"exp(arrayname) [ exp(index) ]",
            "arrowfield":"exp -> id",
            "int": "int",
            "char": "char",
            "string": "string",
            "real": "real",
            "true": "true",
            "false": "false"
        },
        "oper": {
            "add":"+",
            "sub":"-",
            "mul":"*",
            "div":"/",
            "mod":"%",
            "eq":"==",
            "neq":"!=",
            "ge":">=",
            "gt":">",
            "le":"<=",
            "lt":"<",
            "and":"&&",
            "or":"||"
        },
        "stm":{
            "assign":{
                "normal":"var = exp lineend",
                "add":"var + = exp lineend",
                "sub":"var - = exp lineend",
                "mul":"var * = exp lineend",
                "div":"var / = exp lineend",
                "increment":"var + + lineend",
                "decrement":"var - - lineend"
            },
            "if":{
                "if":"if ( exp ) then stm(then)",
                "ifelse":"if ( exp ) then stm(then) else stm(else)"
            },
            "while":"( exp ) to stm",
            "dec": "dec(stm)",
            "for":"( stm(init) ) from ( exp ) to ( stm(incr) ) stm",
            "return":{
                "noexp":"return lineend",
                "exp":"return ( exp ) lineend"
            },
            "call":"exp ( explist ) lineend",
            "loop":"loop stm",
            "break":"break lineend",
            "continue":"continue lineend",
            "compound":"{ stmlist }",
            "repeat":"( exp ) repeat stm"
        },
        "dec":{
            "var": {
                "init":"ty : var = exp lineend",
                "noinit":"ty : var lineend"
            },
            "object": "ty : id ( explist ) lineend",
            "class": {
                "noinherit":"class : id(name) { memlist }",
                "inherit":"class : id(name) <- id(inherit) { memlist }"
            },
            "func": "function : id ( fieldlist(params) ) => ( fieldlist(result) ) stm",
            "jsload": "function : id ( fieldlist(params) ) => ( fieldlist(result) ) = jsload ( string(module) , string(func) ) lineend",
            "jsexport": "jsexport ( id , string ) lineend",
            "operator": "function : operator oper ( fieldlist(params) ) => ( fieldlist(result) ) stm",
            "template": "type < id > : dec"
        },
        "var": {
            "simple":"id",
            "field":"var . id",
            "deref":"* var",
            "subscript":"var [ exp ]",
            "arrowfield":"var -> id"
        },
        "ty": {
            "name" : "id",
            "void" : "void",
            "int" : "inttype",
            "real" : "realtype",
            "bool" : "boolean",
            "char" : "chartype",
            "short" : "shorttype",
            "pointer" : "* ty",
            "poly" : "id < ty >",
            "func": "function : ( fieldlist(params) ) => ( fieldlist(result) )"
        },
        "mems":{
            "nospecifier": "declist",
            "public": "public : declist",
            "private": "private : declist",
            "protected": "protected : declist"
        },
        "memlist":{
            "mems": "mems",
            "memlist": "memlist mems"
        },
        "field": {
            "noinit":"ty : var",
            "func":"function : id ( fieldlist(params) ) => ( fieldlist(result) )"
        },
        "explist":{
            "null":"",
            "exp":"exp",
            "explist":"exp , explist"
        },
        "stmlist":{
            "null":"",
            "stm":"stm",
            "stmlist":"stm stmlist"
        },
        "declist":{
            "null":"",
            "dec":"dec",
            "declist":"dec declist"
        },
        "fieldlist":{
            "null":"",
            "field":"field",
            "fieldlist":"field , fieldlist"
        }
    },
    "errors":{
        "code":{
            "none":"プログラムがありません。",
            "nomain":"実行関数がありません。"
        },
        "type":{
            "nomatch":"型が合いません。",
            "notclass":"$1の型がクラスではありません。",
            "notobject":"$1はオブジェクトではありません。",
            "notarray":"$1は配列ではありません。",
            "notpointer":"$1はポインターではありません。"
        },
        "if":{
            "boolean":"もし文の条件が真偽型ではありません。"
        },
        "while":{
            "boolean":"まで文の条件が真偽型ではありません。"
        },
        "for":{
            "boolean":"からまで文の条件が真偽型ではありません。"
        },
        "operator":{
            "arrow":"この変数はポインターではないため、->演算子は使えません。"
        },
        "noexist":{
            "class":"$1というクラスは存在しません。",
            "template":"$1というテンプレートは存在しません。",
            "member":"$1というメンバーは存在しません。",
            "func":"$1という関数は存在しません。",
            "var":"$1という変数は存在しません。"
        },
        "func":{
            "few":"関数の引数が少ないです。",
            "many":"関数の引数が多いです。",
            "cannotcall":"この関数は呼べません。"
        },
        "class":{
            "private":"$1は非公開メンバーです。",
            "protected":"$1は保護メンバーです。",
            "nomember":"$1に$2というメンバーはありません。"
        }
    }
}