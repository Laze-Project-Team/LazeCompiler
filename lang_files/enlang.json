{
    "config":{
        "name":"en",
        "type":"programming"
    },
    "tokens":{
        "keywords":
        {
            "if":"if",
            "then":"then",
            "else":"else",
            "from":"from",
            "to":"to",
            "break":"break",
            "continue":"continue",
            "function":"function",
            "loop":"loop",
            "inttype":"int",
            "shorttype":"short",
            "realtype":"double",
            "chartype":"char",
            "return":"return",
            "type":"template",
            "void":"void",
            "nul":"nul",
            "boolean":"boolean",
            "true":"true",
            "false":"false",
            "jsload":"jsload",
            "jsexport":"jsexport",
            "sizeof":"sizeof",
            "class":"class",
            "public":"public",
            "private":"private",
            "protected":"protected",
            "repeat":"repeat",
            "lineend": ";"
        },
        "int":"[0-9]",
        "hex":"0x[0-9A-F]+",
        "char":"[㐀-龯ぁ-んァ-ヶa-zA-Z_ー]",
        "comment":"(^(\\s*\/\/.*)$|^(\\s*#.*)$)",
        "string":"\"((?:[^\\\\\"]|\\.)*)\"",
        "ops":[
            {"name":",", "regex": "^(,|、)"},
            {"name":":", "regex": "^(:|：)"},
            {"name":";", "regex": "^(;|；)"},
            {"name":"(", "regex": "^(\\(|（)"},
            {"name":")", "regex": "^(\\)|）)"},
            {"name":"[", "regex": "^(\\[)"},
            {"name":"]", "regex": "^(\\])"},
            {"name":"{", "regex": "^(\\{|｛)"},
            {"name":"}", "regex": "^(\\}|｝)"},
            {"name":".", "regex": "^(\\.)"},
            {"name":"+", "regex": "^(\\+|＋)"},
            {"name":"*", "regex": "^(\\*|＊)"},
            {"name":"/", "regex": "^(\\/|／)"},
            {"name":"%", "regex": "^(%|％)"},
            {"name":"=>", "regex": "^(=\\>|＝＞)"},
            {"name":"<-", "regex": "^(\\<\\-)"},
            {"name":"->", "regex": "^(\\-\\>)"},
            {"name":"==", "regex": "^(==|＝＝)"},
            {"name":"!=", "regex": "^(!=|！＝)"},
            {"name":"<=", "regex": "^(\\<=|＜＝)"},
            {"name":">=", "regex": "^(\\>=|＞＝)"},
            {"name":"<", "regex": "^(\\<|＜)"},
            {"name":">", "regex": "^(\\>|＞)"},
            {"name":"&&", "regex": "^(&&|＆＆)"},
            {"name":"&", "regex": "^(&|＆)"},
            {"name":"||", "regex": "^(\\|\\||｜)"},
            {"name":"-", "regex": "^(\\-)"},
            {"name":"=", "regex": "^(=|＝)"}
        ],
        "main":"main"
    },
    "grammar":{
        "exp":{
            "op":"exp(1) oper exp(2)",
            "minus":"- exp",
            "paren": "( exp )",
            "call":"varExp ( explist )",
            "address":"& var",
            "sizeof":"sizeof ( var )",
            "array":"[ explist ]",
            "func": "( fieldlist(params) ) => ( fieldlist(result) ) stm",
            "var":"var",
            "field":"exp . id",
            "subscript":"exp(arrayname) [ exp(index) ]",
            "arrowfield":"exp -> id",
            "int": "int",
            "char": "char",
            "string": "string",
            "real": "real",
            "true": "true",
            "false": "false"
        },
        "oper": {
            "add":"+",
            "sub":"-",
            "mul":"*",
            "div":"/",
            "mod":"%",
            "eq":"==",
            "neq":"!=",
            "ge":">=",
            "gt":">",
            "le":"<=",
            "lt":"<",
            "and":"&&",
            "or":"||"
        },
        "stm":{
            "assign":{
                "normal":"var = exp lineend",
                "add":"var + = exp lineend",
                "sub":"var - = exp lineend",
                "mul":"var * = exp lineend",
                "div":"var / = exp lineend",
                "increment":"var + + lineend",
                "decrement":"var - - lineend"
            },
            "if":{
                "if":"if ( exp ) stm(then)",
                "ifelse":"if ( exp ) stm(then) else stm(else)"
            },
            "while":"( exp ) to stm",
            "dec": "dec(stm)",
            "for":"( stm(init) ) from ( exp ) to ( stm(incr) ) stm",
            "return":{
                "noexp":"return lineend",
                "exp":"return ( exp ) lineend"
            },
            "call":"varExp ( explist ) lineend",
            "loop":"loop stm",
            "break":"break lineend",
            "continue":"continue lineend",
            "compound":"{ stmlist }",
            "repeat":"( exp ) repeat stm"
        },
        "dec":{
            "var": {
                "init":"ty : var = exp lineend",
                "noinit":"ty : var lineend"
            },
            "object": "ty : id ( explist ) lineend",
            "class": {
                "noinherit":"class : id(name) { memlist }",
                "inherit":"class : id(name) <- id(inherit) { memlist }"
            },
            "func": "function : id ( fieldlist(params) ) => ( fieldlist(result) ) stm",
            "jsload": "function : id ( fieldlist(params) ) => ( fieldlist(result) ) = jsload ( string(module) , string(func) ) lineend",
            "jsexport": "jsexport ( id , string ) lineend",
            "template": "type < id > : dec"
        },
        "var": {
            "simple":"id",
            "field":"var . id",
            "deref":"* var",
            "subscript":"var [ exp ]",
            "arrowfield":"var -> id"
        },
        "varExp": {
            "var":"var",
            "field":"exp . id",
            "subscript":"exp(arrayname) [ exp(index) ]",
            "arrowfield":"exp -> id"
        },
        "ty": {
            "name" : "id",
            "void" : "void",
            "int" : "inttype",
            "real" : "realtype",
            "bool" : "boolean",
            "char" : "chartype",
            "short" : "shorttype",
            "pointer" : "* ty",
            "poly" : "id < ty >",
            "func": "function : ( fieldlist(params) ) => ( fieldlist(result) )"
        },
        "mems":{
            "nospecifier": "declist",
            "public": "public : declist",
            "private": "private : declist",
            "protected": "protected : declist"
        },
        "memlist":{
            "mems": "mems",
            "memlist": "memlist mems"
        },
        "field": {
            "noinit":"ty : var"
        },
        "explist":{
            "null":"",
            "exp":"exp",
            "explist":"exp , explist"
        },
        "stmlist":{
            "null":"",
            "stm":"stm",
            "stmlist":"stm stmlist"
        },
        "declist":{
            "null":"",
            "dec":"dec",
            "declist":"dec declist"
        },
        "fieldlist":{
            "null":"",
            "field":"field",
            "fieldlist":"field , fieldlist"
        }
    }
}