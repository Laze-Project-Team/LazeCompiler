function 実数表示 from "log""console"x double . 
function Arduino設定 from "setUp""arduino"vendorId int , c function : ( ) => ( ) . 
function Arduinoコマンド送信 from "sendCommand""arduino"コマンド char , data short . 
function Arduinoデータ受信 from "checkInput""arduino". 
function Arduinoアナログ入力 from "analogRead""arduino"ピン番号 int データ short . 
function Arduinoデジタル入力 from "digitalRead""arduino"ピン番号 int データ short . 
function 行列表示 from "logMatrix""console"4 4 offset double . 
function アドレス表示 from "log""console"x type . 
function _文字列表示 from "logstring""console"x char , 長さ int . 
function 時間計測 from "now""performance"時間 double . 
function glClearDepth from "clearDepth""webgl"i short . 
function glDepthFunc from "depthFunc""webgl"i short . 
function glEnable from "enable""webgl"i short . 
function glDisable from "disable""webgl"i short . 
function glCreateProgram from "createProgram""webgl"prog short . 
function glCreateBuffer from "createBuffer""webgl"buffer short . 
function glBindBuffer from "bindBuffer""webgl"i short , j short . 
function glBufferData from "bufferData""webgl"i short , offset double , size short , j short . 
function glElementBufferData from "elementBufferData""webgl"i short , offset short , size short , j short . 
function glUseProgram from "useProgram""webgl"i short . 
function glGetAttribLocation from "getAttribLocation""webgl"i short , offset char , size short loc short . 
function glVertexAttribPointer from "vertexAttribPointer""webgl"index short , size short , ty short , normalized short , stride short , offset short . 
function glEnableVertexAttribArray from "enableVertexAttribArray""webgl"index short . 
function glDrawArrays from "drawArrays""webgl"i short , first short , count short . 
function _glGetUniformLocation from "getUniformLocation""webgl"i short , offset char , size short loc short . 
function glUniformMatrix2fv from "uniformMatrix2fv""webgl"loc short , trans short , offset double . 
function glUniformMatrix3fv from "uniformMatrix3fv""webgl"loc short , trans short , offset double . 
function glUniformMatrix4fv from "uniformMatrix4fv""webgl"loc short , trans short , 16 offset double . 
function glUniform1f from "uniform1f""webgl"loc short , v0 double . 
function glUniform1fv from "uniform1fv""webgl"loc short , v0 double . 
function glUniform1i from "uniform1i""webgl"loc short , v0 short . 
function glUniform1iv from "uniform1iv""webgl"loc short , v0 short . 
function glUniform2f from "uniform2f""webgl"loc short , v0 double , v1 double . 
function glUniform2fv from "uniform2fv""webgl"loc short , v0 double , v1 double . 
function glUniform2i from "uniform2i""webgl"loc short , v0 short , v1 short . 
function glUniform2iv from "uniform2iv""webgl"loc short , v0 short , v1 short . 
function glUniform3f from "uniform3f""webgl"loc short , v0 double , v1 double , v2 double . 
function glUniform3fv from "uniform3fv""webgl"loc short , v0 double , v1 double , v2 double . 
function glUniform3i from "uniform3i""webgl"loc short , v0 short , v1 short , v2 short . 
function glUniform3iv from "uniform3iv""webgl"loc short , v0 short , v1 short , v2 short . 
function glUniform4f from "uniform4f""webgl"loc short , v0 double , v1 double , v2 double , v3 double . 
function glUniform4fv from "uniform4fv""webgl"loc short , v0 double , v1 double , v2 double , v3 double . 
function glUniform4i from "uniform4i""webgl"loc short , v0 short , v1 short , v2 short , v3 short . 
function glUniform4iv from "uniform4iv""webgl"loc short , v0 short , v1 short , v2 short , v3 short . 
function glClearColor from "clearColor""webgl"r double , g double , b double , a double . 
function glClear from "clear""webgl"color short . 
function glDrawElements from "drawElements""webgl"i short , count short , ty short , offset short . 
function glBlendFunc from "blendFunc""webgl"i short , j short . 
function キーチェック from "checkKeyPress""js"keyCode short pressed int . 
function マウスチェック from "checkMousePress""js"pressed int . 
function マウス相対座標X from "checkRelativeMouseX""js"x double . 
function マウス相対座標Y from "checkRelativeMouseY""js"x double . 
function マウス絶対座標X from "checkAbsoluteMouseX""js"x double . 
function マウス絶対座標Y from "checkAbsoluteMouseY""js"x double . 
function jsRand from "rand""js"x double . 
function メモリ確保 from "alloc""js"size short p type . 
function _loadTexture from "loadTexture""webgl"offset char , length short a short . 
function glActiveTexture from "activeTexture""webgl"i short . 
function glBindTexture from "bindTexture""webgl"i short , j short . 
function クリックしたら消える from "lockPointer""js". 
function sin input double 結果 double PI double 3.14159265358979312 . 
temp int input  / ( 2.0  * PI ) . 
rad double input  - ( 2.0  * PI  * temp ) . 
plusminus double 1.0 . 
rad  < 0.0 then rad  + ( 2.0  * PI ) to rad . 

rad  > PI then 0  - 1.0 to plusminus . 
rad  > 1.5  * PI then ( 2.0  * PI )  - rad to rad . 
rad  - PI to rad . 

rad  > 0.5  * PI then PI  - rad to rad . 


rad  > 0.25  * PI then ( 0.5  * PI )  - rad to rad . 
doubleRad double rad  * rad . 
1.0  - ( doubleRad )  / 2.0  + ( doubleRad  * doubleRad )  / 24.0  - ( doubleRad  * doubleRad  * doubleRad )  / 720.0  + ( doubleRad  * doubleRad  * doubleRad  * doubleRad )  / 40320.0  - ( doubleRad  * doubleRad  * doubleRad  * doubleRad  * doubleRad )  / 3628800.0  + ( doubleRad  * doubleRad  * doubleRad  * doubleRad  * doubleRad  * doubleRad )  / 479001600.0 to 結果 . 
結果  * plusminus to 結果 . 
doubleRad double rad  * rad . 
rad  - ( rad  * doubleRad )  / 6.0  + ( rad  * doubleRad  * doubleRad )  / 120.0  - ( rad  * doubleRad  * doubleRad  * doubleRad )  / 5040.0  + ( rad  * doubleRad  * doubleRad  * doubleRad  * doubleRad )  / 362880.0  - ( rad  * doubleRad  * doubleRad  * doubleRad  * doubleRad  * doubleRad )  / 39916800.0  + ( rad  * doubleRad  * doubleRad  * doubleRad  * doubleRad  * doubleRad  * doubleRad )  / 6227020800.0  - ( rad  * doubleRad  * doubleRad  * doubleRad  * doubleRad  * doubleRad  * doubleRad  * doubleRad )  / 1307674368000.0 to 結果 . 
結果  * plusminus to 結果 . 


function cos input double 結果 double PI double 3.14159265358979312 . 
temp int input  / ( 2  * PI ) . 
rad double input  - ( 2  * PI  * temp ) . 
plusminus double 1.0 . 
rad  < 0.0 then rad  + ( 2.0  * PI ) to rad . 

rad  > PI then rad  > 1.5  * PI then ( 2.0  * PI )  - rad to rad . 
0  - 1.0 to plusminus . 
rad  - PI to rad . 

rad  > 0.5  * PI then 0  - 1.0 to plusminus . 
PI  - rad to rad . 


rad  < 0.25  * PI then doubleRad double rad  * rad . 
1.0  - ( doubleRad )  / 2.0  + ( doubleRad  * doubleRad )  / 24.0  - ( doubleRad  * doubleRad  * doubleRad )  / 720.0  + ( doubleRad  * doubleRad  * doubleRad  * doubleRad )  / 40320.0  - ( doubleRad  * doubleRad  * doubleRad  * doubleRad  * doubleRad )  / 3628800.0  + ( doubleRad  * doubleRad  * doubleRad  * doubleRad  * doubleRad  * doubleRad )  / 479001600.0 to 結果 . 
結果  * plusminus to 結果 . 
( 0.5  * PI )  - rad to rad . 
doubleRad double rad  * rad . 
rad  - ( rad  * doubleRad )  / 6.0  + ( rad  * doubleRad  * doubleRad )  / 120.0  - ( rad  * doubleRad  * doubleRad  * doubleRad )  / 5040.0  + ( rad  * doubleRad  * doubleRad  * doubleRad  * doubleRad )  / 362880.0  - ( rad  * doubleRad  * doubleRad  * doubleRad  * doubleRad  * doubleRad )  / 39916800.0  + ( rad  * doubleRad  * doubleRad  * doubleRad  * doubleRad  * doubleRad  * doubleRad )  / 6227020800.0  - ( rad  * doubleRad  * doubleRad  * doubleRad  * doubleRad  * doubleRad  * doubleRad  * doubleRad )  / 1307674368000.0 to 結果 . 
結果  * plusminus to 結果 . 


function tan rad double 結果 double PI double 3.14159265358979312 . 
sqRad double rad  * rad . 
sin ( rad )  / cos ( rad ) to 結果 . 

T . function abs a T b T a  >= 0 then a to b . 
0  - a to b . 


function toRad deg double rad double PI double 3.14159265358979312 . 
( deg  / 180 )  * PI to rad . 

function root x double y double 5 to y . 
( i int 0 . ) from ( i  is 20 ) to ( i  + 1 to i . ) 0.5  * ( y  + ( x  / y ) ) to y . 


function length3d x double , y double , z double length double root ( x  * x  + y  * y  + z  * z ) to length . 

function normalize 3 vector double length double length3d ( 0 vector , 1 vector , 2 vector ) . 
length  is 0.0 then Return . 

0 vector  / length to 0 vector . 
1 vector  / length to 1 vector . 
2 vector  / length to 2 vector . 

function dot 3 vec1 double , 3 vec2 double 結果 double 0 vec1  * 0 vec2  + 1 vec1  * 1 vec2  + 2 vec1  * 2 vec2 to 結果 . 

function cross 3 output double , 3 vec1 double , 3 vec2 double 1 vec1  * 2 vec2  - 2 vec1  * 1 vec2 to 0 output . 
2 vec1  * 0 vec2  - 0 vec1  * 2 vec2 to 1 output . 
0 vec1  * 1 vec2  - 1 vec1  * 0 vec2 to 2 output . 

function vecMultiply 3 output double , 3 vec double , x double 0 vec  * x to 0 output . 
1 vec  * x to 1 output . 
2 vec  * x to 2 output . 

function vecSub 3 output double , 3 vec1 double , 3 vec2 double 0 vec1  - 0 vec2 to 0 output . 
1 vec1  - 1 vec2 to 1 output . 
2 vec1  - 2 vec2 to 2 output . 

function vecAdd 3 output double , 3 vec1 double , 3 vec2 double 0 vec1  + 0 vec2 to 0 output . 
1 vec1  + 1 vec2 to 1 output . 
2 vec1  + 2 vec2 to 2 output . 

T . sizeof 配列 class : content T . 
size int . 
function 配列 0 to size . 
2 to allocated . 
メモリ確保 ( jsexport ( content )  * allocated ) to content . 

function 取得 index int result T Return index content . 

function 追加 new T size  is allocated then allocated  * 2 to allocated . 
temp T content . 
メモリ確保 ( jsexport ( content )  * allocated ) to content . 
( i int 0 . ) from ( i  is allocated ) to ( i  + 1 to i . ) i temp to i content . 


new to size content . 
size  + 1 to size . 

function 長さ a int size to a . 

function ポップ size  - 1 to size . 

public : allocated int . 

sizeof 文字列 class : function repeat = ( offset char , l int ) => ( ) offset to content . 
l to length . 

function 代入 offset char , l int offset to content . 
l to length . 

function 文字列 offset char , l int offset to content . 
l to length . 

length int . 
content char . 

function 文字列表示 a 文字列 _文字列表示 content a , length a . 

function 表示 x double 実数表示 x . 

function 表示 n int 実数表示 n . 

function 表示 a 文字列 文字列表示 a . 

function glGetUniformLocation i short , a 文字列 loc short _glGetUniformLocation ( i , content a , length a ) to loc . 

sizeof ベクトル3D class : function : repeat  + ( a ベクトル3D ) => ( b ベクトル3D ) x a  + x to x b . 
y a  + y to y b . 
z a  + z to z b . 

function 正規化 l double root ( ( x  * x )  + ( y  * y )  + ( z  * z ) ) . 
x  / l to x . 
y  / l to y . 
z  / l to z . 

function 長さ l double root ( x  * x  + y  * y  + z  * z ) to l . 

function ベクトル3D a double , b double , c double a to x . 
b to y . 
c to z . 

z double . 
y double . 
x double . 

function ベクトル3Dの和 a ベクトル3D , b ベクトル3D result ベクトル3D x a  + x b to x result . 
y a  + y b to y result . 
z a  + z b to z result . 

function ベクトル3Dの差 a ベクトル3D , b ベクトル3D result ベクトル3D x a  - x b to x result . 
y a  - y b to y result . 
z a  - z b to z result . 

function ベクトル3Dの内積 a ベクトル3D , b ベクトル3D x double ( x a  * x b )  + ( y a  * y b )  + ( z a  * z b ) to x . 

function ベクトル3Dの外積 a ベクトル3D , b ベクトル3D result ベクトル3D ( y a  * z b )  - ( z a  * y b ) to x result . 
( z a  * x b )  - ( x a  * z b ) to y result . 
( x a  * y b )  - ( y a  * x b ) to z result . 

function ベクトル3D拡大 a ベクトル3D , x double result ベクトル3D x a  * x to x result . 
y a  * x to y result . 
z a  * x to z result . 

function ベクトル3D縮小 a ベクトル3D , x double result ベクトル3D x  is 0.0 then 表示 10000000 . 

x a  / x to x result . 
y a  / x to y result . 
z a  / x to z result . 

sizeof 行列4x4 class : function 拡大縮小 x double , y double , z double 0 matrix  * x to 0 matrix . 
1 matrix  * x to 1 matrix . 
2 matrix  * x to 2 matrix . 
3 matrix  * x to 3 matrix . 
4 matrix  * y to 4 matrix . 
5 matrix  * y to 5 matrix . 
6 matrix  * y to 6 matrix . 
7 matrix  * y to 7 matrix . 
8 matrix  * z to 8 matrix . 
9 matrix  * z to 9 matrix . 
10 matrix  * z to 10 matrix . 
11 matrix  * z to 11 matrix . 

function 回転 axis ベクトル3D , theta double 正規化 axis . 
s double sin ( theta ) . 
c double cos ( theta ) . 
t double 1.0  - c . 
a00 double 0 matrix . 
a01 double 1 matrix . 
a02 double 2 matrix . 
a03 double 3 matrix . 
a10 double 4 matrix . 
a11 double 5 matrix . 
a12 double 6 matrix . 
a13 double 7 matrix . 
a20 double 8 matrix . 
a21 double 9 matrix . 
a22 double 10 matrix . 
a23 double 11 matrix . 
b00 double x axis  * x axis  * t  + c . 
b01 double y axis  * x axis  * t  + z axis  * s . 
b02 double z axis  * x axis  * t  - y axis  * s . 
b10 double x axis  * y axis  * t  - z axis  * s . 
b11 double y axis  * y axis  * t  + c . 
b12 double z axis  * y axis  * t  + x axis  * s . 
b20 double x axis  * z axis  * t  + y axis  * s . 
b21 double y axis  * z axis  * t  - x axis  * s . 
b22 double z axis  * z axis  * t  + c . 
a00  * b00  + a10  * b01  + a20  * b02 to 0 matrix . 
a01  * b00  + a11  * b01  + a21  * b02 to 1 matrix . 
a02  * b00  + a12  * b01  + a22  * b02 to 2 matrix . 
a03  * b00  + a13  * b01  + a23  * b02 to 3 matrix . 
a00  * b10  + a10  * b11  + a20  * b12 to 4 matrix . 
a01  * b10  + a11  * b11  + a21  * b12 to 5 matrix . 
a02  * b10  + a12  * b11  + a22  * b12 to 6 matrix . 
a03  * b10  + a13  * b11  + a23  * b12 to 7 matrix . 
a00  * b20  + a10  * b21  + a20  * b22 to 8 matrix . 
a01  * b20  + a11  * b21  + a21  * b22 to 9 matrix . 
a02  * b20  + a12  * b21  + a22  * b22 to 10 matrix . 
a03  * b20  + a13  * b21  + a23  * b22 to 11 matrix . 

function 移動 offset ベクトル3D mat12 double 12 matrix . 
mat13 double 13 matrix . 
mat14 double 14 matrix . 
mat15 double 15 matrix . 
0 matrix  * x offset  + 4 matrix  * y offset  + 8 matrix  * z offset  + mat12 to 12 matrix . 
1 matrix  * x offset  + 5 matrix  * y offset  + 9 matrix  * z offset  + mat13 to 13 matrix . 
2 matrix  * x offset  + 6 matrix  * y offset  + 10 matrix  * z offset  + mat13 to 14 matrix . 
3 matrix  * x offset  + 7 matrix  * y offset  + 11 matrix  * z offset  + mat15 to 15 matrix . 

function 単位化 [ 1.0 , 0.0 , 0.0 , 0.0 , 0.0 , 1.0 , 0.0 , 0.0 , 0.0 , 0.0 , 1.0 , 0.0 , 0.0 , 0.0 , 0.0 , 1.0 ] to matrix . 

function 行列4x4 [ 1.0 , 0.0 , 0.0 , 0.0 , 0.0 , 1.0 , 0.0 , 0.0 , 0.0 , 0.0 , 1.0 , 0.0 , 0.0 , 0.0 , 0.0 , 1.0 ] to matrix . 

16 matrix double . 

function カメラ行列 m 行列4x4 , pos ベクトル3D , lookAt ベクトル3D , up ベクトル3D res 行列4x4 newForward ベクトル3D x lookAt  - x pos , y lookAt  - y pos , z lookAt  - z pos . 
a ベクトル3D 0.0 , 0.0 , 0.0 . 
ベクトル3D拡大 ( newForward , ベクトル3Dの内積 ( up , newForward ) ) to a . 
newUp ベクトル3D x up  - x a , y up  - y a , z up  - z a . 
正規化 newUp . 
newRight ベクトル3D 0 , 0 , 0 . 
ベクトル3Dの外積 ( newUp , newForward ) to newRight . 
[ x newRight , x newUp , x newForward , 0.0 , y newRight , y newUp , y newForward , 0.0 , z newRight , z newUp , z newForward , 0.0 , 0  - ベクトル3Dの内積 ( newRight , pos ) , 0  - ベクトル3Dの内積 ( newUp , pos ) , 0  - ベクトル3Dの内積 ( newForward , pos ) , 1.0 ] to matrix m . 
Return m . 

function 視点行列3D m 行列4x4 , fov double , width double , height double , zN double , zF double result 行列4x4 PI double 3.14159265358979312 . 
fov double 1.0  / tan ( ( 90.0  / 360.0 )  * PI ) . 
aspectRatio double width  / height . 
zNear double zN . 
zFar double zF . 
zQ double zF  / ( zF  - zN ) . 
[ aspectRatio  * fov , 0.0 , 0.0 , 0.0 , 0.0 , fov , 0.0 , 0.0 , 0.0 , 0.0 , zQ , 1.0 , 0.0 , 0.0 , ( 0  - zFar  * zNear )  / ( zFar  - zNear ) , 0.0 ] to matrix m . 
Return m . 

function 視点行列2D m 行列4x4 , left double , right double , bottom double , top double , near double , far double result 行列4x4 [ 2.0  / ( right  - left ) , 0.0 , 0.0 , 0.0 , 0.0 , 2.0  / ( top  - bottom ) , 0.0 , 0.0 , 0.0 , 0.0 , 0  - 2.0  / ( near  - far ) , 0.0 , 0  - ( right  + left )  / ( right  - left ) , 0  - ( top  + bottom )  / ( top  - bottom ) , 0  - ( far  + near )  / ( far  - near ) , 1.0 ] to matrix m . 
Return m . 

function 行列4x4の積 a 行列4x4 , b 行列4x4 out 行列4x4 0 matrix b  * 0 matrix a  + 1 matrix b  * 4 matrix a  + 2 matrix b  * 8 matrix a  + 3 matrix b  * 12 matrix a to 0 matrix out . 
0 matrix b  * 1 matrix a  + 1 matrix b  * 5 matrix a  + 2 matrix b  * 9 matrix a  + 3 matrix b  * 13 matrix a to 1 matrix out . 
0 matrix b  * 2 matrix a  + 1 matrix b  * 6 matrix a  + 2 matrix b  * 10 matrix a  + 3 matrix b  * 14 matrix a to 2 matrix out . 
0 matrix b  * 3 matrix a  + 1 matrix b  * 7 matrix a  + 2 matrix b  * 11 matrix a  + 3 matrix b  * 15 matrix a to 3 matrix out . 
4 matrix b  * 0 matrix a  + 5 matrix b  * 4 matrix a  + 6 matrix b  * 8 matrix a  + 7 matrix b  * 12 matrix a to 4 matrix out . 
4 matrix b  * 1 matrix a  + 5 matrix b  * 5 matrix a  + 6 matrix b  * 9 matrix a  + 7 matrix b  * 13 matrix a to 5 matrix out . 
4 matrix b  * 2 matrix a  + 5 matrix b  * 6 matrix a  + 6 matrix b  * 10 matrix a  + 7 matrix b  * 14 matrix a to 6 matrix out . 
4 matrix b  * 3 matrix a  + 5 matrix b  * 7 matrix a  + 6 matrix b  * 11 matrix a  + 7 matrix b  * 15 matrix a to 7 matrix out . 
8 matrix b  * 0 matrix a  + 9 matrix b  * 4 matrix a  + 10 matrix b  * 8 matrix a  + 11 matrix b  * 12 matrix a to 8 matrix out . 
8 matrix b  * 1 matrix a  + 9 matrix b  * 5 matrix a  + 10 matrix b  * 9 matrix a  + 11 matrix b  * 13 matrix a to 9 matrix out . 
8 matrix b  * 2 matrix a  + 9 matrix b  * 6 matrix a  + 10 matrix b  * 10 matrix a  + 11 matrix b  * 14 matrix a to 10 matrix out . 
8 matrix b  * 3 matrix a  + 9 matrix b  * 7 matrix a  + 10 matrix b  * 11 matrix a  + 11 matrix b  * 15 matrix a to 11 matrix out . 
12 matrix b  * 0 matrix a  + 13 matrix b  * 4 matrix a  + 14 matrix b  * 8 matrix a  + 15 matrix b  * 12 matrix a to 12 matrix out . 
12 matrix b  * 1 matrix a  + 13 matrix b  * 5 matrix a  + 14 matrix b  * 9 matrix a  + 15 matrix b  * 13 matrix a to 13 matrix out . 
12 matrix b  * 2 matrix a  + 13 matrix b  * 6 matrix a  + 14 matrix b  * 10 matrix a  + 15 matrix b  * 14 matrix a to 14 matrix out . 
12 matrix b  * 3 matrix a  + 13 matrix b  * 7 matrix a  + 14 matrix b  * 11 matrix a  + 15 matrix b  * 15 matrix a to 15 matrix out . 

sizeof モデル class : color ベクトル3D . 
pos ベクトル3D . 
function モデル data double , num int , c ベクトル3D , p ベクトル3D , s int data to vertices . 
num to vertexNum . 
c to color . 
p to pos . 
s to shaderID . 
単位化 modelMat . 
単位化 transMat . 
単位化 scaleMat . 
単位化 rotateMat . 
8 _lightPosUniform char "lightPos". 
8 _viewPosUniform char "viewPos". 
10 _lightColorUniform char "lightColor". 
11 _objectColorUniform char "objectColor". 
8 _projUniform char "uProjMat". 
8 _viewUniform char "uViewMat". 
9 _modelUniform char "uModelMat". 
lightPosUniform 文字列 & _lightPosUniform , 8 . 
viewPosUniform 文字列 & _viewPosUniform , 7 . 
lightColorUniform 文字列 & _lightColorUniform , 10 . 
objectColorUniform 文字列 & _objectColorUniform , 11 . 
projUniform 文字列 & _projUniform , 8 . 
viewUniform 文字列 & _viewUniform , 8 . 
modelUniform 文字列 & _modelUniform , 9 . 
shaderID  is 0 then glGetUniformLocation ( 0 , viewPosUniform ) to viewPosUniLoc . 
glGetUniformLocation ( 0 , lightPosUniform ) to lightPosUniLoc . 
glGetUniformLocation ( 0 , lightColorUniform ) to lightColorUniLoc . 
glGetUniformLocation ( 0 , objectColorUniform ) to objectColorUniLoc . 

glGetUniformLocation ( shaderID , projUniform ) to projMatUniformLoc . 
glGetUniformLocation ( shaderID , viewUniform ) to viewMatUniformLoc . 
glGetUniformLocation ( shaderID , modelUniform ) to modelMatUniformLoc . 
glCreateBuffer ( ) to buffer . 
glBindBuffer 34962 , buffer . 
glBufferData 34962 , vertices , num  * 6 , 35044 . 

function 座標設定 coord ベクトル3D coord to pos . 

function 移動 offset ベクトル3D ベクトル3Dの和 ( pos , offset ) to pos . 

function 拡大縮小 x double , y double , z double temp 行列4x4 . 
単位化 temp . 
拡大縮小 temp x , y , z . 
行列4x4の積 ( temp , scaleMat ) to scaleMat . 

function 回転 axis ベクトル3D , t double temp 行列4x4 . 
単位化 temp . 
回転 temp axis , t . 
行列4x4の積 ( temp , rotateMat ) to rotateMat . 

function 描画 projMat 行列4x4 , viewMat 行列4x4 , camera ベクトル3D PI double 3.14159265358979312 . 
移動 transMat pos . 
単位化 modelMat . 
行列4x4の積 ( scaleMat , modelMat ) to modelMat . 
行列4x4の積 ( rotateMat , modelMat ) to modelMat . 
行列4x4の積 ( transMat , modelMat ) to modelMat . 
glBindBuffer 34962 , buffer . 
glEnableVertexAttribArray 0 . 
glVertexAttribPointer 0 , 3 , 5126 , 0 , 6  * 4 , 0 . 
glEnableVertexAttribArray 1 . 
glVertexAttribPointer 1 , 3 , 5126 , 0 , 6  * 4 , 3  * 4 . 
glUseProgram shaderID . 
shaderID  is 0 then glUniform3f lightPosUniLoc , 5.0 , 5.0 , 5.0 . 
glUniform3f lightColorUniLoc , 1.0 , 1.0 , 1.0 . 
glUniform3f objectColorUniLoc , x color , y color , z color . 
glUniform3f viewPosUniLoc , x camera , y camera , z camera . 

glUniformMatrix4fv projMatUniformLoc , 0 , matrix projMat . 
glUniformMatrix4fv viewMatUniformLoc , 0 , matrix viewMat . 
glUniformMatrix4fv modelMatUniformLoc , 0 , matrix modelMat . 
glDrawArrays 4 , 0 , 36 . 
単位化 rotateMat . 
単位化 transMat . 
単位化 scaleMat . 

public : modelMatUniformLoc short . 
viewMatUniformLoc short . 
projMatUniformLoc short . 
objectColorUniLoc short . 
lightColorUniLoc short . 
lightPosUniLoc short . 
viewPosUniLoc short . 
shaderID int . 
rotateMat 行列4x4 . 
scaleMat 行列4x4 . 
transMat 行列4x4 . 
modelMat 行列4x4 . 
buffer short . 
vertexNum int . 
vertices double . 

sizeof カメラ class : 座標 ベクトル3D . 
感度 double . 
function カメラ p ベクトル3D p to 座標 . 
ベクトル3D view 0.0 , 0.0 , 1.0 . 
ベクトル3D lookDir 0.0 , 0.0 , 1.0 . 
ベクトル3D up 0.0 , 1.0 , 0.0 . 
90.0 to yaw . 
0.0 to pitch . 
0.100000000000000006 to 感度 . 

function 感度設定 s double s to 感度 . 

function アップデート xOffset double , yOffset double , elapsedTime double result 行列4x4 キーチェック ( 32 )  is 1 then y 座標  + elapsedTime  * 5.0 to y 座標 . 

キーチェック ( 16 )  is 1 then y 座標  - elapsedTime  * 5.0 to y 座標 . 

キーチェック ( 65 )  is 1 then z 座標  - elapsedTime  * sin ( toRad ( yaw  - 90 ) )  * 5.0 to z 座標 . 
x 座標  - elapsedTime  * cos ( toRad ( yaw  - 90 ) )  * 5.0 to x 座標 . 

キーチェック ( 68 )  is 1 then z 座標  + elapsedTime  * sin ( toRad ( yaw  - 90 ) )  * 5.0 to z 座標 . 
x 座標  + elapsedTime  * cos ( toRad ( yaw  - 90 ) )  * 5.0 to x 座標 . 

キーチェック ( 87 )  is 1 then z 座標  + elapsedTime  * sin ( toRad ( yaw ) )  * 5.0 to z 座標 . 
x 座標  + elapsedTime  * cos ( toRad ( yaw ) )  * 5.0 to x 座標 . 

キーチェック ( 83 )  is 1 then z 座標  - elapsedTime  * sin ( toRad ( yaw ) )  * 5.0 to z 座標 . 
x 座標  - elapsedTime  * cos ( toRad ( yaw ) )  * 5.0 to x 座標 . 

yaw  - xOffset  * 感度 to yaw . 
pitch  - yOffset  * 感度 to pitch . 
pitch  < 0  - 89.0 then 0  - 89.0 to pitch . 

pitch  > 89.0 then 89.0 to pitch . 

cos ( toRad ( yaw ) )  * cos ( toRad ( pitch ) ) to x lookDir . 
sin ( toRad ( pitch ) ) to y lookDir . 
sin ( toRad ( yaw ) )  * cos ( toRad ( pitch ) ) to z lookDir . 
正規化 lookDir . 
単位化 result . 
ベクトル3Dの和 ( lookDir , 座標 ) to view . 
カメラ行列 ( result , 座標 , view , up ) to result . 

public : pitch double . 
yaw double . 
up ベクトル3D . 
lookDir ベクトル3D . 
view ベクトル3D . 

sizeof シーン class : スプライト 配列 < モデル > . 
目 カメラ . 
function シーン 時間計測 ( )  / 1000.0 to last . 
0.0 to now . 
0.0 to elapsedTime . 
マウス絶対座標X ( ) to lastX . 
マウス絶対座標Y ( ) to lastY . 
単位化 projMat . 
単位化 viewMat . 
視点行列3D ( projMat , 90.0 , 720.0 , 1280.0 , 0.100000000000000006 , 100.0 ) to projMat . 
temp ベクトル3D 0.0 , 0.0 , 0  - 4.0 . 
カメラ 目 temp . 
配列 スプライト . 

function 描画 時間計測 ( )  / 1000.0 to now . 
now  - last to elapsedTime . 
now to last . 
glClearColor 0.0 , 0.0 , 0.0 , 1.0 . 
glClearDepth 1.0 . 
glEnable 2929 . 
glDepthFunc 515 . 
glClear 16640 . 
xOffset double マウス絶対座標X ( )  - lastX . 
yOffset double マウス絶対座標Y ( )  - lastY . 
マウス絶対座標X ( ) to lastX . 
マウス絶対座標Y ( ) to lastY . 
単位化 viewMat . 
アップデート 目 ( xOffset , yOffset , elapsedTime ) to viewMat . 
( i int 0 . ) from ( i  is size スプライト ) to ( i  + 1 to i . ) 取得 スプライト ( i ) -> 描画 projMat , viewMat , 座標 目 . 


function キューブ追加 size double , color ベクトル3D , pos ベクトル3D id int 6 3 12 vertices double [ [ [ 0  - size  / 2 , 0  - size  / 2 , 0  - size  / 2 , 0.0 , 0.0 , 0  - 1.0 ] , [ 0  - size  / 2 , size  / 2 , 0  - size  / 2 , 0.0 , 0.0 , 0  - 1.0 ] , [ size  / 2 , size  / 2 , 0  - size  / 2 , 0.0 , 0.0 , 0  - 1.0 ] ] , [ [ 0  - size  / 2 , 0  - size  / 2 , 0  - size  / 2 , 0.0 , 0.0 , 0  - 1.0 ] , [ size  / 2 , size  / 2 , 0  - size  / 2 , 0.0 , 0.0 , 0  - 1.0 ] , [ size  / 2 , 0  - size  / 2 , 0  - size  / 2 , 0.0 , 0.0 , 0  - 1.0 ] ] , [ [ size  / 2 , 0  - size  / 2 , 0  - size  / 2 , 1.0 , 0.0 , 0.0 ] , [ size  / 2 , size  / 2 , 0  - size  / 2 , 1.0 , 0.0 , 0.0 ] , [ size  / 2 , size  / 2 , size  / 2 , 1.0 , 0.0 , 0.0 ] ] , [ [ size  / 2 , 0  - size  / 2 , 0  - size  / 2 , 1.0 , 0.0 , 0.0 ] , [ size  / 2 , size  / 2 , size  / 2 , 1.0 , 0.0 , 0.0 ] , [ size  / 2 , 0  - size  / 2 , size  / 2 , 1.0 , 0.0 , 0.0 ] ] , [ [ size  / 2 , 0  - size  / 2 , size  / 2 , 0.0 , 0.0 , 1.0 ] , [ size  / 2 , size  / 2 , size  / 2 , 0.0 , 0.0 , 1.0 ] , [ 0  - size  / 2 , size  / 2 , size  / 2 , 0.0 , 0.0 , 1.0 ] ] , [ [ size  / 2 , 0  - size  / 2 , size  / 2 , 0.0 , 0.0 , 1.0 ] , [ 0  - size  / 2 , size  / 2 , size  / 2 , 0.0 , 0.0 , 1.0 ] , [ 0  - size  / 2 , 0  - size  / 2 , size  / 2 , 0.0 , 0.0 , 1.0 ] ] , [ [ 0  - size  / 2 , 0  - size  / 2 , size  / 2 , 0  - 1.0 , 0.0 , 0.0 ] , [ 0  - size  / 2 , size  / 2 , size  / 2 , 0  - 1.0 , 0.0 , 0.0 ] , [ 0  - size  / 2 , size  / 2 , 0  - size  / 2 , 0  - 1.0 , 0.0 , 0.0 ] ] , [ [ 0  - size  / 2 , 0  - size  / 2 , size  / 2 , 0  - 1.0 , 0.0 , 0.0 ] , [ 0  - size  / 2 , size  / 2 , 0  - size  / 2 , 0  - 1.0 , 0.0 , 0.0 ] , [ 0  - size  / 2 , 0  - size  / 2 , 0  - size  / 2 , 0  - 1.0 , 0.0 , 0.0 ] ] , [ [ 0  - size  / 2 , size  / 2 , 0  - size  / 2 , 0.0 , 1.0 , 0.0 ] , [ 0  - size  / 2 , size  / 2 , size  / 2 , 0.0 , 1.0 , 0.0 ] , [ size  / 2 , size  / 2 , size  / 2 , 0.0 , 1.0 , 0.0 ] ] , [ [ 0  - size  / 2 , size  / 2 , 0  - size  / 2 , 0.0 , 1.0 , 0.0 ] , [ size  / 2 , size  / 2 , size  / 2 , 0.0 , 1.0 , 0.0 ] , [ size  / 2 , size  / 2 , 0  - size  / 2 , 0.0 , 1.0 , 0.0 ] ] , [ [ size  / 2 , 0  - size  / 2 , size  / 2 , 0.0 , 0  - 1.0 , 0.0 ] , [ 0  - size  / 2 , 0  - size  / 2 , size  / 2 , 0.0 , 0  - 1.0 , 0.0 ] , [ 0  - size  / 2 , 0  - size  / 2 , 0  - size  / 2 , 0.0 , 0  - 1.0 , 0.0 ] ] , [ [ size  / 2 , 0  - size  / 2 , size  / 2 , 0.0 , 0  - 1.0 , 0.0 ] , [ 0  - size  / 2 , 0  - size  / 2 , 0  - size  / 2 , 0.0 , 0  - 1.0 , 0.0 ] , [ size  / 2 , 0  - size  / 2 , 0  - size  / 2 , 0.0 , 0  - 1.0 , 0.0 ] ] ] . 
cube モデル メモリ確保 ( jsexport ( cube ) ) . 
cube -> モデル & vertices , 36 , color , pos , 0 . 
追加 スプライト cube . 
長さ スプライト ( )  - 1 to id . 

function ライト追加 size double , color ベクトル3D , pos ベクトル3D id int 6 3 12 vertices double [ [ [ 0  - size  / 2 , 0  - size  / 2 , 0  - size  / 2 , 0.0 , 0.0 , 0  - 1.0 ] , [ 0  - size  / 2 , size  / 2 , 0  - size  / 2 , 0.0 , 0.0 , 0  - 1.0 ] , [ size  / 2 , size  / 2 , 0  - size  / 2 , 0.0 , 0.0 , 0  - 1.0 ] ] , [ [ 0  - size  / 2 , 0  - size  / 2 , 0  - size  / 2 , 0.0 , 0.0 , 0  - 1.0 ] , [ size  / 2 , size  / 2 , 0  - size  / 2 , 0.0 , 0.0 , 0  - 1.0 ] , [ size  / 2 , 0  - size  / 2 , 0  - size  / 2 , 0.0 , 0.0 , 0  - 1.0 ] ] , [ [ size  / 2 , 0  - size  / 2 , 0  - size  / 2 , 1.0 , 0.0 , 0.0 ] , [ size  / 2 , size  / 2 , 0  - size  / 2 , 1.0 , 0.0 , 0.0 ] , [ size  / 2 , size  / 2 , size  / 2 , 1.0 , 0.0 , 0.0 ] ] , [ [ size  / 2 , 0  - size  / 2 , 0  - size  / 2 , 1.0 , 0.0 , 0.0 ] , [ size  / 2 , size  / 2 , size  / 2 , 1.0 , 0.0 , 0.0 ] , [ size  / 2 , 0  - size  / 2 , size  / 2 , 1.0 , 0.0 , 0.0 ] ] , [ [ size  / 2 , 0  - size  / 2 , size  / 2 , 0.0 , 0.0 , 1.0 ] , [ size  / 2 , size  / 2 , size  / 2 , 0.0 , 0.0 , 1.0 ] , [ 0  - size  / 2 , size  / 2 , size  / 2 , 0.0 , 0.0 , 1.0 ] ] , [ [ size  / 2 , 0  - size  / 2 , size  / 2 , 0.0 , 0.0 , 1.0 ] , [ 0  - size  / 2 , size  / 2 , size  / 2 , 0.0 , 0.0 , 1.0 ] , [ 0  - size  / 2 , 0  - size  / 2 , size  / 2 , 0.0 , 0.0 , 1.0 ] ] , [ [ 0  - size  / 2 , 0  - size  / 2 , size  / 2 , 0  - 1.0 , 0.0 , 0.0 ] , [ 0  - size  / 2 , size  / 2 , size  / 2 , 0  - 1.0 , 0.0 , 0.0 ] , [ 0  - size  / 2 , size  / 2 , 0  - size  / 2 , 0  - 1.0 , 0.0 , 0.0 ] ] , [ [ 0  - size  / 2 , 0  - size  / 2 , size  / 2 , 0  - 1.0 , 0.0 , 0.0 ] , [ 0  - size  / 2 , size  / 2 , 0  - size  / 2 , 0  - 1.0 , 0.0 , 0.0 ] , [ 0  - size  / 2 , 0  - size  / 2 , 0  - size  / 2 , 0  - 1.0 , 0.0 , 0.0 ] ] , [ [ 0  - size  / 2 , size  / 2 , 0  - size  / 2 , 0.0 , 1.0 , 0.0 ] , [ 0  - size  / 2 , size  / 2 , size  / 2 , 0.0 , 1.0 , 0.0 ] , [ size  / 2 , size  / 2 , size  / 2 , 0.0 , 1.0 , 0.0 ] ] , [ [ 0  - size  / 2 , size  / 2 , 0  - size  / 2 , 0.0 , 1.0 , 0.0 ] , [ size  / 2 , size  / 2 , size  / 2 , 0.0 , 1.0 , 0.0 ] , [ size  / 2 , size  / 2 , 0  - size  / 2 , 0.0 , 1.0 , 0.0 ] ] , [ [ size  / 2 , 0  - size  / 2 , size  / 2 , 0.0 , 0  - 1.0 , 0.0 ] , [ 0  - size  / 2 , 0  - size  / 2 , size  / 2 , 0.0 , 0  - 1.0 , 0.0 ] , [ 0  - size  / 2 , 0  - size  / 2 , 0  - size  / 2 , 0.0 , 0  - 1.0 , 0.0 ] ] , [ [ size  / 2 , 0  - size  / 2 , size  / 2 , 0.0 , 0  - 1.0 , 0.0 ] , [ 0  - size  / 2 , 0  - size  / 2 , 0  - size  / 2 , 0.0 , 0  - 1.0 , 0.0 ] , [ size  / 2 , 0  - size  / 2 , 0  - size  / 2 , 0.0 , 0  - 1.0 , 0.0 ] ] ] . 
light モデル メモリ確保 ( jsexport ( light ) ) . 
light -> モデル & vertices , 36 , color , pos , 1 . 
追加 スプライト light . 
長さ スプライト ( )  - 1 to id . 

public : lastY double . 
lastX double . 
elapsedTime double . 
now double . 
last double . 
viewMat 行列4x4 . 
projMat 行列4x4 . 

sizeof ベクトル2D class : function 正規化 l double root ( x  * x  + y  * y ) . 
x  / l to x . 
y  / l to y . 

function 長さ l double root ( x  * x  + y  * y ) to l . 

function ベクトル2D a double , b double a to x . 
b to y . 

y double . 
x double . 

function ベクトル2Dの和 a ベクトル2D , b ベクトル2D result ベクトル2D x a  + x b to x result . 
y a  + y b to y result . 

function ベクトル2Dの差 a ベクトル2D , b ベクトル2D result ベクトル2D x a  - x b to x result . 
y a  - y b to y result . 

function ベクトル2Dの内積 a ベクトル2D , b ベクトル2D x double x a  * x b  + y a  * y b to x . 

function ベクトル2D拡大 a ベクトル2D , x double result ベクトル2D x a  * x to x result . 
y a  * x to y result . 

function ベクトル2D縮小 a ベクトル2D , x double result ベクトル2D x  is 0.0 then 表示 10000000 . 

x a  / x to x result . 
y a  / x to y result . 

sizeof アニメーション情報 class : function アニメーション情報 a int , start double , d double , x double , y double a to id . 
start to startTime . 
d to duration . 
x to x info . 
y to y info . 

info ベクトル2D . 
duration double . 
startTime double . 
id int . 

sizeof スプライト class : color ベクトル3D . 
pos ベクトル2D . 
透明度 double . 
scaleX double . 
scaleY double . 
theta double . 
function スプライト data double , pnum int , indicesData short , vnum int , c ベクトル3D , p ベクトル2D , s int , zI double data to vertices . 
pnum to pointNum . 
indicesData to indices . 
vnum to vertexNum . 
zI to zIndex . 
1.0 to 透明度 . 
c to color . 
p to pos . 
1.0 to scaleX . 
1.0 to scaleY . 
0.0 to theta . 
s to shaderID . 
配列 animations . 
単位化 modelMat . 
単位化 transMat . 
単位化 scaleMat . 
単位化 rotateMat . 
11 _objectColorUniform char "objectColor". 
10 _projUniform char "projection". 
5 _modelUniform char "model". 
8 _samplerUniform char "uSampler". 
12 _transparencyUniform char "transparency". 
objectColorUniform 文字列 & _objectColorUniform , 11 . 
projUniform 文字列 & _projUniform , 10 . 
modelUniform 文字列 & _modelUniform , 5 . 
samplerUniform 文字列 & _samplerUniform , 8 . 
transparencyUniform 文字列 & _transparencyUniform , 12 . 
glGetUniformLocation ( shaderID , projUniform ) to projMatUniformLoc . 
glGetUniformLocation ( shaderID , modelUniform ) to modelMatUniformLoc . 
shaderID  is 4 then glGetUniformLocation ( shaderID , transparencyUniform ) to transparencyUniLoc . 
glGetUniformLocation ( shaderID , objectColorUniform ) to objectColorUniLoc . 

shaderID  is 3 then glGetUniformLocation ( shaderID , samplerUniform ) to samplerUniformLoc . 

glCreateBuffer ( ) to buffer . 
glBindBuffer 34962 , buffer . 
glBufferData 34962 , vertices , pnum  * 3 , 35044 . 
vnum  > 0 then glCreateBuffer ( ) to elementBuffer . 
glBindBuffer 34963 , elementBuffer . 
glElementBufferData 34963 , indices , vnum , 35044 . 


function テクスチャ設定 tex double , url 文字列 0 to shaderID . 
tex to texCoords . 
_loadTexture ( content url , length url ) to texture . 
_文字列表示 content url , length url . 
glCreateBuffer ( ) to texCoordBuffer . 
glBindBuffer 34962 , texCoordBuffer . 
glBufferData 34962 , tex , vertexNum  * 2 , 35044 . 

function リピートテクスチャ設定 tex double , テクスチャ short 0 to shaderID . 
tex to texCoords . 
テクスチャ to texture . 
glCreateBuffer ( ) to texCoordBuffer . 
glBindBuffer 34962 , texCoordBuffer . 
glBufferData 34962 , tex , vertexNum  * 2 , 35044 . 

function 座標設定 coord ベクトル2D coord to pos . 

function 移動 offset ベクトル2D ベクトル2Dの和 ( pos , offset ) to pos . 

function 拡大縮小 x double , y double scaleX  * x to scaleX . 
scaleY  * y to scaleY . 

function 回転 t double theta  + t to theta . 

function 角度設定 t double t to theta . 

function zIndex設定 x double x to zIndex . 

function 透明度設定 x double x to 透明度 . 

function 色設定 色 ベクトル3D 色 to color . 

function 描画 projMat 行列4x4 PI double 3.14159265358979312 . 
( カウンタ int 0 . ) from ( カウンタ  is size animations ) to ( カウンタ  + 1 to カウンタ . ) info アニメーション情報 取得 animations ( カウンタ ) . 
( startTime info  <= 時間計測 ( ) )  && ( ( startTime info  + duration info )  >= 時間計測 ( ) ) then id info  is 0 then elapsedTime double 時間計測 ( )  - startTime info . 
回転 x info info  * elapsedTime . 

id info  is 1 then 拡大縮小 x info info , y info info . 

id info  is 2 then elapsedTime double 時間計測 ( )  - startTime info . 
offset ベクトル2D x info info  * elapsedTime , y info info  * elapsedTime . 
移動 offset . 



pos3d ベクトル3D x pos , y pos , 0  - zIndex  * 0.00100000000000000002 . 
単位化 transMat . 
移動 transMat pos3d . 
単位化 scaleMat . 
拡大縮小 scaleMat scaleX , scaleY , 1.0 . 
回転軸 ベクトル3D 0.0 , 0.0 , 1.0 . 
単位化 rotateMat . 
回転 rotateMat 回転軸 , theta . 
単位化 modelMat . 
行列4x4の積 ( scaleMat , modelMat ) to modelMat . 
行列4x4の積 ( rotateMat , modelMat ) to modelMat . 
行列4x4の積 ( transMat , modelMat ) to modelMat . 
glUseProgram shaderID . 
glBindBuffer 34962 , buffer . 
glEnableVertexAttribArray 0 . 
glVertexAttribPointer 0 , 3 , 5126 , 0 , 0 , 0 . 
shaderID  is 4 then glUniform1f transparencyUniLoc , 透明度 . 
glUniform3f objectColorUniLoc , x color , y color , z color . 

shaderID  is 3 then glBindBuffer 34962 , texCoordBuffer . 
glEnableVertexAttribArray 1 . 
glVertexAttribPointer 1 , 2 , 5126 , 0 , 0 , 0 . 
glActiveTexture texture  + 33984 . 
glBindTexture 3553 , texture . 
glUniform1i samplerUniformLoc , texture . 

glUniformMatrix4fv projMatUniformLoc , 0 , matrix projMat . 
glUniformMatrix4fv modelMatUniformLoc , 0 , matrix modelMat . 
vertexNum  > 0 then glBindBuffer 34963 , elementBuffer . 
glDrawElements 4 , vertexNum , 5123 , 0 . 

( vertexNum  is 0 )  && ( shaderID  is 4 ) then glBindBuffer 34962 , buffer . 
glDrawArrays 5 , 0 , pointNum . 

単位化 rotateMat . 
単位化 transMat . 
単位化 scaleMat . 

function 回転アニメーション theta double , start double , duration double temp アニメーション情報 0 , start , duration , theta , 0.0 . 
追加 animations temp . 

function 拡大縮小アニメーション x double , y double , start double , duration double temp アニメーション情報 1 , start , duration , x , y . 
追加 animations temp . 

function 移動アニメーション offset ベクトル2D , start double , duration double temp アニメーション情報 0 , start , duration , x offset , y offset . 
追加 animations temp . 

public : animations 配列 < アニメーション情報 > . 
samplerUniformLoc short . 
modelMatUniformLoc short . 
projMatUniformLoc short . 
transparencyUniLoc short . 
objectColorUniLoc short . 
shaderID int . 
zIndex double . 
rotateMat 行列4x4 . 
scaleMat 行列4x4 . 
transMat 行列4x4 . 
modelMat 行列4x4 . 
texture short . 
elementBuffer short . 
texCoordBuffer short . 
buffer short . 
pointNum int . 
vertexNum int . 
texCoords double . 
indices short . 
vertices double . 

sizeof シーン2D class : スプライト配列 配列 < スプライト > . 
背景色 ベクトル3D . 
背景透明度 double . 
function シーン2D 高さ double , color ベクトル3D 時間計測 ( )  / 1000.0 to last . 
0.0 to now . 
0.0 to elapsedTime . 
単位化 projMat . 
視点行列2D ( projMat , 0  - 高さ  / 2.0  * 16.0  / 9.0 , 高さ  / 2.0  * 16.0  / 9.0 , 0  - 高さ  / 2 , 高さ  / 2 , 0  - 5.0 , 5.0 ) to projMat . 
配列 スプライト配列 . 
color to 背景色 . 
1.0 to 背景透明度 . 

function 背景透明度設定 a double a to 背景透明度 . 

function 描画 時間計測 ( )  / 1000.0 to now . 
now  - last to elapsedTime . 
now to last . 
glClearColor x 背景色 , y 背景色 , z 背景色 , 背景透明度 . 
glClearDepth 1.0 . 
glEnable 2929 . 
glDepthFunc 515 . 
glEnable 3042 . 
glBlendFunc 770 , 771 . 
glClear 16640 . 
( i int 0 . ) from ( i  is size スプライト配列 ) to ( i  + 1 to i . ) 取得 スプライト配列 ( i ) -> 描画 projMat . 


function 正方形追加 size double , pos ベクトル2D , color ベクトル3D , zIndex double id int 3 4 vertices double [ [ size  / 2 , size  / 2 , 0  - zIndex  * 0.00100000000000000002 ] , [ size  / 2 , 0  - size  / 2 , 0  - zIndex  * 0.00100000000000000002 ] , [ 0  - size  / 2 , 0  - size  / 2 , 0  - zIndex  * 0.00100000000000000002 ] , [ 0  - size  / 2 , size  / 2 , 0  - zIndex  * 0.00100000000000000002 ] ] . 
2 4 texCoords double [ [ 1.0 , 0.0 ] , [ 1.0 , 1.0 ] , [ 0.0 , 1.0 ] , [ 0.0 , 0.0 ] ] . 
6 indices short [ 0 , 1 , 3 , 1 , 2 , 3 ] . 
sprite スプライト メモリ確保 ( jsexport ( sprite ) ) . 
sprite -> スプライト & vertices , 4 , & indices , 6 , color , pos , 4 , zIndex . 
追加 スプライト配列 sprite . 
長さ スプライト配列 ( )  - 1 to id . 

function スプライト追加 width double , height double , pos ベクトル2D , url 文字列 , zIndex double id int 3 4 vertices double [ [ width  / 2 , height  / 2 , 0  - zIndex  * 0.00100000000000000002 ] , [ width  / 2 , 0  - height  / 2 , 0  - zIndex  * 0.00100000000000000002 ] , [ 0  - width  / 2 , 0  - height  / 2 , 0  - zIndex  * 0.00100000000000000002 ] , [ 0  - width  / 2 , height  / 2 , 0  - zIndex  * 0.00100000000000000002 ] ] . 
2 4 texCoords double [ [ 1.0 , 0.0 ] , [ 1.0 , 1.0 ] , [ 0.0 , 1.0 ] , [ 0.0 , 0.0 ] ] . 
6 indices short [ 0 , 1 , 3 , 1 , 2 , 3 ] . 
color ベクトル3D 0.0 , 0.0 , 0.0 . 
sprite スプライト メモリ確保 ( jsexport ( sprite ) ) . 
sprite -> スプライト & vertices , 4 , & indices , 6 , color , pos , 3 , zIndex . 
sprite -> テクスチャ設定 & texCoords , url . 
追加 スプライト配列 sprite . 
長さ スプライト配列 ( )  - 1 to id . 

function リピートスプライト追加 width double , height double , pos ベクトル2D , texture short , zIndex double id int 3 4 vertices double [ [ width  / 2 , height  / 2 , 0  - zIndex  * 0.00100000000000000002 ] , [ width  / 2 , 0  - height  / 2 , 0  - zIndex  * 0.00100000000000000002 ] , [ 0  - width  / 2 , 0  - height  / 2 , 0  - zIndex  * 0.00100000000000000002 ] , [ 0  - width  / 2 , height  / 2 , 0  - zIndex  * 0.00100000000000000002 ] ] . 
2 4 texCoords double [ [ 1.0 , 0.0 ] , [ 1.0 , 1.0 ] , [ 0.0 , 1.0 ] , [ 0.0 , 0.0 ] ] . 
6 indices short [ 0 , 1 , 3 , 1 , 2 , 3 ] . 
color ベクトル3D 0.0 , 0.0 , 0.0 . 
sprite スプライト メモリ確保 ( jsexport ( sprite ) ) . 
sprite -> スプライト & vertices , 4 , & indices , 6 , color , pos , 3 , zIndex . 
sprite -> リピートテクスチャ設定 & texCoords , texture . 
追加 スプライト配列 sprite . 
長さ スプライト配列 ( )  - 1 to id . 

function 四角形追加 width double , height double , pos ベクトル2D , color ベクトル3D , zIndex double id int 3 4 vertices double [ [ width  / 2 , height  / 2 , 0  - zIndex  * 0.00100000000000000002 ] , [ 0  - width  / 2 , height  / 2 , 0  - zIndex  * 0.00100000000000000002 ] , [ width  / 2 , 0  - height  / 2 , 0  - zIndex  * 0.00100000000000000002 ] , [ 0  - width  / 2 , 0  - height  / 2 , 0  - zIndex  * 0.00100000000000000002 ] ] . 
sprite スプライト メモリ確保 ( jsexport ( sprite ) ) . 
sprite -> スプライト & vertices , 4 , メモリ確保 ( 0 ) , 0 , color , pos , 4 , zIndex . 
追加 スプライト配列 sprite . 
長さ スプライト配列 ( )  - 1 to id . 

function 多角形追加 points type , size int , pos ベクトル2D , color ベクトル3D , zIndex double id int sprite スプライト メモリ確保 ( jsexport ( sprite ) ) . 
sprite -> スプライト points , size , メモリ確保 ( 0 ) , 0 , color , pos , 4 , zIndex . 
追加 スプライト配列 sprite . 
長さ スプライト配列 ( )  - 1 to id . 

function 円追加 r double , pos ベクトル2D , color ベクトル3D , zIndex double id int PI double 3.14159265358979312 . 
points 配列 < ベクトル3D > . 
頂点数 int 60 . 
( i int 0 . ) from ( i  is 頂点数 ) to ( i  + 1 to i . ) theta double 0 . 
( i  % 2 )  is 0 then 0.5  * PI  + ( ( PI  * i )  / 頂点数 ) to theta . 

( i  % 2 )  is 1 then 0.5  * PI  - ( ( PI  * ( 1.0  + i ) )  / 頂点数 ) to theta . 

temp ベクトル3D r  * cos ( theta ) , r  * sin ( theta ) , 0  - zIndex  * 0.00100000000000000002 . 
追加 points temp . 

多角形追加 ( content points , size points , pos , color , zIndex ) to id . 

public : elapsedTime double . 
now double . 
last double . 
projMat 行列4x4 . 

function 引数なしjsリスナー呼び出し callback function : ( ) => ( ) callback . 

function 引数なしjsリスナー呼び出し to "jsCallListenerNoParam". 
function Arduino5V送る ピン番号 int Arduinoコマンド送信 'H', ピン番号 . 

function Arduino0V送る ピン番号 int Arduinoコマンド送信 'L', ピン番号 . 

function Arduinoピン入出力設定 ピン番号 int , 入出力 char 入出力  is '入'then Arduinoコマンド送信 'I', ピン番号 . 

入出力  is '出'then Arduinoコマンド送信 'O', ピン番号 . 


function Arduinoアナログ入力ピン設定 ピン番号 int Arduinoコマンド送信 'A', ピン番号 . 

function main 表示 "ようこそ". 

