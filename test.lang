#include "std.laze"

クラス:波
{
	実数:周期;
	実数:波長;
	整数:向き;
	実数:開始時間;
	関数:波(実数:TT, 実数:λ, 整数:direction, 実数:start) => (){
		周期 = TT;
		波長 = λ;
		向き = direction;
		開始時間 = start;
	}
}

クラス:線
{
	配列<*波>:波の配列;
	整数:媒質IDスタート;
	実数:長さ;
	整数:媒質数;
	実数:間の距離;
	関数:線(整数:N, 実数:l, *シーン:ワールド) => (){
		波の配列.配列();
		長さ = l;
		媒質数 = N;
		間の距離 = l/N;
		媒質IDスタート = ワールド -> スプライト.長さ();
		ベクトル3D:初期座標(0.0, 0.0, 0.0);
		ベクトル3D:青(0.2, 0.5, 1.0);
		(媒質数)回繰り返す{
			整数:temp = ワールド -> キューブ追加(0.15, 初期座標, 青);
		}
	}
	関数:アップデート(*シーン:ワールド)=>(){
		(媒質数)回繰り返す{
			実数:x = 間の距離 * カウンタ;
			ベクトル3D:座標(x, 0.0, 0.0);
			(整数:i = 0;)から(i == 波の配列.長さ())まで(i++;){
				実数:周期 = (波の配列.取得(i) -> 周期);
				実数:λ = (波の配列.取得(i) -> 波長);
				実数:start = (波の配列.取得(i) -> 開始時間);
				実数:位相 = (時間計測() - start)/周期 - x/λ;
				もし(位相 > 0.0)ならば{
					座標.y += sin(位相);
				}
			}
			ワールド -> スプライト.取得(媒質IDスタート + カウンタ) -> 座標設定(座標);
		}
		ワールド -> 描画();
	}
	関数:波追加(実数:周期, 実数:λ, 整数:向き, 実数:開始時間)=>(){
		*波:wave = メモリ確保(バイト数(wave));
		wave -> 波(周期, λ, 向き, 開始時間);
		波の配列.追加(wave);
	}
}

関数:実行 () => () {
	シーン:ワールド(); 
	線:line(300, 20.0, &ワールド); 
	line.波追加(300.0, 1.0, 1, 時間計測());
	無限ループ{                      
		line.アップデート(&ワールド);
	}
}