itemSet0:
start-> >>> declist
additionalRules-> -------------------------------
declist.declist-> >>> declist dec
declist.dec-> >>> dec
dec.class.noinherit-> >>> class : id { memlist }
dec.template.func-> >>> type < id > : function : id ( fieldlist ) => ( fieldlist ) stm
dec.var.noinit-> >>> ty : var ;
ty.real-> >>> realtype
ty.poly-> >>> id < ty >
ty.func-> >>> function : ( fieldlist ) => ( fieldlist )
ty.array-> >>> ty [ int ]
ty.pointer-> >>> * ty
ty.bool-> >>> boolean
ty.char-> >>> chartype
ty.short-> >>> shorttype
ty.name-> >>> id
ty.int-> >>> inttype
ty.void-> >>> void
dec.var.init-> >>> ty : var = exp ;
dec.jsexport-> >>> jsexport ( id , string ) ;
dec.template.class-> >>> type < id > : class : id { memlist }
dec.class.inherit-> >>> class <- id { memlist }
dec.object-> >>> ty : id ( explist ) ;
dec.func-> >>> function : id ( fieldlist ) => ( fieldlist ) stm
dec.jsload-> >>> function : id ( fieldlist ) => ( fieldlist ) = jsload ( string , string ) ;
declist.null-> >>>
additionalRules-> ------------------

itemSet1:
ty.pointer-> * >>> ty
additionalRules-> -------------------
ty.real-> >>> realtype
ty.poly-> >>> id < ty >
ty.func-> >>> function : ( fieldlist ) => ( fieldlist )
ty.array-> >>> ty [ int ]
ty.pointer-> >>> * ty
ty.bool-> >>> boolean
ty.char-> >>> chartype
ty.short-> >>> shorttype
ty.name-> >>> id
ty.int-> >>> inttype
ty.void-> >>> void

itemSet2:
ty.int-> inttype >>>
additionalRules-> -------------------

itemSet3:
ty.real-> realtype >>>
additionalRules-> -------------------

itemSet4:
dec.template.func-> type >>> < id > : function : id ( fieldlist ) => ( fieldlist ) stm
dec.template.class-> type >>> < id > : class : id { memlist }
additionalRules-> -------------------

itemSet5:
ty.void-> void >>>
additionalRules-> -------------------

itemSet6:
ty.bool-> boolean >>>
additionalRules-> -------------------

itemSet7:
ty.char-> chartype >>>
additionalRules-> -------------------

itemSet8:
ty.short-> shorttype >>>
additionalRules-> -------------------

itemSet9:
ty.func-> function >>> : ( fieldlist ) => ( fieldlist )
dec.func-> function >>> : id ( fieldlist ) => ( fieldlist ) stm
dec.jsload-> function >>> : id ( fieldlist ) => ( fieldlist ) = jsload ( string , string ) ;
additionalRules-> -------------------

itemSet10:
dec.class.noinherit-> class >>> : id { memlist }
dec.class.inherit-> class >>> <- id { memlist }
additionalRules-> -------------------

itemSet11:
dec.jsexport-> jsexport >>> ( id , string ) ;
additionalRules-> -------------------

itemSet12:
ty.poly-> id >>> < ty >
ty.name-> id >>>
additionalRules-> -------------------

itemSet13:
declist.null->  >>>
additionalRules-> -------------------

itemSet14:
declist.dec-> dec >>>
additionalRules-> -------------------

itemSet15:
dec.var.noinit-> ty >>> : var ;
ty.array-> ty >>> [ int ]
dec.var.init-> ty >>> : var = exp ;
dec.object-> ty >>> : id ( explist ) ;
additionalRules-> -------------------

itemSet16:
start-> declist >>>
declist.declist-> declist >>> dec
additionalRules-> -------------------
dec.class.noinherit-> >>> class : id { memlist }
dec.template.func-> >>> type < id > : function : id ( fieldlist ) => ( fieldlist ) stm
dec.var.noinit-> >>> ty : var ;
ty.real-> >>> realtype
ty.poly-> >>> id < ty >
ty.func-> >>> function : ( fieldlist ) => ( fieldlist )
ty.array-> >>> ty [ int ]
ty.pointer-> >>> * ty
ty.bool-> >>> boolean
ty.char-> >>> chartype
ty.short-> >>> shorttype
ty.name-> >>> id
ty.int-> >>> inttype
ty.void-> >>> void
dec.var.init-> >>> ty : var = exp ;
dec.jsexport-> >>> jsexport ( id , string ) ;
dec.template.class-> >>> type < id > : class : id { memlist }
dec.class.inherit-> >>> class <- id { memlist }
dec.object-> >>> ty : id ( explist ) ;
dec.func-> >>> function : id ( fieldlist ) => ( fieldlist ) stm
dec.jsload-> >>> function : id ( fieldlist ) => ( fieldlist ) = jsload ( string , string ) ;

itemSet17:
ty.func-> function >>> : ( fieldlist ) => ( fieldlist )
additionalRules-> -------------------

itemSet18:
ty.pointer-> * ty >>>
ty.array-> ty >>> [ int ]
additionalRules-> -------------------

itemSet19:
dec.template.func-> type < >>> id > : function : id ( fieldlist ) => ( fieldlist ) stm
dec.template.class-> type < >>> id > : class : id { memlist }
additionalRules-> -------------------

itemSet20:
ty.func-> function : >>> ( fieldlist ) => ( fieldlist )
dec.func-> function : >>> id ( fieldlist ) => ( fieldlist ) stm
dec.jsload-> function : >>> id ( fieldlist ) => ( fieldlist ) = jsload ( string , string ) ;
additionalRules-> -------------------

itemSet21:
dec.class.noinherit-> class : >>> id { memlist }
additionalRules-> -------------------

itemSet22:
dec.class.inherit-> class <- >>> id { memlist }
additionalRules-> -------------------

itemSet23:
dec.jsexport-> jsexport ( >>> id , string ) ;
additionalRules-> -------------------

itemSet24:
ty.poly-> id < >>> ty >
additionalRules-> -------------------
ty.real-> >>> realtype
ty.poly-> >>> id < ty >
ty.func-> >>> function : ( fieldlist ) => ( fieldlist )
ty.array-> >>> ty [ int ]
ty.pointer-> >>> * ty
ty.bool-> >>> boolean
ty.char-> >>> chartype
ty.short-> >>> shorttype
ty.name-> >>> id
ty.int-> >>> inttype
ty.void-> >>> void

itemSet25:
dec.var.noinit-> ty : >>> var ;
dec.var.init-> ty : >>> var = exp ;
dec.object-> ty : >>> id ( explist ) ;
additionalRules-> -------------------
var.simple-> >>> id
var.field-> >>> var . id
var.arrowfield-> >>> var -> id
var.subcript-> >>> var [ exp ]
var.deref-> >>> * var

itemSet26:
ty.array-> ty [ >>> int ]
additionalRules-> -------------------

itemSet27:
declist.declist-> declist dec >>>
additionalRules-> -------------------

itemSet28:
ty.func-> function : >>> ( fieldlist ) => ( fieldlist )
additionalRules-> -------------------

itemSet29:
dec.template.func-> type < id >>> > : function : id ( fieldlist ) => ( fieldlist ) stm
dec.template.class-> type < id >>> > : class : id { memlist }
additionalRules-> -------------------

itemSet30:
ty.func-> function : ( >>> fieldlist ) => ( fieldlist )
additionalRules-> -------------------
fieldlist.field-> >>> field
field.noinit-> >>> ty : var
ty.real-> >>> realtype
ty.poly-> >>> id < ty >
ty.func-> >>> function : ( fieldlist ) => ( fieldlist )
ty.array-> >>> ty [ int ] 
ty.pointer-> >>> * ty
ty.bool-> >>> boolean
ty.char-> >>> chartype
ty.short-> >>> shorttype
ty.name-> >>> id
ty.int-> >>> inttype
ty.void-> >>> void
fieldlist.fieldlist-> >>> fieldlist , field
fieldlist.null-> >>>

itemSet31:
dec.func-> function : id >>> ( fieldlist ) => ( fieldlist ) stm
dec.jsload-> function : id >>> ( fieldlist ) => ( fieldlist ) = jsload ( string , string ) ;
additionalRules-> -------------------

itemSet32:
dec.class.noinherit-> class : id >>> { memlist }
additionalRules-> -------------------

itemSet33:
dec.class.inherit-> class <- id >>> { memlist }
additionalRules-> -------------------

itemSet34:
dec.jsexport-> jsexport ( id >>> , string ) ;
additionalRules-> -------------------

itemSet35:
ty.poly-> id < ty >>> >
ty.array-> ty >>> [ int ]
additionalRules-> -------------------

itemSet36:
var.deref-> * >>> var
additionalRules-> -------------------
var.simple-> >>> id
var.field-> >>> var . id
var.arrowfield-> >>> var -> id
var.subcript-> >>> var [ exp ]
var.deref-> >>> * var

itemSet37:
dec.object-> ty : id >>> ( explist ) ;
var.simple-> id >>>
additionalRules-> -------------------

itemSet38:
dec.var.noinit-> ty : var >>> ;
dec.var.init-> ty : var >>> = exp ;
var.field-> var >>> . id
var.arrowfield-> var >>> -> id
var.subcript-> var >>> [ exp ]
additionalRules-> -------------------

itemSet39:
ty.array-> ty [ int >>> ]
additionalRules-> -------------------

itemSet40:
dec.template.func-> type < id > >>> : function : id ( fieldlist ) => ( fieldlist ) stm
dec.template.class-> type < id > >>> : class : id { memlist }
additionalRules-> -------------------

itemSet41:
fieldlist.null->  >>>
additionalRules-> -------------------

itemSet42:
field.noinit-> ty >>> : var
ty.array-> ty >>> [ int ]
additionalRules-> -------------------

itemSet43:
fieldlist.field-> field >>>
additionalRules-> -------------------

itemSet44:
ty.func-> function : ( fieldlist >>> ) => ( fieldlist )
fieldlist.fieldlist-> fieldlist >>> , field
additionalRules-> -------------------

itemSet45:
dec.func-> function : id ( >>> fieldlist ) => ( fieldlist ) stm
dec.jsload-> function : id ( >>> fieldlist ) => ( fieldlist ) = jsload ( string , string ) ;
additionalRules-> -------------------
fieldlist.field-> >>> field
field.noinit-> >>> ty : var
ty.real-> >>> realtype
ty.poly-> >>> id < ty >
ty.func-> >>> function : ( fieldlist ) => ( fieldlist )
ty.array-> >>> ty [ int ]
ty.pointer-> >>> * ty
ty.bool-> >>> boolean
ty.char-> >>> chartype
ty.short-> >>> shorttype
ty.name-> >>> id
ty.int-> >>> inttype
ty.void-> >>> void
fieldlist.fieldlist-> >>> fieldlist , field
fieldlist.null-> >>>

itemSet46:
dec.class.noinherit-> class : id { >>> memlist }
additionalRules-> -------------------
memlist.memlist-> >>> memlist mems
memlist.mems-> >>> mems
mems.funcAndVarList-> >>> funcAndVarList
funcAndVarList.funcAndVar-> >>> funcAndVar
funcAndVar.funcList.dec.func-> >>> funcAndVar function : id ( fieldlist ) => ( fieldlist ) stm
funcAndVar.var.dec.var.noinit-> >>> ty : var ;
ty.real-> >>> realtype
ty.poly-> >>> id < ty >
ty.func-> >>> function : ( fieldlist ) => ( fieldlist )
ty.array-> >>> ty [ int ]
ty.pointer-> >>> * ty
ty.bool-> >>> boolean
ty.char-> >>> chartype
ty.short-> >>> shorttype
ty.name-> >>> id
ty.int-> >>> inttype
ty.void-> >>> void
funcAndVar.varList.dec.var.noinit-> >>> funcAndVar ty : var ;
funcAndVar.func.dec.func-> >>> function : id ( fieldlist ) => ( fieldlist ) stm
funcAndVar.func-> >>>
funcAndVar.funcList-> >>> funcAndVar
funcAndVar.var.dec.var.init-> >>> ty : var = exp ;
funcAndVar.varList.dec.var.init-> >>> funcAndVar ty : var = exp ;
funcAndVar.varList-> >>> funcAndVar
funcAndVarList.funcAndVarList-> >>> funcAndVarList funcAndVar
mems.protected-> >>> protected : funcAndVarList
mems.private-> >>> private : funcAndVarList
mems.public-> >>> public : funcAndVarList

itemSet47:
dec.class.inherit-> class <- id { >>> memlist }
additionalRules-> -------------------
memlist.memlist-> >>> memlist mems
memlist.mems-> >>> mems
mems.funcAndVarList-> >>> funcAndVarList
funcAndVarList.funcAndVar-> >>> funcAndVar
funcAndVar.funcList.dec.func-> >>> funcAndVar function : id ( fieldlist ) => ( fieldlist ) stm
funcAndVar.var.dec.var.noinit-> >>> ty : var ;
ty.real-> >>> realtype
ty.poly-> >>> id < ty >
ty.func-> >>> function : ( fieldlist ) => ( fieldlist )
ty.array-> >>> ty [ int ]
ty.pointer-> >>> * ty
ty.bool-> >>> boolean
ty.char-> >>> chartype 
ty.short-> >>> shorttype
ty.name-> >>> id
ty.int-> >>> inttype
ty.void-> >>> void
funcAndVar.varList.dec.var.noinit-> >>> funcAndVar ty : var ;
funcAndVar.func.dec.func-> >>> function : id ( fieldlist ) => ( fieldlist ) stm
funcAndVar.func-> >>>
funcAndVar.funcList-> >>> funcAndVar
funcAndVar.var.dec.var.init-> >>> ty : var = exp ;
funcAndVar.varList.dec.var.init-> >>> funcAndVar ty : var = exp ;
funcAndVar.varList-> >>> funcAndVar
funcAndVarList.funcAndVarList-> >>> funcAndVarList funcAndVar
mems.protected-> >>> protected : funcAndVarList
mems.private-> >>> private : funcAndVarList
mems.public-> >>> public : funcAndVarList

itemSet48:
dec.jsexport-> jsexport ( id , >>> string ) ;
additionalRules-> -------------------

itemSet49:
ty.poly-> id < ty > >>>
additionalRules-> -------------------

itemSet50:
var.simple-> id >>>
additionalRules-> -------------------

itemSet51:
var.deref-> * var >>>
var.field-> var >>> . id
var.arrowfield-> var >>> -> id
var.subcript-> var >>> [ exp ]
additionalRules-> -------------------

itemSet52:
dec.object-> ty : id ( >>> explist ) ;
additionalRules-> -------------------
explist.explist-> >>> explist , exp
explist.null-> >>>
explist.exp-> >>> exp
exp.true-> >>> true
exp.string-> >>> string
exp.sizeof-> >>> sizeof ( var )
exp.real-> >>> real
exp.array-> >>> [ explist ]
exp.op-> >>> exp oper exp
exp.func-> >>> ( fieldlist ) => ( fieldlist ) stm
exp.char-> >>> char
exp.call-> >>> varExp ( explist )
varExp.var-> >>> var
var.simple-> >>> id
var.field-> >>> var . id
var.arrowfield-> >>> var -> id
var.subcript-> >>> var [ exp ] 
var.deref-> >>> * var
varExp.arrowfield-> >>> exp -> id
varExp.field-> >>> exp . id
varExp.subcript-> >>> exp [ exp ]
exp.address-> >>> & var
exp.var-> >>> varExp
exp.paren-> >>> ( exp )
exp.int-> >>> int
exp.false-> >>> false
exp.minus-> >>> - exp

itemSet53:
dec.var.noinit-> ty : var ; >>>
additionalRules-> -------------------

itemSet54:
var.subcript-> var [ >>> exp ]
additionalRules-> -------------------
exp.true-> >>> true
exp.string-> >>> string
exp.sizeof-> >>> sizeof ( var )
exp.real-> >>> real
exp.array-> >>> [ explist ]
exp.op-> >>> exp oper exp
exp.func-> >>> ( fieldlist ) => ( fieldlist ) stm
exp.char-> >>> char
exp.call-> >>> varExp ( explist )
varExp.var-> >>> var
var.simple-> >>> id
var.field-> >>> var . id
var.arrowfield-> >>> var -> id
var.subcript-> >>> var [ exp ]
var.deref-> >>> * var
varExp.arrowfield-> >>> exp -> id
varExp.field-> >>> exp . id
varExp.subcript-> >>> exp [ exp ]
exp.address-> >>> & var
exp.var-> >>> varExp
exp.paren-> >>> ( exp )
exp.int-> >>> int
exp.false-> >>> false
exp.minus-> >>> - exp

itemSet55:
var.field-> var . >>> id
additionalRules-> -------------------

itemSet56:
var.arrowfield-> var -> >>> id
additionalRules-> -------------------

itemSet57:
dec.var.init-> ty : var = >>> exp ;
additionalRules-> -------------------
exp.true-> >>> true
exp.string-> >>> string
exp.sizeof-> >>> sizeof ( var )
exp.real-> >>> real
exp.array-> >>> [ explist ]
exp.op-> >>> exp oper exp
exp.func-> >>> ( fieldlist ) => ( fieldlist ) stm
exp.char-> >>> char
exp.call-> >>> varExp ( explist )
varExp.var-> >>> var
var.simple-> >>> id
var.field-> >>> var . id
var.arrowfield-> >>> var -> id
var.subcript-> >>> var [ exp ]
var.deref-> >>> * var
varExp.arrowfield-> >>> exp -> id
varExp.field-> >>> exp . id
varExp.subcript-> >>> exp [ exp ]
exp.address-> >>> & var
exp.var-> >>> varExp
exp.paren-> >>> ( exp )
exp.int-> >>> int
exp.false-> >>> false
exp.minus-> >>> - exp

itemSet58:
ty.array-> ty [ int ] >>>
additionalRules-> -------------------

itemSet59:
dec.template.func-> type < id > : >>> function : id ( fieldlist ) => ( fieldlist ) stm
dec.template.class-> type < id > : >>> class : id { memlist }
additionalRules-> -------------------

itemSet60:
field.noinit-> ty : >>> var
additionalRules-> -------------------
var.simple-> >>> id
var.field-> >>> var . id
var.arrowfield-> >>> var -> id
var.subcript-> >>> var [ exp ]
var.deref-> >>> * var

itemSet61:
fieldlist.fieldlist-> fieldlist , >>> field
additionalRules-> -------------------
field.noinit-> >>> ty : var
ty.real-> >>> realtype
ty.poly-> >>> id < ty >
ty.func-> >>> function : ( fieldlist ) => ( fieldlist )
ty.array-> >>> ty [ int ]
ty.pointer-> >>> * ty
ty.bool-> >>> boolean
ty.char-> >>> chartype
ty.short-> >>> shorttype
ty.name-> >>> id
ty.int-> >>> inttype
ty.void-> >>> void

itemSet62:
ty.func-> function : ( fieldlist ) >>> => ( fieldlist )
additionalRules-> -------------------

itemSet63:
dec.func-> function : id ( fieldlist >>> ) => ( fieldlist ) stm
dec.jsload-> function : id ( fieldlist >>> ) => ( fieldlist ) = jsload ( string , string ) ;
fieldlist.fieldlist-> fieldlist >>> , field
additionalRules-> -------------------

itemSet64:
ty.func-> function >>> : ( fieldlist ) => ( fieldlist )
funcAndVar.func.dec.func-> function >>> : id ( fieldlist ) => ( fieldlist ) stm
additionalRules-> -------------------

itemSet65:
mems.private-> private >>> : funcAndVarList
additionalRules-> -------------------

itemSet66:
mems.public-> public >>> : funcAndVarList
additionalRules-> -------------------

itemSet67:
mems.protected-> protected >>> : funcAndVarList
additionalRules-> -------------------

itemSet68:
funcAndVar.func->  >>>
additionalRules-> -------------------

itemSet69:
funcAndVar.var.dec.var.noinit-> ty >>> : var ;
ty.array-> ty >>> [ int ]
funcAndVar.var.dec.var.init-> ty >>> : var = exp ;
additionalRules-> -------------------

itemSet70:
dec.class.noinherit-> class : id { memlist >>> }
memlist.memlist-> memlist >>> mems
additionalRules-> -------------------
mems.funcAndVarList-> >>> funcAndVarList
funcAndVarList.funcAndVar-> >>> funcAndVar
funcAndVar.funcList.dec.func-> >>> funcAndVar function : id ( fieldlist ) => ( fieldlist ) stm
funcAndVar.var.dec.var.noinit-> >>> ty : var ;
ty.real-> >>> realtype
ty.poly-> >>> id < ty >
ty.func-> >>> function : ( fieldlist ) => ( fieldlist )
ty.array-> >>> ty [ int ]
ty.pointer-> >>> * ty
ty.bool-> >>> boolean
ty.char-> >>> chartype
ty.short-> >>> shorttype
ty.name-> >>> id
ty.int-> >>> inttype
ty.void-> >>> void
funcAndVar.varList.dec.var.noinit-> >>> funcAndVar ty : var ;
funcAndVar.func.dec.func-> >>> function : id ( fieldlist ) => ( fieldlist ) stm
funcAndVar.func-> >>>
funcAndVar.funcList-> >>> funcAndVar
funcAndVar.var.dec.var.init-> >>> ty : var = exp ;
funcAndVar.varList.dec.var.init-> >>> funcAndVar ty : var = exp ;
funcAndVar.varList-> >>> funcAndVar
funcAndVarList.funcAndVarList-> >>> funcAndVarList funcAndVar
mems.protected-> >>> protected : funcAndVarList
mems.private-> >>> private : funcAndVarList
mems.public-> >>> public : funcAndVarList

itemSet71:
funcAndVarList.funcAndVar-> funcAndVar >>>
funcAndVar.funcList.dec.func-> funcAndVar >>> function : id ( fieldlist ) => ( fieldlist ) stm
funcAndVar.varList.dec.var.noinit-> funcAndVar >>> ty : var ;
funcAndVar.funcList-> funcAndVar >>>
funcAndVar.varList.dec.var.init-> funcAndVar >>> ty : var = exp ;
funcAndVar.varList-> funcAndVar >>>
additionalRules-> -------------------
ty.real-> >>> realtype
ty.poly-> >>> id < ty >
ty.func-> >>> function : ( fieldlist ) => ( fieldlist )
ty.array-> >>> ty [ int ]
ty.pointer-> >>> * ty
ty.bool-> >>> boolean
ty.char-> >>> chartype
ty.short-> >>> shorttype
ty.name-> >>> id
ty.int-> >>> inttype
ty.void-> >>> void

itemSet72:
mems.funcAndVarList-> funcAndVarList >>>
funcAndVarList.funcAndVarList-> funcAndVarList >>> funcAndVar
additionalRules-> -------------------
funcAndVar.funcList.dec.func-> >>> funcAndVar function : id ( fieldlist ) => ( fieldlist ) stm
funcAndVar.var.dec.var.noinit-> >>> ty : var ;
ty.real-> >>> realtype
ty.poly-> >>> id < ty >
ty.func-> >>> function : ( fieldlist ) => ( fieldlist )
ty.array-> >>> ty [ int ]
ty.pointer-> >>> * ty
ty.bool-> >>> boolean
ty.char-> >>> chartype
ty.short-> >>> shorttype
ty.name-> >>> id
ty.int-> >>> inttype
ty.void-> >>> void
funcAndVar.varList.dec.var.noinit-> >>> funcAndVar ty : var ;
funcAndVar.func.dec.func-> >>> function : id ( fieldlist ) => ( fieldlist ) stm
funcAndVar.func-> >>>
funcAndVar.funcList-> >>> funcAndVar
funcAndVar.var.dec.var.init-> >>> ty : var = exp ;
funcAndVar.varList.dec.var.init-> >>> funcAndVar ty : var = exp ;
funcAndVar.varList-> >>> funcAndVar

itemSet73:
memlist.mems-> mems >>>
additionalRules-> -------------------

itemSet74:
dec.class.inherit-> class <- id { memlist >>> }
memlist.memlist-> memlist >>> mems
additionalRules-> -------------------
mems.funcAndVarList-> >>> funcAndVarList
funcAndVarList.funcAndVar-> >>> funcAndVar
funcAndVar.funcList.dec.func-> >>> funcAndVar function : id ( fieldlist ) => ( fieldlist ) stm
funcAndVar.var.dec.var.noinit-> >>> ty : var ;
ty.real-> >>> realtype
ty.poly-> >>> id < ty >
ty.func-> >>> function : ( fieldlist ) => ( fieldlist )
ty.array-> >>> ty [ int ]
ty.pointer-> >>> * ty
ty.bool-> >>> boolean
ty.char-> >>> chartype
ty.short-> >>> shorttype
ty.name-> >>> id
ty.int-> >>> inttype
ty.void-> >>> void
funcAndVar.varList.dec.var.noinit-> >>> funcAndVar ty : var ;
funcAndVar.func.dec.func-> >>> function : id ( fieldlist ) => ( fieldlist ) stm
funcAndVar.func-> >>>
funcAndVar.funcList-> >>> funcAndVar
funcAndVar.var.dec.var.init-> >>> ty : var = exp ;
funcAndVar.varList.dec.var.init-> >>> funcAndVar ty : var = exp ;
funcAndVar.varList-> >>> funcAndVar
funcAndVarList.funcAndVarList-> >>> funcAndVarList funcAndVar
mems.protected-> >>> protected : funcAndVarList
mems.private-> >>> private : funcAndVarList
mems.public-> >>> public : funcAndVarList

itemSet75:
dec.jsexport-> jsexport ( id , string >>> ) ;
additionalRules-> -------------------

itemSet76:
exp.char-> char >>>
additionalRules-> -------------------

itemSet77:
exp.string-> string >>>
additionalRules-> -------------------

itemSet78:
exp.int-> int >>>
additionalRules-> -------------------

itemSet79:
exp.real-> real >>>
additionalRules-> -------------------

itemSet80:
exp.func-> ( >>> fieldlist ) => ( fieldlist ) stm
exp.paren-> ( >>> exp )
additionalRules-> -------------------
fieldlist.field-> >>> field
field.noinit-> >>> ty : var
ty.real-> >>> realtype
ty.poly-> >>> id < ty >
ty.func-> >>> function : ( fieldlist ) => ( fieldlist )
ty.array-> >>> ty [ int ]
ty.pointer-> >>> * ty
ty.bool-> >>> boolean
ty.char-> >>> chartype
ty.short-> >>> shorttype
ty.name-> >>> id
ty.int-> >>> inttype
ty.void-> >>> void
fieldlist.fieldlist-> >>> fieldlist , field
fieldlist.null-> >>>
exp.true-> >>> true
exp.string-> >>> string
exp.sizeof-> >>> sizeof ( var )
exp.real-> >>> real
exp.array-> >>> [ explist ]
exp.op-> >>> exp oper exp
exp.func-> >>> ( fieldlist ) => ( fieldlist ) stm
exp.char-> >>> char
exp.call-> >>> varExp ( explist )
varExp.var-> >>> var
var.simple-> >>> id
var.field-> >>> var . id
var.arrowfield-> >>> var -> id
var.subcript-> >>> var [ exp ]
var.deref-> >>> * var
varExp.arrowfield-> >>> exp -> id
varExp.field-> >>> exp . id
varExp.subcript-> >>> exp [ exp ]
exp.address-> >>> & var
exp.var-> >>> varExp
exp.paren-> >>> ( exp )
exp.int-> >>> int
exp.false-> >>> false
exp.minus-> >>> - exp

itemSet81:
exp.array-> [ >>> explist ]
additionalRules-> -------------------
explist.explist-> >>> explist , exp 
explist.null-> >>>
explist.exp-> >>> exp
exp.true-> >>> true
exp.string-> >>> string
exp.sizeof-> >>> sizeof ( var )
exp.real-> >>> real
exp.array-> >>> [ explist ]
exp.op-> >>> exp oper exp
exp.func-> >>> ( fieldlist ) => ( fieldlist ) stm
exp.char-> >>> char
exp.call-> >>> varExp ( explist )
varExp.var-> >>> var
var.simple-> >>> id
var.field-> >>> var . id
var.arrowfield-> >>> var -> id
var.subcript-> >>> var [ exp ]
var.deref-> >>> * var
varExp.arrowfield-> >>> exp -> id
varExp.field-> >>> exp . id
varExp.subcript-> >>> exp [ exp ]
exp.address-> >>> & var
exp.var-> >>> varExp
exp.paren-> >>> ( exp )
exp.int-> >>> int
exp.false-> >>> false
exp.minus-> >>> - exp

itemSet82:
exp.minus-> - >>> exp
additionalRules-> -------------------
exp.true-> >>> true
exp.string-> >>> string
exp.sizeof-> >>> sizeof ( var )
exp.real-> >>> real
exp.array-> >>> [ explist ]
exp.op-> >>> exp oper exp
exp.func-> >>> ( fieldlist ) => ( fieldlist ) stm
exp.char-> >>> char
exp.call-> >>> varExp ( explist )
varExp.var-> >>> var
var.simple-> >>> id
var.field-> >>> var . id
var.arrowfield-> >>> var -> id
var.subcript-> >>> var [ exp ]
var.deref-> >>> * var
varExp.arrowfield-> >>> exp -> id
varExp.field-> >>> exp . id
varExp.subcript-> >>> exp [ exp ]
exp.address-> >>> & var
exp.var-> >>> varExp
exp.paren-> >>> ( exp )
exp.int-> >>> int
exp.false-> >>> false
exp.minus-> >>> - exp

itemSet83:
exp.true-> true >>>
additionalRules-> -------------------

itemSet84:
exp.false-> false >>>
additionalRules-> -------------------

itemSet85:
exp.address-> & >>> var
additionalRules-> -------------------
var.simple-> >>> id
var.field-> >>> var . id
var.arrowfield-> >>> var -> id
var.subcript-> >>> var [ exp ]
var.deref-> >>> * var

itemSet86:
exp.sizeof-> sizeof >>> ( var )
additionalRules-> -------------------

itemSet87:
explist.null->  >>>
additionalRules-> -------------------

itemSet88:
explist.exp-> exp >>>
exp.op-> exp >>> oper exp
varExp.arrowfield-> exp >>> -> id
varExp.field-> exp >>> . id
varExp.subcript-> exp >>> [ exp ]
additionalRules-> -------------------
oper.or-> >>> ||
oper.mul-> >>> *
oper.lt-> >>> <
oper.le-> >>> <=
oper.sub-> >>> -
oper.eq-> >>> ==
oper.add-> >>> +
oper.div-> >>> /
oper.mod-> >>> %
oper.ge-> >>> >= 
oper.neq-> >>> !=
oper.and-> >>> &&
oper.gt-> >>> >

itemSet89:
varExp.var-> var >>>
var.field-> var >>> . id
var.arrowfield-> var >>> -> id
var.subcript-> var >>> [ exp ]
additionalRules-> -------------------

itemSet90:
exp.call-> varExp >>> ( explist )
exp.var-> varExp >>>
additionalRules-> -------------------

itemSet91:
dec.object-> ty : id ( explist >>> ) ;
explist.explist-> explist >>> , exp
additionalRules-> -------------------

itemSet92:
var.subcript-> var [ exp >>> ]
exp.op-> exp >>> oper exp
varExp.arrowfield-> exp >>> -> id
varExp.field-> exp >>> . id
varExp.subcript-> exp >>> [ exp ]
additionalRules-> -------------------
oper.or-> >>> ||
oper.mul-> >>> *
oper.lt-> >>> <
oper.le-> >>> <=
oper.sub-> >>> -
oper.eq-> >>> ==
oper.add-> >>> +
oper.div-> >>> /
oper.mod-> >>> %
oper.ge-> >>> >=
oper.neq-> >>> !=
oper.and-> >>> &&
oper.gt-> >>> >

itemSet93:
var.field-> var . id >>>
additionalRules-> -------------------

itemSet94:
var.arrowfield-> var -> id >>>
additionalRules-> -------------------

itemSet95:
dec.var.init-> ty : var = exp >>> ;
exp.op-> exp >>> oper exp
varExp.arrowfield-> exp >>> -> id
varExp.field-> exp >>> . id
varExp.subcript-> exp >>> [ exp ]
additionalRules-> -------------------
oper.or-> >>> ||
oper.mul-> >>> *
oper.lt-> >>> <
oper.le-> >>> <=
oper.sub-> >>> -
oper.eq-> >>> ==
oper.add-> >>> +
oper.div-> >>> /
oper.mod-> >>> %
oper.ge-> >>> >=
oper.neq-> >>> !=
oper.and-> >>> &&
oper.gt-> >>> >

itemSet96:
dec.template.func-> type < id > : function >>> : id ( fieldlist ) => ( fieldlist ) stm
additionalRules-> -------------------

itemSet97:
dec.template.class-> type < id > : class >>> : id { memlist }
additionalRules-> -------------------

itemSet98:
field.noinit-> ty : var >>>
var.field-> var >>> . id
var.arrowfield-> var >>> -> id
var.subcript-> var >>> [ exp ]
additionalRules-> ------------------- 

itemSet99:
fieldlist.fieldlist-> fieldlist , field >>>
additionalRules-> -------------------

itemSet100:
ty.func-> function : ( fieldlist ) => >>> ( fieldlist )
additionalRules-> -------------------

itemSet101:
dec.func-> function : id ( fieldlist ) >>> => ( fieldlist ) stm
dec.jsload-> function : id ( fieldlist ) >>> => ( fieldlist ) = jsload ( string , string ) ;
additionalRules-> -------------------

itemSet102:
ty.func-> function : >>> ( fieldlist ) => ( fieldlist )
funcAndVar.func.dec.func-> function : >>> id ( fieldlist ) => ( fieldlist ) stm
additionalRules-> -------------------

itemSet103:
mems.private-> private : >>> funcAndVarList
additionalRules-> -------------------
funcAndVarList.funcAndVar-> >>> funcAndVar
funcAndVar.funcList.dec.func-> >>> funcAndVar function : id ( fieldlist ) => ( fieldlist ) stm
funcAndVar.var.dec.var.noinit-> >>> ty : var ;
ty.real-> >>> realtype
ty.poly-> >>> id < ty >
ty.func-> >>> function : ( fieldlist ) => ( fieldlist )
ty.array-> >>> ty [ int ]
ty.pointer-> >>> * ty
ty.bool-> >>> boolean
ty.char-> >>> chartype
ty.short-> >>> shorttype
ty.name-> >>> id
ty.int-> >>> inttype
ty.void-> >>> void
funcAndVar.varList.dec.var.noinit-> >>> funcAndVar ty : var ;
funcAndVar.func.dec.func-> >>> function : id ( fieldlist ) => ( fieldlist ) stm
funcAndVar.func-> >>>
funcAndVar.funcList-> >>> funcAndVar
funcAndVar.var.dec.var.init-> >>> ty : var = exp ;
funcAndVar.varList.dec.var.init-> >>> funcAndVar ty : var = exp ;
funcAndVar.varList-> >>> funcAndVar
funcAndVarList.funcAndVarList-> >>> funcAndVarList funcAndVar

itemSet104:
mems.public-> public : >>> funcAndVarList
additionalRules-> -------------------
funcAndVarList.funcAndVar-> >>> funcAndVar
funcAndVar.funcList.dec.func-> >>> funcAndVar function : id ( fieldlist ) => ( fieldlist ) stm
funcAndVar.var.dec.var.noinit-> >>> ty : var ;
ty.real-> >>> realtype
ty.poly-> >>> id < ty >
ty.func-> >>> function : ( fieldlist ) => ( fieldlist )
ty.array-> >>> ty [ int ]
ty.pointer-> >>> * ty
ty.bool-> >>> boolean
ty.char-> >>> chartype
ty.short-> >>> shorttype
ty.name-> >>> id
ty.int-> >>> inttype
ty.void-> >>> void
funcAndVar.varList.dec.var.noinit-> >>> funcAndVar ty : var ;
funcAndVar.func.dec.func-> >>> function : id ( fieldlist ) => ( fieldlist ) stm
funcAndVar.func-> >>>
funcAndVar.funcList-> >>> funcAndVar
funcAndVar.var.dec.var.init-> >>> ty : var = exp ;
funcAndVar.varList.dec.var.init-> >>> funcAndVar ty : var = exp ;
funcAndVar.varList-> >>> funcAndVar
funcAndVarList.funcAndVarList-> >>> funcAndVarList funcAndVar

itemSet105:
mems.protected-> protected : >>> funcAndVarList
additionalRules-> -------------------
funcAndVarList.funcAndVar-> >>> funcAndVar
funcAndVar.funcList.dec.func-> >>> funcAndVar function : id ( fieldlist ) => ( fieldlist ) stm
funcAndVar.var.dec.var.noinit-> >>> ty : var ;
ty.real-> >>> realtype
ty.poly-> >>> id < ty >
ty.func-> >>> function : ( fieldlist ) => ( fieldlist )
ty.array-> >>> ty [ int ]
ty.pointer-> >>> * ty
ty.bool-> >>> boolean
ty.char-> >>> chartype
ty.short-> >>> shorttype
ty.name-> >>> id
ty.int-> >>> inttype
ty.void-> >>> void 
funcAndVar.varList.dec.var.noinit-> >>> funcAndVar ty : var ;
funcAndVar.func.dec.func-> >>> function : id ( fieldlist ) => ( fieldlist ) stm
funcAndVar.func-> >>>
funcAndVar.funcList-> >>> funcAndVar
funcAndVar.var.dec.var.init-> >>> ty : var = exp ;
funcAndVar.varList.dec.var.init-> >>> funcAndVar ty : var = exp ;
funcAndVar.varList-> >>> funcAndVar
funcAndVarList.funcAndVarList-> >>> funcAndVarList funcAndVar

itemSet106:
funcAndVar.var.dec.var.noinit-> ty : >>> var ;
funcAndVar.var.dec.var.init-> ty : >>> var = exp ;
additionalRules-> -------------------
var.simple-> >>> id
var.field-> >>> var . id
var.arrowfield-> >>> var -> id
var.subcript-> >>> var [ exp ]
var.deref-> >>> * var

itemSet107:
dec.class.noinherit-> class : id { memlist } >>>
additionalRules-> -------------------

itemSet108:
memlist.memlist-> memlist mems >>>
additionalRules-> -------------------

itemSet109:
funcAndVar.varList.dec.var.noinit-> funcAndVar ty >>> : var ;
funcAndVar.varList.dec.var.init-> funcAndVar ty >>> : var = exp ;
ty.array-> ty >>> [ int ]
additionalRules-> -------------------

itemSet110:
funcAndVarList.funcAndVarList-> funcAndVarList funcAndVar >>>
funcAndVar.funcList.dec.func-> funcAndVar >>> function : id ( fieldlist ) => ( fieldlist ) stm
funcAndVar.varList.dec.var.noinit-> funcAndVar >>> ty : var ;
funcAndVar.funcList-> funcAndVar >>>
funcAndVar.varList.dec.var.init-> funcAndVar >>> ty : var = exp ;
funcAndVar.varList-> funcAndVar >>>
additionalRules-> -------------------
ty.real-> >>> realtype
ty.poly-> >>> id < ty >
ty.func-> >>> function : ( fieldlist ) => ( fieldlist )
ty.array-> >>> ty [ int ]
ty.pointer-> >>> * ty
ty.bool-> >>> boolean
ty.char-> >>> chartype
ty.short-> >>> shorttype
ty.name-> >>> id
ty.int-> >>> inttype
ty.void-> >>> void

itemSet111:
dec.class.inherit-> class <- id { memlist } >>>
additionalRules-> -------------------

itemSet112:
dec.jsexport-> jsexport ( id , string ) >>> ;
additionalRules-> -------------------

itemSet113:
exp.paren-> ( exp >>> )
exp.op-> exp >>> oper exp
varExp.arrowfield-> exp >>> -> id
varExp.field-> exp >>> . id
varExp.subcript-> exp >>> [ exp ]
additionalRules-> -------------------
oper.or-> >>> ||
oper.mul-> >>> *
oper.lt-> >>> <
oper.le-> >>> <=
oper.sub-> >>> -
oper.eq-> >>> ==
oper.add-> >>> +
oper.div-> >>> /
oper.mod-> >>> %
oper.ge-> >>> >=
oper.neq-> >>> !=
oper.and-> >>> &&
oper.gt-> >>> >

itemSet114:
exp.func-> ( fieldlist >>> ) => ( fieldlist ) stm
fieldlist.fieldlist-> fieldlist >>> , field
additionalRules-> -------------------

itemSet115:
exp.array-> [ explist >>> ]
explist.explist-> explist >>> , exp
additionalRules-> -------------------

itemSet116:
exp.minus-> - exp >>> 
exp.op-> exp >>> oper exp
varExp.arrowfield-> exp >>> -> id
varExp.field-> exp >>> . id
varExp.subcript-> exp >>> [ exp ]
additionalRules-> -------------------
oper.or-> >>> ||
oper.mul-> >>> *
oper.lt-> >>> <
oper.le-> >>> <=
oper.sub-> >>> -
oper.eq-> >>> ==
oper.add-> >>> +
oper.div-> >>> /
oper.mod-> >>> %
oper.ge-> >>> >=
oper.neq-> >>> !=
oper.and-> >>> &&
oper.gt-> >>> >

itemSet117:
exp.address-> & var >>>
var.field-> var >>> . id
var.arrowfield-> var >>> -> id
var.subcript-> var >>> [ exp ]
additionalRules-> -------------------

itemSet118:
exp.sizeof-> sizeof ( >>> var )
additionalRules-> -------------------
var.simple-> >>> id
var.field-> >>> var . id
var.arrowfield-> >>> var -> id
var.subcript-> >>> var [ exp ]
var.deref-> >>> * var

itemSet119:
varExp.subcript-> exp [ >>> exp ]
additionalRules-> -------------------
exp.true-> >>> true
exp.string-> >>> string
exp.sizeof-> >>> sizeof ( var )
exp.real-> >>> real
exp.array-> >>> [ explist ]
exp.op-> >>> exp oper exp
exp.func-> >>> ( fieldlist ) => ( fieldlist ) stm
exp.char-> >>> char
exp.call-> >>> varExp ( explist )
varExp.var-> >>> var
var.simple-> >>> id
var.field-> >>> var . id
var.arrowfield-> >>> var -> id
var.subcript-> >>> var [ exp ]
var.deref-> >>> * var
varExp.arrowfield-> >>> exp -> id
varExp.field-> >>> exp . id
varExp.subcript-> >>> exp [ exp ]
exp.address-> >>> & var
exp.var-> >>> varExp
exp.paren-> >>> ( exp )
exp.int-> >>> int
exp.false-> >>> false
exp.minus-> >>> - exp

itemSet120:
varExp.field-> exp . >>> id
additionalRules-> -------------------

itemSet121:
varExp.arrowfield-> exp -> >>> id
additionalRules-> -------------------

itemSet122:
oper.add-> + >>>
additionalRules-> -------------------

itemSet123:
oper.sub-> - >>>
additionalRules-> -------------------

itemSet124:
oper.mul-> * >>>
additionalRules-> -------------------

itemSet125:
oper.div-> / >>>
additionalRules-> -------------------

itemSet126:
oper.eq-> == >>>
additionalRules-> -------------------

itemSet127:
oper.neq-> != >>>
additionalRules-> -------------------

itemSet128:
oper.le-> <= >>>
additionalRules-> -------------------

itemSet129:
oper.lt-> < >>>
additionalRules-> -------------------

itemSet130:
oper.ge-> >= >>>
additionalRules-> -------------------

itemSet131:
oper.gt-> > >>>
additionalRules-> -------------------

itemSet132:
oper.and-> && >>>
additionalRules-> -------------------

itemSet133:
oper.or-> || >>>
additionalRules-> -------------------

itemSet134:
oper.mod-> % >>>
additionalRules-> -------------------

itemSet135:
exp.op-> exp oper >>> exp
additionalRules-> -------------------
exp.true-> >>> true
exp.string-> >>> string
exp.sizeof-> >>> sizeof ( var )
exp.real-> >>> real
exp.array-> >>> [ explist ]
exp.op-> >>> exp oper exp
exp.func-> >>> ( fieldlist ) => ( fieldlist ) stm
exp.char-> >>> char
exp.call-> >>> varExp ( explist )
varExp.var-> >>> var
var.simple-> >>> id
var.field-> >>> var . id
var.arrowfield-> >>> var -> id
var.subcript-> >>> var [ exp ]
var.deref-> >>> * var
varExp.arrowfield-> >>> exp -> id
varExp.field-> >>> exp . id
varExp.subcript-> >>> exp [ exp ]
exp.address-> >>> & var
exp.var-> >>> varExp
exp.paren-> >>> ( exp )
exp.int-> >>> int
exp.false-> >>> false
exp.minus-> >>> - exp

itemSet136:
exp.call-> varExp ( >>> explist )
additionalRules-> -------------------
explist.explist-> >>> explist , exp
explist.null-> >>>
explist.exp-> >>> exp
exp.true-> >>> true
exp.string-> >>> string
exp.sizeof-> >>> sizeof ( var )
exp.real-> >>> real
exp.array-> >>> [ explist ]
exp.op-> >>> exp oper exp
exp.func-> >>> ( fieldlist ) => ( fieldlist ) stm
exp.char-> >>> char
exp.call-> >>> varExp ( explist )
varExp.var-> >>> var
var.simple-> >>> id
var.field-> >>> var . id
var.arrowfield-> >>> var -> id
var.subcript-> >>> var [ exp ]
var.deref-> >>> * var
varExp.arrowfield-> >>> exp -> id
varExp.field-> >>> exp . id
varExp.subcript-> >>> exp [ exp ]
exp.address-> >>> & var
exp.var-> >>> varExp
exp.paren-> >>> ( exp )
exp.int-> >>> int
exp.false-> >>> false
exp.minus-> >>> - exp

itemSet137:
explist.explist-> explist , >>> exp
additionalRules-> -------------------
exp.true-> >>> true
exp.string-> >>> string
exp.sizeof-> >>> sizeof ( var )
exp.real-> >>> real
exp.array-> >>> [ explist ]
exp.op-> >>> exp oper exp
exp.func-> >>> ( fieldlist ) => ( fieldlist ) stm
exp.char-> >>> char
exp.call-> >>> varExp ( explist )
varExp.var-> >>> var
var.simple-> >>> id
var.field-> >>> var . id
var.arrowfield-> >>> var -> id
var.subcript-> >>> var [ exp ]
var.deref-> >>> * var
varExp.arrowfield-> >>> exp -> id
varExp.field-> >>> exp . id
varExp.subcript-> >>> exp [ exp ]
exp.address-> >>> & var
exp.var-> >>> varExp
exp.paren-> >>> ( exp )
exp.int-> >>> int
exp.false-> >>> false
exp.minus-> >>> - exp

itemSet138:
dec.object-> ty : id ( explist ) >>> ;
additionalRules-> -------------------

itemSet139:
var.subcript-> var [ exp ] >>>
additionalRules-> -------------------

itemSet140:
dec.var.init-> ty : var = exp ; >>>
additionalRules-> -------------------

itemSet141:
dec.template.func-> type < id > : function : >>> id ( fieldlist ) => ( fieldlist ) stm
additionalRules-> -------------------

itemSet142:
dec.template.class-> type < id > : class : >>> id { memlist }
additionalRules-> -------------------

itemSet143:
ty.func-> function : ( fieldlist ) => ( >>> fieldlist )
additionalRules-> -------------------
fieldlist.field-> >>> field
field.noinit-> >>> ty : var
ty.real-> >>> realtype
ty.poly-> >>> id < ty > 
ty.func-> >>> function : ( fieldlist ) => ( fieldlist )
ty.array-> >>> ty [ int ]
ty.pointer-> >>> * ty
ty.bool-> >>> boolean
ty.char-> >>> chartype
ty.short-> >>> shorttype
ty.name-> >>> id
ty.int-> >>> inttype
ty.void-> >>> void
fieldlist.fieldlist-> >>> fieldlist , field
fieldlist.null-> >>>

itemSet144:
dec.func-> function : id ( fieldlist ) => >>> ( fieldlist ) stm
dec.jsload-> function : id ( fieldlist ) => >>> ( fieldlist ) = jsload ( string , string ) ;
additionalRules-> -------------------

itemSet145:
funcAndVar.func.dec.func-> function : id >>> ( fieldlist ) => ( fieldlist ) stm
additionalRules-> -------------------

itemSet146:
mems.private-> private : funcAndVarList >>>
funcAndVarList.funcAndVarList-> funcAndVarList >>> funcAndVar
additionalRules-> -------------------
funcAndVar.funcList.dec.func-> >>> funcAndVar function : id ( fieldlist ) => ( fieldlist ) stm
funcAndVar.var.dec.var.noinit-> >>> ty : var ;
ty.real-> >>> realtype
ty.poly-> >>> id < ty >
ty.func-> >>> function : ( fieldlist ) => ( fieldlist )
ty.array-> >>> ty [ int ]
ty.pointer-> >>> * ty
ty.bool-> >>> boolean
ty.char-> >>> chartype
ty.short-> >>> shorttype
ty.name-> >>> id
ty.int-> >>> inttype
ty.void-> >>> void
funcAndVar.varList.dec.var.noinit-> >>> funcAndVar ty : var ;
funcAndVar.func.dec.func-> >>> function : id ( fieldlist ) => ( fieldlist ) stm
funcAndVar.func-> >>>
funcAndVar.funcList-> >>> funcAndVar
funcAndVar.var.dec.var.init-> >>> ty : var = exp ;
funcAndVar.varList.dec.var.init-> >>> funcAndVar ty : var = exp ;
funcAndVar.varList-> >>> funcAndVar

itemSet147:
mems.public-> public : funcAndVarList >>>
funcAndVarList.funcAndVarList-> funcAndVarList >>> funcAndVar
additionalRules-> -------------------
funcAndVar.funcList.dec.func-> >>> funcAndVar function : id ( fieldlist ) => ( fieldlist ) stm
funcAndVar.var.dec.var.noinit-> >>> ty : var ;
ty.real-> >>> realtype
ty.poly-> >>> id < ty >
ty.func-> >>> function : ( fieldlist ) => ( fieldlist )
ty.array-> >>> ty [ int ]
ty.pointer-> >>> * ty
ty.bool-> >>> boolean
ty.char-> >>> chartype
ty.short-> >>> shorttype
ty.name-> >>> id
ty.int-> >>> inttype
ty.void-> >>> void
funcAndVar.varList.dec.var.noinit-> >>> funcAndVar ty : var ;
funcAndVar.func.dec.func-> >>> function : id ( fieldlist ) => ( fieldlist ) stm
funcAndVar.func-> >>>
funcAndVar.funcList-> >>> funcAndVar
funcAndVar.var.dec.var.init-> >>> ty : var = exp ;
funcAndVar.varList.dec.var.init-> >>> funcAndVar ty : var = exp ;
funcAndVar.varList-> >>> funcAndVar

itemSet148:
mems.protected-> protected : funcAndVarList >>>
funcAndVarList.funcAndVarList-> funcAndVarList >>> funcAndVar
additionalRules-> -------------------
funcAndVar.funcList.dec.func-> >>> funcAndVar function : id ( fieldlist ) => ( fieldlist ) stm
funcAndVar.var.dec.var.noinit-> >>> ty : var ;
ty.real-> >>> realtype
ty.poly-> >>> id < ty >
ty.func-> >>> function : ( fieldlist ) => ( fieldlist )
ty.array-> >>> ty [ int ]
ty.pointer-> >>> * ty
ty.bool-> >>> boolean
ty.char-> >>> chartype
ty.short-> >>> shorttype
ty.name-> >>> id
ty.int-> >>> inttype
ty.void-> >>> void
funcAndVar.varList.dec.var.noinit-> >>> funcAndVar ty : var ;
funcAndVar.func.dec.func-> >>> function : id ( fieldlist ) => ( fieldlist ) stm
funcAndVar.func-> >>>
funcAndVar.funcList-> >>> funcAndVar
funcAndVar.var.dec.var.init-> >>> ty : var = exp ;
funcAndVar.varList.dec.var.init-> >>> funcAndVar ty : var = exp ; 
funcAndVar.varList-> >>> funcAndVar

itemSet149:
funcAndVar.var.dec.var.noinit-> ty : var >>> ;
funcAndVar.var.dec.var.init-> ty : var >>> = exp ;
var.field-> var >>> . id
var.arrowfield-> var >>> -> id
var.subcript-> var >>> [ exp ]
additionalRules-> -------------------

itemSet150:
funcAndVar.varList.dec.var.noinit-> funcAndVar ty : >>> var ;
funcAndVar.varList.dec.var.init-> funcAndVar ty : >>> var = exp ;
additionalRules-> -------------------
var.simple-> >>> id
var.field-> >>> var . id
var.arrowfield-> >>> var -> id
var.subcript-> >>> var [ exp ]
var.deref-> >>> * var

itemSet151:
dec.jsexport-> jsexport ( id , string ) ; >>>
additionalRules-> -------------------

itemSet152:
exp.paren-> ( exp ) >>>
additionalRules-> -------------------

itemSet153:
exp.func-> ( fieldlist ) >>> => ( fieldlist ) stm
additionalRules-> -------------------

itemSet154:
exp.array-> [ explist ] >>>
additionalRules-> -------------------

itemSet155:
exp.sizeof-> sizeof ( var >>> )
var.field-> var >>> . id
var.arrowfield-> var >>> -> id
var.subcript-> var >>> [ exp ]
additionalRules-> -------------------

itemSet156:
varExp.subcript-> exp [ exp >>> ]
exp.op-> exp >>> oper exp
varExp.arrowfield-> exp >>> -> id
varExp.field-> exp >>> . id
varExp.subcript-> exp >>> [ exp ]
additionalRules-> -------------------
oper.or-> >>> ||
oper.mul-> >>> *
oper.lt-> >>> <
oper.le-> >>> <=
oper.sub-> >>> -
oper.eq-> >>> ==
oper.add-> >>> +
oper.div-> >>> /
oper.mod-> >>> %
oper.ge-> >>> >=
oper.neq-> >>> !=
oper.and-> >>> &&
oper.gt-> >>> >

itemSet157:
varExp.field-> exp . id >>>
additionalRules-> -------------------

itemSet158:
varExp.arrowfield-> exp -> id >>>
additionalRules-> -------------------

itemSet159:
exp.op-> exp oper exp >>>
exp.op-> exp >>> oper exp
varExp.arrowfield-> exp >>> -> id
varExp.field-> exp >>> . id
varExp.subcript-> exp >>> [ exp ]
additionalRules-> -------------------
oper.or-> >>> ||
oper.mul-> >>> *
oper.lt-> >>> <
oper.le-> >>> <=
oper.sub-> >>> -
oper.eq-> >>> ==
oper.add-> >>> +
oper.div-> >>> /
oper.mod-> >>> %
oper.ge-> >>> >=
oper.neq-> >>> !=
oper.and-> >>> &&
oper.gt-> >>> >

itemSet160:
exp.call-> varExp ( explist >>> )
explist.explist-> explist >>> , exp
additionalRules-> -------------------

itemSet161:
explist.explist-> explist , exp >>>
exp.op-> exp >>> oper exp
varExp.arrowfield-> exp >>> -> id 
varExp.field-> exp >>> . id
varExp.subcript-> exp >>> [ exp ]
additionalRules-> -------------------
oper.or-> >>> ||
oper.mul-> >>> *
oper.lt-> >>> <
oper.le-> >>> <=
oper.sub-> >>> -
oper.eq-> >>> ==
oper.add-> >>> +
oper.div-> >>> /
oper.mod-> >>> %
oper.ge-> >>> >=
oper.neq-> >>> !=
oper.and-> >>> &&
oper.gt-> >>> >

itemSet162:
dec.object-> ty : id ( explist ) ; >>>
additionalRules-> -------------------

itemSet163:
dec.template.func-> type < id > : function : id >>> ( fieldlist ) => ( fieldlist ) stm
additionalRules-> -------------------

itemSet164:
dec.template.class-> type < id > : class : id >>> { memlist }
additionalRules-> -------------------

itemSet165:
ty.func-> function : ( fieldlist ) => ( fieldlist >>> )
fieldlist.fieldlist-> fieldlist >>> , field
additionalRules-> -------------------

itemSet166:
dec.func-> function : id ( fieldlist ) => ( >>> fieldlist ) stm
dec.jsload-> function : id ( fieldlist ) => ( >>> fieldlist ) = jsload ( string , string ) ;
additionalRules-> -------------------
fieldlist.field-> >>> field
field.noinit-> >>> ty : var
ty.real-> >>> realtype
ty.poly-> >>> id < ty >
ty.func-> >>> function : ( fieldlist ) => ( fieldlist )
ty.array-> >>> ty [ int ]
ty.pointer-> >>> * ty
ty.bool-> >>> boolean
ty.char-> >>> chartype
ty.short-> >>> shorttype
ty.name-> >>> id
ty.int-> >>> inttype
ty.void-> >>> void
fieldlist.fieldlist-> >>> fieldlist , field
fieldlist.null-> >>>

itemSet167:
funcAndVar.func.dec.func-> function : id ( >>> fieldlist ) => ( fieldlist ) stm
additionalRules-> -------------------
fieldlist.field-> >>> field
field.noinit-> >>> ty : var
ty.real-> >>> realtype
ty.poly-> >>> id < ty >
ty.func-> >>> function : ( fieldlist ) => ( fieldlist )
ty.array-> >>> ty [ int ]
ty.pointer-> >>> * ty
ty.bool-> >>> boolean
ty.char-> >>> chartype
ty.short-> >>> shorttype
ty.name-> >>> id
ty.int-> >>> inttype
ty.void-> >>> void
fieldlist.fieldlist-> >>> fieldlist , field
fieldlist.null-> >>>

itemSet168:
funcAndVar.var.dec.var.noinit-> ty : var ; >>>
additionalRules-> -------------------

itemSet169:
funcAndVar.var.dec.var.init-> ty : var = >>> exp ;
additionalRules-> -------------------
exp.true-> >>> true
exp.string-> >>> string
exp.sizeof-> >>> sizeof ( var )
exp.real-> >>> real
exp.array-> >>> [ explist ] 
exp.op-> >>> exp oper exp
exp.func-> >>> ( fieldlist ) => ( fieldlist ) stm
exp.char-> >>> char
exp.call-> >>> varExp ( explist )
varExp.var-> >>> var
var.simple-> >>> id
var.field-> >>> var . id
var.arrowfield-> >>> var -> id
var.subcript-> >>> var [ exp ]
var.deref-> >>> * var
varExp.arrowfield-> >>> exp -> id
varExp.field-> >>> exp . id
varExp.subcript-> >>> exp [ exp ]
exp.address-> >>> & var
exp.var-> >>> varExp
exp.paren-> >>> ( exp )
exp.int-> >>> int
exp.false-> >>> false
exp.minus-> >>> - exp

itemSet170:
funcAndVar.varList.dec.var.noinit-> funcAndVar ty : var >>> ;
funcAndVar.varList.dec.var.init-> funcAndVar ty : var >>> = exp ;
var.field-> var >>> . id
var.arrowfield-> var >>> -> id
var.subcript-> var >>> [ exp ]
additionalRules-> -------------------

itemSet171:
exp.func-> ( fieldlist ) => >>> ( fieldlist ) stm
additionalRules-> -------------------

itemSet172:
exp.sizeof-> sizeof ( var ) >>>
additionalRules-> -------------------

itemSet173:
varExp.subcript-> exp [ exp ] >>>
additionalRules-> -------------------

itemSet174:
exp.call-> varExp ( explist ) >>>
additionalRules-> -------------------

itemSet175:
dec.template.func-> type < id > : function : id ( >>> fieldlist ) => ( fieldlist ) stm
additionalRules-> -------------------
fieldlist.field-> >>> field
field.noinit-> >>> ty : var
ty.real-> >>> realtype
ty.poly-> >>> id < ty >
ty.func-> >>> function : ( fieldlist ) => ( fieldlist )
ty.array-> >>> ty [ int ]
ty.pointer-> >>> * ty
ty.bool-> >>> boolean
ty.char-> >>> chartype
ty.short-> >>> shorttype
ty.name-> >>> id
ty.int-> >>> inttype
ty.void-> >>> void
fieldlist.fieldlist-> >>> fieldlist , field
fieldlist.null-> >>>

itemSet176:
dec.template.class-> type < id > : class : id { >>> memlist }
additionalRules-> -------------------
memlist.memlist-> >>> memlist mems
memlist.mems-> >>> mems
mems.funcAndVarList-> >>> funcAndVarList
funcAndVarList.funcAndVar-> >>> funcAndVar
funcAndVar.funcList.dec.func-> >>> funcAndVar function : id ( fieldlist ) => ( fieldlist ) stm
funcAndVar.var.dec.var.noinit-> >>> ty : var ;
ty.real-> >>> realtype
ty.poly-> >>> id < ty >
ty.func-> >>> function : ( fieldlist ) => ( fieldlist )
ty.array-> >>> ty [ int ]
ty.pointer-> >>> * ty
ty.bool-> >>> boolean
ty.char-> >>> chartype
ty.short-> >>> shorttype
ty.name-> >>> id
ty.int-> >>> inttype
ty.void-> >>> void
funcAndVar.varList.dec.var.noinit-> >>> funcAndVar ty : var ;
funcAndVar.func.dec.func-> >>> function : id ( fieldlist ) => ( fieldlist ) stm
funcAndVar.func-> >>>
funcAndVar.funcList-> >>> funcAndVar
funcAndVar.var.dec.var.init-> >>> ty : var = exp ;
funcAndVar.varList.dec.var.init-> >>> funcAndVar ty : var = exp ;
funcAndVar.varList-> >>> funcAndVar
funcAndVarList.funcAndVarList-> >>> funcAndVarList funcAndVar
mems.protected-> >>> protected : funcAndVarList
mems.private-> >>> private : funcAndVarList
mems.public-> >>> public : funcAndVarList

itemSet177:
ty.func-> function : ( fieldlist ) => ( fieldlist ) >>>
additionalRules-> -------------------

itemSet178:
dec.func-> function : id ( fieldlist ) => ( fieldlist >>> ) stm
dec.jsload-> function : id ( fieldlist ) => ( fieldlist >>> ) = jsload ( string , string ) ;
fieldlist.fieldlist-> fieldlist >>> , field 
additionalRules-> -------------------

itemSet179:
funcAndVar.func.dec.func-> function : id ( fieldlist >>> ) => ( fieldlist ) stm
fieldlist.fieldlist-> fieldlist >>> , field
additionalRules-> -------------------

itemSet180:
funcAndVar.var.dec.var.init-> ty : var = exp >>> ;
exp.op-> exp >>> oper exp
varExp.arrowfield-> exp >>> -> id
varExp.field-> exp >>> . id
varExp.subcript-> exp >>> [ exp ]
additionalRules-> -------------------
oper.or-> >>> ||
oper.mul-> >>> *
oper.lt-> >>> <
oper.le-> >>> <=
oper.sub-> >>> -
oper.eq-> >>> ==
oper.add-> >>> +
oper.div-> >>> /
oper.mod-> >>> %
oper.ge-> >>> >=
oper.neq-> >>> !=
oper.and-> >>> &&
oper.gt-> >>> >

itemSet181:
funcAndVar.varList.dec.var.noinit-> funcAndVar ty : var ; >>>
additionalRules-> -------------------

itemSet182:
funcAndVar.varList.dec.var.init-> funcAndVar ty : var = >>> exp ;
additionalRules-> -------------------
exp.true-> >>> true
exp.string-> >>> string
exp.sizeof-> >>> sizeof ( var )
exp.real-> >>> real
exp.array-> >>> [ explist ]
exp.op-> >>> exp oper exp
exp.func-> >>> ( fieldlist ) => ( fieldlist ) stm
exp.char-> >>> char
exp.call-> >>> varExp ( explist )
varExp.var-> >>> var
var.simple-> >>> id
var.field-> >>> var . id
var.arrowfield-> >>> var -> id
var.subcript-> >>> var [ exp ]
var.deref-> >>> * var
varExp.arrowfield-> >>> exp -> id
varExp.field-> >>> exp . id
varExp.subcript-> >>> exp [ exp ]
exp.address-> >>> & var
exp.var-> >>> varExp
exp.paren-> >>> ( exp )
exp.int-> >>> int
exp.false-> >>> false
exp.minus-> >>> - exp

itemSet183:
exp.func-> ( fieldlist ) => ( >>> fieldlist ) stm
additionalRules-> -------------------
fieldlist.field-> >>> field
field.noinit-> >>> ty : var
ty.real-> >>> realtype
ty.poly-> >>> id < ty >
ty.func-> >>> function : ( fieldlist ) => ( fieldlist )
ty.array-> >>> ty [ int ]
ty.pointer-> >>> * ty
ty.bool-> >>> boolean
ty.char-> >>> chartype
ty.short-> >>> shorttype
ty.name-> >>> id
ty.int-> >>> inttype
ty.void-> >>> void
fieldlist.fieldlist-> >>> fieldlist , field
fieldlist.null-> >>>

itemSet184:
dec.template.func-> type < id > : function : id ( fieldlist >>> ) => ( fieldlist ) stm
fieldlist.fieldlist-> fieldlist >>> , field
additionalRules-> -------------------

itemSet185:
dec.template.class-> type < id > : class : id { memlist >>> }
memlist.memlist-> memlist >>> mems
additionalRules-> -------------------
mems.funcAndVarList-> >>> funcAndVarList
funcAndVarList.funcAndVar-> >>> funcAndVar
funcAndVar.funcList.dec.func-> >>> funcAndVar function : id ( fieldlist ) => ( fieldlist ) stm
funcAndVar.var.dec.var.noinit-> >>> ty : var ;
ty.real-> >>> realtype
ty.poly-> >>> id < ty > 
ty.func-> >>> function : ( fieldlist ) => ( fieldlist )
ty.array-> >>> ty [ int ]
ty.pointer-> >>> * ty
ty.bool-> >>> boolean
ty.char-> >>> chartype
ty.short-> >>> shorttype
ty.name-> >>> id
ty.int-> >>> inttype
ty.void-> >>> void
funcAndVar.varList.dec.var.noinit-> >>> funcAndVar ty : var ;
funcAndVar.func.dec.func-> >>> function : id ( fieldlist ) => ( fieldlist ) stm
funcAndVar.func-> >>>
funcAndVar.funcList-> >>> funcAndVar
funcAndVar.var.dec.var.init-> >>> ty : var = exp ;
funcAndVar.varList.dec.var.init-> >>> funcAndVar ty : var = exp ;
funcAndVar.varList-> >>> funcAndVar
funcAndVarList.funcAndVarList-> >>> funcAndVarList funcAndVar
mems.protected-> >>> protected : funcAndVarList
mems.private-> >>> private : funcAndVarList
mems.public-> >>> public : funcAndVarList

itemSet186:
dec.func-> function : id ( fieldlist ) => ( fieldlist ) >>> stm
dec.jsload-> function : id ( fieldlist ) => ( fieldlist ) >>> = jsload ( string , string ) ;
additionalRules-> -------------------
stm.return.noexp-> >>> return ;
stm.return.exp-> >>> return ( exp ) ;
stm.loop-> >>> loop stm
stm.if.ifelse-> >>> if ( exp ) then stm else stm
stm.dec-> >>> ty : var = exp ;
ty.real-> >>> realtype
ty.poly-> >>> id < ty >
ty.func-> >>> function : ( fieldlist ) => ( fieldlist )
ty.array-> >>> ty [ int ]
ty.pointer-> >>> * ty
ty.bool-> >>> boolean
ty.char-> >>> chartype
ty.short-> >>> shorttype
ty.name-> >>> id
ty.int-> >>> inttype
ty.void-> >>> void
stm.assign.sub-> >>> varExp - = exp ;
varExp.var-> >>> var
var.simple-> >>> id
var.field-> >>> var . id
var.arrowfield-> >>> var -> id
var.subcript-> >>> var [ exp ]
var.deref-> >>> * var
varExp.arrowfield-> >>> exp -> id
exp.true-> >>> true
exp.string-> >>> string
exp.sizeof-> >>> sizeof ( var )
exp.real-> >>> real
exp.array-> >>> [ explist ]
exp.op-> >>> exp oper exp
exp.func-> >>> ( fieldlist ) => ( fieldlist ) stm
exp.char-> >>> char
exp.call-> >>> varExp ( explist )
exp.address-> >>> & var
exp.var-> >>> varExp
exp.paren-> >>> ( exp )
exp.int-> >>> int
exp.false-> >>> false
exp.minus-> >>> - exp
varExp.field-> >>> exp . id
varExp.subcript-> >>> exp [ exp ]
stm.assign.normal-> >>> varExp = exp ;
stm.assign.mul-> >>> varExp * = exp ;
stm.assign.increment-> >>> varExp + + ;
stm.assign.div-> >>> varExp / = exp ;
stm.for-> >>> ( stm ) from ( exp ) to ( stm ) stm
stm.break-> >>> break ;
stm.while-> >>> ( exp ) to stm
stm.call-> >>> varExp ( explist ) ;
stm.compound-> >>> { stmlist }
stm.continue-> >>> continue ;
stm.assign.add-> >>> varExp + = exp ;
stm.if.if-> >>> if ( exp ) then stm
stm.assign.decrement-> >>> varExp - - ;

itemSet187:
funcAndVar.func.dec.func-> function : id ( fieldlist ) >>> => ( fieldlist ) stm 
additionalRules-> -------------------

itemSet188:
funcAndVar.var.dec.var.init-> ty : var = exp ; >>>
additionalRules-> -------------------

itemSet189:
funcAndVar.varList.dec.var.init-> funcAndVar ty : var = exp >>> ;
exp.op-> exp >>> oper exp
varExp.arrowfield-> exp >>> -> id
varExp.field-> exp >>> . id
varExp.subcript-> exp >>> [ exp ]
additionalRules-> -------------------
oper.or-> >>> ||
oper.mul-> >>> *
oper.lt-> >>> <
oper.le-> >>> <=
oper.sub-> >>> -
oper.eq-> >>> ==
oper.add-> >>> +
oper.div-> >>> /
oper.mod-> >>> %
oper.ge-> >>> >=
oper.neq-> >>> !=
oper.and-> >>> &&
oper.gt-> >>> >

itemSet190:
exp.func-> ( fieldlist ) => ( fieldlist >>> ) stm
fieldlist.fieldlist-> fieldlist >>> , field
additionalRules-> -------------------

itemSet191:
dec.template.func-> type < id > : function : id ( fieldlist ) >>> => ( fieldlist ) stm
additionalRules-> -------------------

itemSet192:
dec.template.class-> type < id > : class : id { memlist } >>>
additionalRules-> -------------------

itemSet193:
exp.func-> ( >>> fieldlist ) => ( fieldlist ) stm
exp.paren-> ( >>> exp )
stm.for-> ( >>> stm ) from ( exp ) to ( stm ) stm
stm.while-> ( >>> exp ) to stm
additionalRules-> -------------------
fieldlist.field-> >>> field
field.noinit-> >>> ty : var
ty.real-> >>> realtype
ty.poly-> >>> id < ty >
ty.func-> >>> function : ( fieldlist ) => ( fieldlist )
ty.array-> >>> ty [ int ]
ty.pointer-> >>> * ty
ty.bool-> >>> boolean
ty.char-> >>> chartype
ty.short-> >>> shorttype
ty.name-> >>> id
ty.int-> >>> inttype
ty.void-> >>> void
fieldlist.fieldlist-> >>> fieldlist , field
fieldlist.null-> >>>
exp.true-> >>> true
exp.string-> >>> string
exp.sizeof-> >>> sizeof ( var )
exp.real-> >>> real
exp.array-> >>> [ explist ]
exp.op-> >>> exp oper exp
exp.func-> >>> ( fieldlist ) => ( fieldlist ) stm
exp.char-> >>> char
exp.call-> >>> varExp ( explist )
varExp.var-> >>> var
var.simple-> >>> id
var.field-> >>> var . id
var.arrowfield-> >>> var -> id
var.subcript-> >>> var [ exp ]
var.deref-> >>> * var
varExp.arrowfield-> >>> exp -> id
varExp.field-> >>> exp . id
varExp.subcript-> >>> exp [ exp ]
exp.address-> >>> & var
exp.var-> >>> varExp
exp.paren-> >>> ( exp )
exp.int-> >>> int
exp.false-> >>> false
exp.minus-> >>> - exp
stm.return.noexp-> >>> return ;
stm.return.exp-> >>> return ( exp ) ;
stm.loop-> >>> loop stm
stm.if.ifelse-> >>> if ( exp ) then stm else stm
stm.dec-> >>> ty : var = exp ;
stm.assign.sub-> >>> varExp - = exp ;
stm.assign.normal-> >>> varExp = exp ;
stm.assign.mul-> >>> varExp * = exp ;
stm.assign.increment-> >>> varExp + + ;
stm.assign.div-> >>> varExp / = exp ;
stm.for-> >>> ( stm ) from ( exp ) to ( stm ) stm
stm.break-> >>> break ;
stm.while-> >>> ( exp ) to stm
stm.call-> >>> varExp ( explist ) ;
stm.compound-> >>> { stmlist }
stm.continue-> >>> continue ;
stm.assign.add-> >>> varExp + = exp ;
stm.if.if-> >>> if ( exp ) then stm
stm.assign.decrement-> >>> varExp - - ;

itemSet194:
stm.compound-> { >>> stmlist }
additionalRules-> -------------------
stmlist.null-> >>>
stmlist.stmlist-> >>> stmlist stm
stmlist.stm-> >>> stm
stm.return.noexp-> >>> return ;
stm.return.exp-> >>> return ( exp ) ;
stm.loop-> >>> loop stm
stm.if.ifelse-> >>> if ( exp ) then stm else stm
stm.dec-> >>> ty : var = exp ;
ty.real-> >>> realtype
ty.poly-> >>> id < ty >
ty.func-> >>> function : ( fieldlist ) => ( fieldlist )
ty.array-> >>> ty [ int ]
ty.pointer-> >>> * ty
ty.bool-> >>> boolean
ty.char-> >>> chartype
ty.short-> >>> shorttype
ty.name-> >>> id
ty.int-> >>> inttype
ty.void-> >>> void
stm.assign.sub-> >>> varExp - = exp ;
varExp.var-> >>> var
var.simple-> >>> id
var.field-> >>> var . id
var.arrowfield-> >>> var -> id
var.subcript-> >>> var [ exp ]
var.deref-> >>> * var
varExp.arrowfield-> >>> exp -> id
exp.true-> >>> true
exp.string-> >>> string
exp.sizeof-> >>> sizeof ( var )
exp.real-> >>> real
exp.array-> >>> [ explist ]
exp.op-> >>> exp oper exp
exp.func-> >>> ( fieldlist ) => ( fieldlist ) stm
exp.char-> >>> char
exp.call-> >>> varExp ( explist )
exp.address-> >>> & var
exp.var-> >>> varExp
exp.paren-> >>> ( exp )
exp.int-> >>> int
exp.false-> >>> false
exp.minus-> >>> - exp
varExp.field-> >>> exp . id
varExp.subcript-> >>> exp [ exp ]
stm.assign.normal-> >>> varExp = exp ;
stm.assign.mul-> >>> varExp * = exp ;
stm.assign.increment-> >>> varExp + + ;
stm.assign.div-> >>> varExp / = exp ;
stm.for-> >>> ( stm ) from ( exp ) to ( stm ) stm
stm.break-> >>> break ;
stm.while-> >>> ( exp ) to stm
stm.call-> >>> varExp ( explist ) ;
stm.compound-> >>> { stmlist }
stm.continue-> >>> continue ;
stm.assign.add-> >>> varExp + = exp ;
stm.if.if-> >>> if ( exp ) then stm
stm.assign.decrement-> >>> varExp - - ;

itemSet195:
dec.jsload-> function : id ( fieldlist ) => ( fieldlist ) = >>> jsload ( string , string ) ;
additionalRules-> -------------------

itemSet196:
stm.if.ifelse-> if >>> ( exp ) then stm else stm
stm.if.if-> if >>> ( exp ) then stm
additionalRules-> -------------------

itemSet197:
stm.break-> break >>> ;
additionalRules-> -------------------

itemSet198:
stm.continue-> continue >>> ;
additionalRules-> -------------------

itemSet199:
stm.return.noexp-> return >>> ;
stm.return.exp-> return >>> ( exp ) ;
additionalRules-> -------------------

itemSet200:
stm.loop-> loop >>> stm
additionalRules-> -------------------
stm.return.noexp-> >>> return ;
stm.return.exp-> >>> return ( exp ) ;
stm.loop-> >>> loop stm
stm.if.ifelse-> >>> if ( exp ) then stm else stm
stm.dec-> >>> ty : var = exp ;
ty.real-> >>> realtype
ty.poly-> >>> id < ty >
ty.func-> >>> function : ( fieldlist ) => ( fieldlist )
ty.array-> >>> ty [ int ]
ty.pointer-> >>> * ty
ty.bool-> >>> boolean
ty.char-> >>> chartype
ty.short-> >>> shorttype
ty.name-> >>> id
ty.int-> >>> inttype
ty.void-> >>> void
stm.assign.sub-> >>> varExp - = exp ;
varExp.var-> >>> var
var.simple-> >>> id
var.field-> >>> var . id
var.arrowfield-> >>> var -> id
var.subcript-> >>> var [ exp ]
var.deref-> >>> * var
varExp.arrowfield-> >>> exp -> id
exp.true-> >>> true
exp.string-> >>> string 
exp.sizeof-> >>> sizeof ( var )
exp.real-> >>> real
exp.array-> >>> [ explist ]
exp.op-> >>> exp oper exp
exp.func-> >>> ( fieldlist ) => ( fieldlist ) stm
exp.char-> >>> char
exp.call-> >>> varExp ( explist )
exp.address-> >>> & var
exp.var-> >>> varExp
exp.paren-> >>> ( exp )
exp.int-> >>> int
exp.false-> >>> false
exp.minus-> >>> - exp
varExp.field-> >>> exp . id
varExp.subcript-> >>> exp [ exp ]
stm.assign.normal-> >>> varExp = exp ;
stm.assign.mul-> >>> varExp * = exp ;
stm.assign.increment-> >>> varExp + + ;
stm.assign.div-> >>> varExp / = exp ;
stm.for-> >>> ( stm ) from ( exp ) to ( stm ) stm
stm.break-> >>> break ;
stm.while-> >>> ( exp ) to stm
stm.call-> >>> varExp ( explist ) ;
stm.compound-> >>> { stmlist }
stm.continue-> >>> continue ;
stm.assign.add-> >>> varExp + = exp ;
stm.if.if-> >>> if ( exp ) then stm
stm.assign.decrement-> >>> varExp - - ;

itemSet201:
varExp.arrowfield-> exp >>> -> id
exp.op-> exp >>> oper exp
varExp.field-> exp >>> . id
varExp.subcript-> exp >>> [ exp ]
additionalRules-> -------------------
oper.or-> >>> ||
oper.mul-> >>> *
oper.lt-> >>> <
oper.le-> >>> <=
oper.sub-> >>> -
oper.eq-> >>> ==
oper.add-> >>> +
oper.div-> >>> /
oper.mod-> >>> %
oper.ge-> >>> >=
oper.neq-> >>> !=
oper.and-> >>> &&
oper.gt-> >>> >

itemSet202:
stm.assign.sub-> varExp >>> - = exp ;
exp.call-> varExp >>> ( explist )
exp.var-> varExp >>>
stm.assign.normal-> varExp >>> = exp ;
stm.assign.mul-> varExp >>> * = exp ;
stm.assign.increment-> varExp >>> + + ;
stm.assign.div-> varExp >>> / = exp ;
stm.call-> varExp >>> ( explist ) ;
stm.assign.add-> varExp >>> + = exp ;
stm.assign.decrement-> varExp >>> - - ;
additionalRules-> -------------------

itemSet203:
dec.func-> function : id ( fieldlist ) => ( fieldlist ) stm >>>
additionalRules-> -------------------

itemSet204:
stm.dec-> ty >>> : var = exp ;
ty.array-> ty >>> [ int ]
additionalRules-> -------------------

itemSet205:
funcAndVar.func.dec.func-> function : id ( fieldlist ) => >>> ( fieldlist ) stm
additionalRules-> -------------------

itemSet206:
funcAndVar.varList.dec.var.init-> funcAndVar ty : var = exp ; >>>
additionalRules-> -------------------

itemSet207:
exp.func-> ( fieldlist ) => ( fieldlist ) >>> stm
additionalRules-> -------------------
stm.return.noexp-> >>> return ;
stm.return.exp-> >>> return ( exp ) ;
stm.loop-> >>> loop stm
stm.if.ifelse-> >>> if ( exp ) then stm else stm
stm.dec-> >>> ty : var = exp ;
ty.real-> >>> realtype 
ty.poly-> >>> id < ty >
ty.func-> >>> function : ( fieldlist ) => ( fieldlist )
ty.array-> >>> ty [ int ]
ty.pointer-> >>> * ty
ty.bool-> >>> boolean
ty.char-> >>> chartype
ty.short-> >>> shorttype
ty.name-> >>> id
ty.int-> >>> inttype
ty.void-> >>> void
stm.assign.sub-> >>> varExp - = exp ;
varExp.var-> >>> var
var.simple-> >>> id
var.field-> >>> var . id
var.arrowfield-> >>> var -> id
var.subcript-> >>> var [ exp ]
var.deref-> >>> * var
varExp.arrowfield-> >>> exp -> id
exp.true-> >>> true
exp.string-> >>> string
exp.sizeof-> >>> sizeof ( var )
exp.real-> >>> real
exp.array-> >>> [ explist ]
exp.op-> >>> exp oper exp
exp.func-> >>> ( fieldlist ) => ( fieldlist ) stm
exp.char-> >>> char
exp.call-> >>> varExp ( explist )
exp.address-> >>> & var
exp.var-> >>> varExp
exp.paren-> >>> ( exp )
exp.int-> >>> int
exp.false-> >>> false
exp.minus-> >>> - exp
varExp.field-> >>> exp . id
varExp.subcript-> >>> exp [ exp ]
stm.assign.normal-> >>> varExp = exp ;
stm.assign.mul-> >>> varExp * = exp ;
stm.assign.increment-> >>> varExp + + ;
stm.assign.div-> >>> varExp / = exp ;
stm.for-> >>> ( stm ) from ( exp ) to ( stm ) stm
stm.break-> >>> break ;
stm.while-> >>> ( exp ) to stm
stm.call-> >>> varExp ( explist ) ;
stm.compound-> >>> { stmlist }
stm.continue-> >>> continue ;
stm.assign.add-> >>> varExp + = exp ;
stm.if.if-> >>> if ( exp ) then stm
stm.assign.decrement-> >>> varExp - - ;

itemSet208:
dec.template.func-> type < id > : function : id ( fieldlist ) => >>> ( fieldlist ) stm
additionalRules-> -------------------

itemSet209:
exp.paren-> ( exp >>> )
stm.while-> ( exp >>> ) to stm
exp.op-> exp >>> oper exp
varExp.arrowfield-> exp >>> -> id
varExp.field-> exp >>> . id
varExp.subcript-> exp >>> [ exp ]
additionalRules-> -------------------
oper.or-> >>> ||
oper.mul-> >>> *
oper.lt-> >>> <
oper.le-> >>> <=
oper.sub-> >>> -
oper.eq-> >>> ==
oper.add-> >>> +
oper.div-> >>> /
oper.mod-> >>> %
oper.ge-> >>> >=
oper.neq-> >>> !=
oper.and-> >>> &&
oper.gt-> >>> >

itemSet210:
exp.call-> varExp >>> ( explist ) 
exp.var-> varExp >>>
stm.assign.sub-> varExp >>> - = exp ;
stm.assign.normal-> varExp >>> = exp ;
stm.assign.mul-> varExp >>> * = exp ;
stm.assign.increment-> varExp >>> + + ;
stm.assign.div-> varExp >>> / = exp ;
stm.call-> varExp >>> ( explist ) ;
stm.assign.add-> varExp >>> + = exp ;
stm.assign.decrement-> varExp >>> - - ;
additionalRules-> -------------------

itemSet211:
stm.for-> ( stm >>> ) from ( exp ) to ( stm ) stm
additionalRules-> -------------------

itemSet212:
field.noinit-> ty >>> : var
ty.array-> ty >>> [ int ]
stm.dec-> ty >>> : var = exp ;
additionalRules-> -------------------

itemSet213:
stmlist.null->  >>>
additionalRules-> -------------------

itemSet214:
stmlist.stm-> stm >>>
additionalRules-> -------------------

itemSet215:
stm.compound-> { stmlist >>> }
stmlist.stmlist-> stmlist >>> stm
additionalRules-> -------------------
stm.return.noexp-> >>> return ;
stm.return.exp-> >>> return ( exp ) ;
stm.loop-> >>> loop stm
stm.if.ifelse-> >>> if ( exp ) then stm else stm
stm.dec-> >>> ty : var = exp ;
ty.real-> >>> realtype
ty.poly-> >>> id < ty >
ty.func-> >>> function : ( fieldlist ) => ( fieldlist )
ty.array-> >>> ty [ int ]
ty.pointer-> >>> * ty
ty.bool-> >>> boolean
ty.char-> >>> chartype
ty.short-> >>> shorttype
ty.name-> >>> id
ty.int-> >>> inttype
ty.void-> >>> void
stm.assign.sub-> >>> varExp - = exp ;
varExp.var-> >>> var
var.simple-> >>> id
var.field-> >>> var . id
var.arrowfield-> >>> var -> id
var.subcript-> >>> var [ exp ]
var.deref-> >>> * var
varExp.arrowfield-> >>> exp -> id
exp.true-> >>> true
exp.string-> >>> string
exp.sizeof-> >>> sizeof ( var )
exp.real-> >>> real
exp.array-> >>> [ explist ]
exp.op-> >>> exp oper exp
exp.func-> >>> ( fieldlist ) => ( fieldlist ) stm
exp.char-> >>> char
exp.call-> >>> varExp ( explist )
exp.address-> >>> & var
exp.var-> >>> varExp
exp.paren-> >>> ( exp ) 
exp.int-> >>> int
exp.false-> >>> false
exp.minus-> >>> - exp
varExp.field-> >>> exp . id
varExp.subcript-> >>> exp [ exp ]
stm.assign.normal-> >>> varExp = exp ;
stm.assign.mul-> >>> varExp * = exp ;
stm.assign.increment-> >>> varExp + + ;
stm.assign.div-> >>> varExp / = exp ;
stm.for-> >>> ( stm ) from ( exp ) to ( stm ) stm
stm.break-> >>> break ;
stm.while-> >>> ( exp ) to stm
stm.call-> >>> varExp ( explist ) ;
stm.compound-> >>> { stmlist }
stm.continue-> >>> continue ;
stm.assign.add-> >>> varExp + = exp ;
stm.if.if-> >>> if ( exp ) then stm
stm.assign.decrement-> >>> varExp - - ;

itemSet216:
dec.jsload-> function : id ( fieldlist ) => ( fieldlist ) = jsload >>> ( string , string ) ;
additionalRules-> -------------------

itemSet217:
stm.if.ifelse-> if ( >>> exp ) then stm else stm
stm.if.if-> if ( >>> exp ) then stm
additionalRules-> -------------------
exp.true-> >>> true
exp.string-> >>> string
exp.sizeof-> >>> sizeof ( var )
exp.real-> >>> real
exp.array-> >>> [ explist ]
exp.op-> >>> exp oper exp
exp.func-> >>> ( fieldlist ) => ( fieldlist ) stm
exp.char-> >>> char
exp.call-> >>> varExp ( explist )
varExp.var-> >>> var
var.simple-> >>> id
var.field-> >>> var . id
var.arrowfield-> >>> var -> id
var.subcript-> >>> var [ exp ]
var.deref-> >>> * var
varExp.arrowfield-> >>> exp -> id
varExp.field-> >>> exp . id
varExp.subcript-> >>> exp [ exp ]
exp.address-> >>> & var
exp.var-> >>> varExp
exp.paren-> >>> ( exp )
exp.int-> >>> int
exp.false-> >>> false
exp.minus-> >>> - exp

itemSet218:
stm.break-> break ; >>>
additionalRules-> -------------------

itemSet219:
stm.continue-> continue ; >>>
additionalRules-> -------------------

itemSet220:
stm.return.noexp-> return ; >>>
additionalRules-> -------------------

itemSet221:
stm.return.exp-> return ( >>> exp ) ;
additionalRules-> -------------------
exp.true-> >>> true
exp.string-> >>> string
exp.sizeof-> >>> sizeof ( var )
exp.real-> >>> real
exp.array-> >>> [ explist ]
exp.op-> >>> exp oper exp
exp.func-> >>> ( fieldlist ) => ( fieldlist ) stm
exp.char-> >>> char
exp.call-> >>> varExp ( explist )
varExp.var-> >>> var
var.simple-> >>> id
var.field-> >>> var . id
var.arrowfield-> >>> var -> id
var.subcript-> >>> var [ exp ]
var.deref-> >>> * var
varExp.arrowfield-> >>> exp -> id
varExp.field-> >>> exp . id
varExp.subcript-> >>> exp [ exp ]
exp.address-> >>> & var
exp.var-> >>> varExp
exp.paren-> >>> ( exp )
exp.int-> >>> int
exp.false-> >>> false
exp.minus-> >>> - exp

itemSet222:
stm.loop-> loop stm >>>
additionalRules-> -------------------

itemSet223:
exp.call-> varExp ( >>> explist )
stm.call-> varExp ( >>> explist ) ;
additionalRules-> -------------------
explist.explist-> >>> explist , exp
explist.null-> >>>
explist.exp-> >>> exp
exp.true-> >>> true
exp.string-> >>> string
exp.sizeof-> >>> sizeof ( var )
exp.real-> >>> real
exp.array-> >>> [ explist ]
exp.op-> >>> exp oper exp
exp.func-> >>> ( fieldlist ) => ( fieldlist ) stm
exp.char-> >>> char
exp.call-> >>> varExp ( explist )
varExp.var-> >>> var
var.simple-> >>> id
var.field-> >>> var . id
var.arrowfield-> >>> var -> id
var.subcript-> >>> var [ exp ]
var.deref-> >>> * var
varExp.arrowfield-> >>> exp -> id
varExp.field-> >>> exp . id
varExp.subcript-> >>> exp [ exp ]
exp.address-> >>> & var
exp.var-> >>> varExp
exp.paren-> >>> ( exp )
exp.int-> >>> int
exp.false-> >>> false
exp.minus-> >>> - exp

itemSet224:
stm.assign.increment-> varExp + >>> + ;
stm.assign.add-> varExp + >>> = exp ;
additionalRules-> -------------------

itemSet225:
stm.assign.sub-> varExp - >>> = exp ;
stm.assign.decrement-> varExp - >>> - ;
additionalRules-> -------------------

itemSet226:
stm.assign.mul-> varExp * >>> = exp ;
additionalRules-> -------------------

itemSet227:
stm.assign.div-> varExp / >>> = exp ;
additionalRules-> -------------------

itemSet228:
stm.assign.normal-> varExp = >>> exp ;
additionalRules-> -------------------
exp.true-> >>> true
exp.string-> >>> string
exp.sizeof-> >>> sizeof ( var )
exp.real-> >>> real
exp.array-> >>> [ explist ]
exp.op-> >>> exp oper exp
exp.func-> >>> ( fieldlist ) => ( fieldlist ) stm
exp.char-> >>> char
exp.call-> >>> varExp ( explist )
varExp.var-> >>> var
var.simple-> >>> id
var.field-> >>> var . id
var.arrowfield-> >>> var -> id
var.subcript-> >>> var [ exp ]
var.deref-> >>> * var
varExp.arrowfield-> >>> exp -> id
varExp.field-> >>> exp . id
varExp.subcript-> >>> exp [ exp ]
exp.address-> >>> & var
exp.var-> >>> varExp
exp.paren-> >>> ( exp )
exp.int-> >>> int
exp.false-> >>> false
exp.minus-> >>> - exp

itemSet229:
stm.dec-> ty : >>> var = exp ;
additionalRules-> -------------------
var.simple-> >>> id
var.field-> >>> var . id
var.arrowfield-> >>> var -> id
var.subcript-> >>> var [ exp ]
var.deref-> >>> * var

itemSet230:
funcAndVar.func.dec.func-> function : id ( fieldlist ) => ( >>> fieldlist ) stm
additionalRules-> -------------------
fieldlist.field-> >>> field
field.noinit-> >>> ty : var
ty.real-> >>> realtype
ty.poly-> >>> id < ty >
ty.func-> >>> function : ( fieldlist ) => ( fieldlist )
ty.array-> >>> ty [ int ]
ty.pointer-> >>> * ty
ty.bool-> >>> boolean
ty.char-> >>> chartype
ty.short-> >>> shorttype
ty.name-> >>> id
ty.int-> >>> inttype
ty.void-> >>> void
fieldlist.fieldlist-> >>> fieldlist , field
fieldlist.null-> >>>

itemSet231:
exp.func-> ( fieldlist ) => ( fieldlist ) stm >>>
additionalRules-> -------------------

itemSet232:
dec.template.func-> type < id > : function : id ( fieldlist ) => ( >>> fieldlist ) stm
additionalRules-> -------------------
fieldlist.field-> >>> field
field.noinit-> >>> ty : var
ty.real-> >>> realtype
ty.poly-> >>> id < ty >
ty.func-> >>> function : ( fieldlist ) => ( fieldlist )
ty.array-> >>> ty [ int ]
ty.pointer-> >>> * ty
ty.bool-> >>> boolean
ty.char-> >>> chartype
ty.short-> >>> shorttype
ty.name-> >>> id
ty.int-> >>> inttype
ty.void-> >>> void
fieldlist.fieldlist-> >>> fieldlist , field
fieldlist.null-> >>>

itemSet233:
exp.paren-> ( exp ) >>>
stm.while-> ( exp ) >>> to stm
additionalRules-> -------------------

itemSet234:
stm.for-> ( stm ) >>> from ( exp ) to ( stm ) stm
additionalRules-> ------------------- 

itemSet235:
stm.compound-> { stmlist } >>>
additionalRules-> -------------------

itemSet236:
stmlist.stmlist-> stmlist stm >>>
additionalRules-> -------------------

itemSet237:
dec.jsload-> function : id ( fieldlist ) => ( fieldlist ) = jsload ( >>> string , string ) ;
additionalRules-> -------------------

itemSet238:
stm.if.ifelse-> if ( exp >>> ) then stm else stm
stm.if.if-> if ( exp >>> ) then stm
exp.op-> exp >>> oper exp
varExp.arrowfield-> exp >>> -> id
varExp.field-> exp >>> . id
varExp.subcript-> exp >>> [ exp ]
additionalRules-> -------------------
oper.or-> >>> ||
oper.mul-> >>> *
oper.lt-> >>> <
oper.le-> >>> <=
oper.sub-> >>> -
oper.eq-> >>> ==
oper.add-> >>> +
oper.div-> >>> /
oper.mod-> >>> %
oper.ge-> >>> >=
oper.neq-> >>> !=
oper.and-> >>> &&
oper.gt-> >>> >

itemSet239:
stm.return.exp-> return ( exp >>> ) ;
exp.op-> exp >>> oper exp
varExp.arrowfield-> exp >>> -> id
varExp.field-> exp >>> . id
varExp.subcript-> exp >>> [ exp ]
additionalRules-> -------------------
oper.or-> >>> ||
oper.mul-> >>> *
oper.lt-> >>> <
oper.le-> >>> <=
oper.sub-> >>> -
oper.eq-> >>> ==
oper.add-> >>> +
oper.div-> >>> /
oper.mod-> >>> %
oper.ge-> >>> >=
oper.neq-> >>> !=
oper.and-> >>> &&
oper.gt-> >>> >

itemSet240:
exp.call-> varExp ( explist >>> )
stm.call-> varExp ( explist >>> ) ;
explist.explist-> explist >>> , exp
additionalRules-> -------------------

itemSet241:
stm.assign.increment-> varExp + + >>> ;
additionalRules-> -------------------

itemSet242:
stm.assign.add-> varExp + = >>> exp ;
additionalRules-> -------------------
exp.true-> >>> true
exp.string-> >>> string
exp.sizeof-> >>> sizeof ( var )
exp.real-> >>> real
exp.array-> >>> [ explist ]
exp.op-> >>> exp oper exp
exp.func-> >>> ( fieldlist ) => ( fieldlist ) stm
exp.char-> >>> char
exp.call-> >>> varExp ( explist )
varExp.var-> >>> var
var.simple-> >>> id
var.field-> >>> var . id
var.arrowfield-> >>> var -> id
var.subcript-> >>> var [ exp ]
var.deref-> >>> * var
varExp.arrowfield-> >>> exp -> id
varExp.field-> >>> exp . id
varExp.subcript-> >>> exp [ exp ]
exp.address-> >>> & var
exp.var-> >>> varExp
exp.paren-> >>> ( exp )
exp.int-> >>> int
exp.false-> >>> false
exp.minus-> >>> - exp

itemSet243:
stm.assign.decrement-> varExp - - >>> ;
additionalRules-> -------------------

itemSet244:
stm.assign.sub-> varExp - = >>> exp ;
additionalRules-> -------------------
exp.true-> >>> true
exp.string-> >>> string
exp.sizeof-> >>> sizeof ( var )
exp.real-> >>> real
exp.array-> >>> [ explist ]
exp.op-> >>> exp oper exp
exp.func-> >>> ( fieldlist ) => ( fieldlist ) stm 
exp.char-> >>> char
exp.call-> >>> varExp ( explist )
varExp.var-> >>> var
var.simple-> >>> id
var.field-> >>> var . id
var.arrowfield-> >>> var -> id
var.subcript-> >>> var [ exp ]
var.deref-> >>> * var
varExp.arrowfield-> >>> exp -> id
varExp.field-> >>> exp . id
varExp.subcript-> >>> exp [ exp ]
exp.address-> >>> & var
exp.var-> >>> varExp
exp.paren-> >>> ( exp )
exp.int-> >>> int
exp.false-> >>> false
exp.minus-> >>> - exp

itemSet245:
stm.assign.mul-> varExp * = >>> exp ;
additionalRules-> -------------------
exp.true-> >>> true
exp.string-> >>> string
exp.sizeof-> >>> sizeof ( var )
exp.real-> >>> real
exp.array-> >>> [ explist ]
exp.op-> >>> exp oper exp
exp.func-> >>> ( fieldlist ) => ( fieldlist ) stm
exp.char-> >>> char
exp.call-> >>> varExp ( explist )
varExp.var-> >>> var
var.simple-> >>> id
var.field-> >>> var . id
var.arrowfield-> >>> var -> id
var.subcript-> >>> var [ exp ]
var.deref-> >>> * var
varExp.arrowfield-> >>> exp -> id
varExp.field-> >>> exp . id
varExp.subcript-> >>> exp [ exp ]
exp.address-> >>> & var
exp.var-> >>> varExp
exp.paren-> >>> ( exp )
exp.int-> >>> int
exp.false-> >>> false
exp.minus-> >>> - exp

itemSet246:
stm.assign.div-> varExp / = >>> exp ;
additionalRules-> -------------------
exp.true-> >>> true
exp.string-> >>> string
exp.sizeof-> >>> sizeof ( var )
exp.real-> >>> real
exp.array-> >>> [ explist ]
exp.op-> >>> exp oper exp
exp.func-> >>> ( fieldlist ) => ( fieldlist ) stm
exp.char-> >>> char
exp.call-> >>> varExp ( explist )
varExp.var-> >>> var
var.simple-> >>> id
var.field-> >>> var . id
var.arrowfield-> >>> var -> id
var.subcript-> >>> var [ exp ]
var.deref-> >>> * var
varExp.arrowfield-> >>> exp -> id
varExp.field-> >>> exp . id
varExp.subcript-> >>> exp [ exp ]
exp.address-> >>> & var
exp.var-> >>> varExp
exp.paren-> >>> ( exp )
exp.int-> >>> int
exp.false-> >>> false
exp.minus-> >>> - exp

itemSet247:
stm.assign.normal-> varExp = exp >>> ;
exp.op-> exp >>> oper exp
varExp.arrowfield-> exp >>> -> id
varExp.field-> exp >>> . id
varExp.subcript-> exp >>> [ exp ]
additionalRules-> -------------------
oper.or-> >>> ||
oper.mul-> >>> *
oper.lt-> >>> <
oper.le-> >>> <=
oper.sub-> >>> -
oper.eq-> >>> ==
oper.add-> >>> +
oper.div-> >>> /
oper.mod-> >>> %
oper.ge-> >>> >=
oper.neq-> >>> !=
oper.and-> >>> &&
oper.gt-> >>> >

itemSet248:
stm.dec-> ty : var >>> = exp ;
var.field-> var >>> . id
var.arrowfield-> var >>> -> id
var.subcript-> var >>> [ exp ]
additionalRules-> -------------------

itemSet249:
funcAndVar.func.dec.func-> function : id ( fieldlist ) => ( fieldlist >>> ) stm
fieldlist.fieldlist-> fieldlist >>> , field
additionalRules-> -------------------

itemSet250:
dec.template.func-> type < id > : function : id ( fieldlist ) => ( fieldlist >>> ) stm
fieldlist.fieldlist-> fieldlist >>> , field
additionalRules-> -------------------

itemSet251:
stm.while-> ( exp ) to >>> stm
additionalRules-> -------------------
stm.return.noexp-> >>> return ;
stm.return.exp-> >>> return ( exp ) ;
stm.loop-> >>> loop stm
stm.if.ifelse-> >>> if ( exp ) then stm else stm
stm.dec-> >>> ty : var = exp ;
ty.real-> >>> realtype
ty.poly-> >>> id < ty >
ty.func-> >>> function : ( fieldlist ) => ( fieldlist )
ty.array-> >>> ty [ int ]
ty.pointer-> >>> * ty
ty.bool-> >>> boolean
ty.char-> >>> chartype
ty.short-> >>> shorttype
ty.name-> >>> id
ty.int-> >>> inttype
ty.void-> >>> void
stm.assign.sub-> >>> varExp - = exp ;
varExp.var-> >>> var
var.simple-> >>> id
var.field-> >>> var . id
var.arrowfield-> >>> var -> id
var.subcript-> >>> var [ exp ]
var.deref-> >>> * var
varExp.arrowfield-> >>> exp -> id
exp.true-> >>> true
exp.string-> >>> string
exp.sizeof-> >>> sizeof ( var )
exp.real-> >>> real
exp.array-> >>> [ explist ]
exp.op-> >>> exp oper exp
exp.func-> >>> ( fieldlist ) => ( fieldlist ) stm
exp.char-> >>> char
exp.call-> >>> varExp ( explist )
exp.address-> >>> & var
exp.var-> >>> varExp
exp.paren-> >>> ( exp )
exp.int-> >>> int
exp.false-> >>> false
exp.minus-> >>> - exp
varExp.field-> >>> exp . id
varExp.subcript-> >>> exp [ exp ]
stm.assign.normal-> >>> varExp = exp ;
stm.assign.mul-> >>> varExp * = exp ;
stm.assign.increment-> >>> varExp + + ;
stm.assign.div-> >>> varExp / = exp ;
stm.for-> >>> ( stm ) from ( exp ) to ( stm ) stm
stm.break-> >>> break ;
stm.while-> >>> ( exp ) to stm
stm.call-> >>> varExp ( explist ) ;
stm.compound-> >>> { stmlist }
stm.continue-> >>> continue ;
stm.assign.add-> >>> varExp + = exp ;
stm.if.if-> >>> if ( exp ) then stm
stm.assign.decrement-> >>> varExp - - ;

itemSet252:
stm.for-> ( stm ) from >>> ( exp ) to ( stm ) stm
additionalRules-> -------------------

itemSet253:
dec.jsload-> function : id ( fieldlist ) => ( fieldlist ) = jsload ( string >>> , string ) ;
additionalRules-> -------------------

itemSet254:
stm.if.ifelse-> if ( exp ) >>> then stm else stm
stm.if.if-> if ( exp ) >>> then stm
additionalRules-> -------------------

itemSet255:
stm.return.exp-> return ( exp ) >>> ;
additionalRules-> -------------------

itemSet256:
exp.call-> varExp ( explist ) >>>
stm.call-> varExp ( explist ) >>> ;
additionalRules-> -------------------

itemSet257:
stm.assign.increment-> varExp + + ; >>>
additionalRules-> -------------------

itemSet258:
stm.assign.add-> varExp + = exp >>> ;
exp.op-> exp >>> oper exp
varExp.arrowfield-> exp >>> -> id
varExp.field-> exp >>> . id
varExp.subcript-> exp >>> [ exp ]
additionalRules-> -------------------
oper.or-> >>> ||
oper.mul-> >>> *
oper.lt-> >>> <
oper.le-> >>> <=
oper.sub-> >>> -
oper.eq-> >>> ==
oper.add-> >>> +
oper.div-> >>> /
oper.mod-> >>> %
oper.ge-> >>> >=
oper.neq-> >>> !=
oper.and-> >>> &&
oper.gt-> >>> >

itemSet259:
stm.assign.decrement-> varExp - - ; >>>
additionalRules-> -------------------

itemSet260:
stm.assign.sub-> varExp - = exp >>> ;
exp.op-> exp >>> oper exp
varExp.arrowfield-> exp >>> -> id
varExp.field-> exp >>> . id
varExp.subcript-> exp >>> [ exp ]
additionalRules-> -------------------
oper.or-> >>> ||
oper.mul-> >>> *
oper.lt-> >>> <
oper.le-> >>> <=
oper.sub-> >>> -
oper.eq-> >>> ==
oper.add-> >>> +
oper.div-> >>> /
oper.mod-> >>> %
oper.ge-> >>> >=
oper.neq-> >>> !=
oper.and-> >>> &&
oper.gt-> >>> >

itemSet261:
stm.assign.mul-> varExp * = exp >>> ;
exp.op-> exp >>> oper exp
varExp.arrowfield-> exp >>> -> id
varExp.field-> exp >>> . id
varExp.subcript-> exp >>> [ exp ]
additionalRules-> -------------------
oper.or-> >>> ||
oper.mul-> >>> *
oper.lt-> >>> <
oper.le-> >>> <=
oper.sub-> >>> -
oper.eq-> >>> ==
oper.add-> >>> +
oper.div-> >>> /
oper.mod-> >>> %
oper.ge-> >>> >=
oper.neq-> >>> !=
oper.and-> >>> &&
oper.gt-> >>> >

itemSet262:
stm.assign.div-> varExp / = exp >>> ;
exp.op-> exp >>> oper exp
varExp.arrowfield-> exp >>> -> id
varExp.field-> exp >>> . id
varExp.subcript-> exp >>> [ exp ]
additionalRules-> -------------------
oper.or-> >>> ||
oper.mul-> >>> *
oper.lt-> >>> <
oper.le-> >>> <=
oper.sub-> >>> -
oper.eq-> >>> ==
oper.add-> >>> +
oper.div-> >>> /
oper.mod-> >>> %
oper.ge-> >>> >=
oper.neq-> >>> !=
oper.and-> >>> &&
oper.gt-> >>> >

itemSet263:
stm.assign.normal-> varExp = exp ; >>>
additionalRules-> -------------------

itemSet264:
stm.dec-> ty : var = >>> exp ;
additionalRules-> -------------------
exp.true-> >>> true
exp.string-> >>> string
exp.sizeof-> >>> sizeof ( var )
exp.real-> >>> real
exp.array-> >>> [ explist ]
exp.op-> >>> exp oper exp
exp.func-> >>> ( fieldlist ) => ( fieldlist ) stm
exp.char-> >>> char
exp.call-> >>> varExp ( explist )
varExp.var-> >>> var
var.simple-> >>> id
var.field-> >>> var . id
var.arrowfield-> >>> var -> id
var.subcript-> >>> var [ exp ]
var.deref-> >>> * var
varExp.arrowfield-> >>> exp -> id
varExp.field-> >>> exp . id
varExp.subcript-> >>> exp [ exp ]
exp.address-> >>> & var
exp.var-> >>> varExp
exp.paren-> >>> ( exp )
exp.int-> >>> int
exp.false-> >>> false
exp.minus-> >>> - exp

itemSet265:
funcAndVar.func.dec.func-> function : id ( fieldlist ) => ( fieldlist ) >>> stm
additionalRules-> -------------------
stm.return.noexp-> >>> return ;
stm.return.exp-> >>> return ( exp ) ;
stm.loop-> >>> loop stm
stm.if.ifelse-> >>> if ( exp ) then stm else stm
stm.dec-> >>> ty : var = exp ;
ty.real-> >>> realtype
ty.poly-> >>> id < ty >
ty.func-> >>> function : ( fieldlist ) => ( fieldlist ) 
ty.array-> >>> ty [ int ]
ty.pointer-> >>> * ty
ty.bool-> >>> boolean
ty.char-> >>> chartype
ty.short-> >>> shorttype
ty.name-> >>> id
ty.int-> >>> inttype
ty.void-> >>> void
stm.assign.sub-> >>> varExp - = exp ;
varExp.var-> >>> var
var.simple-> >>> id
var.field-> >>> var . id
var.arrowfield-> >>> var -> id
var.subcript-> >>> var [ exp ]
var.deref-> >>> * var
varExp.arrowfield-> >>> exp -> id
exp.true-> >>> true
exp.string-> >>> string
exp.sizeof-> >>> sizeof ( var )
exp.real-> >>> real
exp.array-> >>> [ explist ]
exp.op-> >>> exp oper exp
exp.func-> >>> ( fieldlist ) => ( fieldlist ) stm
exp.char-> >>> char
exp.call-> >>> varExp ( explist )
exp.address-> >>> & var
exp.var-> >>> varExp
exp.paren-> >>> ( exp )
exp.int-> >>> int
exp.false-> >>> false
exp.minus-> >>> - exp
varExp.field-> >>> exp . id
varExp.subcript-> >>> exp [ exp ]
stm.assign.normal-> >>> varExp = exp ;
stm.assign.mul-> >>> varExp * = exp ;
stm.assign.increment-> >>> varExp + + ;
stm.assign.div-> >>> varExp / = exp ;
stm.for-> >>> ( stm ) from ( exp ) to ( stm ) stm
stm.break-> >>> break ;
stm.while-> >>> ( exp ) to stm
stm.call-> >>> varExp ( explist ) ;
stm.compound-> >>> { stmlist }
stm.continue-> >>> continue ;
stm.assign.add-> >>> varExp + = exp ;
stm.if.if-> >>> if ( exp ) then stm
stm.assign.decrement-> >>> varExp - - ;

itemSet266:
dec.template.func-> type < id > : function : id ( fieldlist ) => ( fieldlist ) >>> stm
additionalRules-> -------------------
stm.return.noexp-> >>> return ;
stm.return.exp-> >>> return ( exp ) ;
stm.loop-> >>> loop stm
stm.if.ifelse-> >>> if ( exp ) then stm else stm
stm.dec-> >>> ty : var = exp ;
ty.real-> >>> realtype
ty.poly-> >>> id < ty >
ty.func-> >>> function : ( fieldlist ) => ( fieldlist )
ty.array-> >>> ty [ int ]
ty.pointer-> >>> * ty
ty.bool-> >>> boolean
ty.char-> >>> chartype
ty.short-> >>> shorttype
ty.name-> >>> id
ty.int-> >>> inttype
ty.void-> >>> void
stm.assign.sub-> >>> varExp - = exp ;
varExp.var-> >>> var
var.simple-> >>> id
var.field-> >>> var . id
var.arrowfield-> >>> var -> id
var.subcript-> >>> var [ exp ]
var.deref-> >>> * var
varExp.arrowfield-> >>> exp -> id
exp.true-> >>> true
exp.string-> >>> string
exp.sizeof-> >>> sizeof ( var )
exp.real-> >>> real
exp.array-> >>> [ explist ]
exp.op-> >>> exp oper exp
exp.func-> >>> ( fieldlist ) => ( fieldlist ) stm
exp.char-> >>> char
exp.call-> >>> varExp ( explist )
exp.address-> >>> & var
exp.var-> >>> varExp
exp.paren-> >>> ( exp )
exp.int-> >>> int
exp.false-> >>> false
exp.minus-> >>> - exp
varExp.field-> >>> exp . id
varExp.subcript-> >>> exp [ exp ]
stm.assign.normal-> >>> varExp = exp ;
stm.assign.mul-> >>> varExp * = exp ;
stm.assign.increment-> >>> varExp + + ;
stm.assign.div-> >>> varExp / = exp ;
stm.for-> >>> ( stm ) from ( exp ) to ( stm ) stm
stm.break-> >>> break ;
stm.while-> >>> ( exp ) to stm
stm.call-> >>> varExp ( explist ) ;
stm.compound-> >>> { stmlist } 
stm.continue-> >>> continue ;
stm.assign.add-> >>> varExp + = exp ;
stm.if.if-> >>> if ( exp ) then stm
stm.assign.decrement-> >>> varExp - - ;

itemSet267:
stm.while-> ( exp ) to stm >>>
additionalRules-> -------------------

itemSet268:
stm.for-> ( stm ) from ( >>> exp ) to ( stm ) stm
additionalRules-> -------------------
exp.true-> >>> true
exp.string-> >>> string
exp.sizeof-> >>> sizeof ( var )
exp.real-> >>> real
exp.array-> >>> [ explist ]
exp.op-> >>> exp oper exp
exp.func-> >>> ( fieldlist ) => ( fieldlist ) stm
exp.char-> >>> char
exp.call-> >>> varExp ( explist )
varExp.var-> >>> var
var.simple-> >>> id
var.field-> >>> var . id
var.arrowfield-> >>> var -> id
var.subcript-> >>> var [ exp ]
var.deref-> >>> * var
varExp.arrowfield-> >>> exp -> id
varExp.field-> >>> exp . id
varExp.subcript-> >>> exp [ exp ]
exp.address-> >>> & var
exp.var-> >>> varExp
exp.paren-> >>> ( exp )
exp.int-> >>> int
exp.false-> >>> false
exp.minus-> >>> - exp

itemSet269:
dec.jsload-> function : id ( fieldlist ) => ( fieldlist ) = jsload ( string , >>> string ) ;
additionalRules-> -------------------

itemSet270:
stm.if.ifelse-> if ( exp ) then >>> stm else stm
stm.if.if-> if ( exp ) then >>> stm
additionalRules-> -------------------
stm.return.noexp-> >>> return ;
stm.return.exp-> >>> return ( exp ) ;
stm.loop-> >>> loop stm
stm.if.ifelse-> >>> if ( exp ) then stm else stm
stm.dec-> >>> ty : var = exp ;
ty.real-> >>> realtype
ty.poly-> >>> id < ty >
ty.func-> >>> function : ( fieldlist ) => ( fieldlist )
ty.array-> >>> ty [ int ]
ty.pointer-> >>> * ty
ty.bool-> >>> boolean
ty.char-> >>> chartype
ty.short-> >>> shorttype
ty.name-> >>> id
ty.int-> >>> inttype
ty.void-> >>> void
stm.assign.sub-> >>> varExp - = exp ;
varExp.var-> >>> var
var.simple-> >>> id
var.field-> >>> var . id
var.arrowfield-> >>> var -> id
var.subcript-> >>> var [ exp ]
var.deref-> >>> * var
varExp.arrowfield-> >>> exp -> id
exp.true-> >>> true
exp.string-> >>> string
exp.sizeof-> >>> sizeof ( var )
exp.real-> >>> real
exp.array-> >>> [ explist ]
exp.op-> >>> exp oper exp
exp.func-> >>> ( fieldlist ) => ( fieldlist ) stm
exp.char-> >>> char
exp.call-> >>> varExp ( explist )
exp.address-> >>> & var
exp.var-> >>> varExp
exp.paren-> >>> ( exp )
exp.int-> >>> int
exp.false-> >>> false
exp.minus-> >>> - exp
varExp.field-> >>> exp . id
varExp.subcript-> >>> exp [ exp ]
stm.assign.normal-> >>> varExp = exp ;
stm.assign.mul-> >>> varExp * = exp ;
stm.assign.increment-> >>> varExp + + ;
stm.assign.div-> >>> varExp / = exp ;
stm.for-> >>> ( stm ) from ( exp ) to ( stm ) stm
stm.break-> >>> break ;
stm.while-> >>> ( exp ) to stm
stm.call-> >>> varExp ( explist ) ;
stm.compound-> >>> { stmlist }
stm.continue-> >>> continue ;
stm.assign.add-> >>> varExp + = exp ;
stm.if.if-> >>> if ( exp ) then stm
stm.assign.decrement-> >>> varExp - - ;

itemSet271:
stm.return.exp-> return ( exp ) ; >>>
additionalRules-> -------------------

itemSet272:
stm.call-> varExp ( explist ) ; >>>
additionalRules-> -------------------

itemSet273:
stm.assign.add-> varExp + = exp ; >>> 
additionalRules-> -------------------

itemSet274:
stm.assign.sub-> varExp - = exp ; >>>
additionalRules-> -------------------

itemSet275:
stm.assign.mul-> varExp * = exp ; >>>
additionalRules-> -------------------

itemSet276:
stm.assign.div-> varExp / = exp ; >>>
additionalRules-> -------------------

itemSet277:
stm.dec-> ty : var = exp >>> ;
exp.op-> exp >>> oper exp
varExp.arrowfield-> exp >>> -> id
varExp.field-> exp >>> . id
varExp.subcript-> exp >>> [ exp ]
additionalRules-> -------------------
oper.or-> >>> ||
oper.mul-> >>> *
oper.lt-> >>> <
oper.le-> >>> <=
oper.sub-> >>> -
oper.eq-> >>> ==
oper.add-> >>> +
oper.div-> >>> /
oper.mod-> >>> %
oper.ge-> >>> >=
oper.neq-> >>> !=
oper.and-> >>> &&
oper.gt-> >>> >

itemSet278:
funcAndVar.func.dec.func-> function : id ( fieldlist ) => ( fieldlist ) stm >>>
additionalRules-> -------------------

itemSet279:
dec.template.func-> type < id > : function : id ( fieldlist ) => ( fieldlist ) stm >>>
additionalRules-> -------------------

itemSet280:
stm.for-> ( stm ) from ( exp >>> ) to ( stm ) stm
exp.op-> exp >>> oper exp
varExp.arrowfield-> exp >>> -> id
varExp.field-> exp >>> . id
varExp.subcript-> exp >>> [ exp ]
additionalRules-> -------------------
oper.or-> >>> ||
oper.mul-> >>> *
oper.lt-> >>> <
oper.le-> >>> <=
oper.sub-> >>> -
oper.eq-> >>> ==
oper.add-> >>> +
oper.div-> >>> /
oper.mod-> >>> %
oper.ge-> >>> >=
oper.neq-> >>> !=
oper.and-> >>> &&
oper.gt-> >>> >

itemSet281:
dec.jsload-> function : id ( fieldlist ) => ( fieldlist ) = jsload ( string , string >>> ) ;
additionalRules-> -------------------

itemSet282:
stm.if.ifelse-> if ( exp ) then stm >>> else stm
stm.if.if-> if ( exp ) then stm >>>
additionalRules-> -------------------

itemSet283:
stm.dec-> ty : var = exp ; >>>
additionalRules-> -------------------

itemSet284:
stm.for-> ( stm ) from ( exp ) >>> to ( stm ) stm
additionalRules-> -------------------

itemSet285:
dec.jsload-> function : id ( fieldlist ) => ( fieldlist ) = jsload ( string , string ) >>> ;
additionalRules-> -------------------

itemSet286:
stm.if.ifelse-> if ( exp ) then stm else >>> stm
additionalRules-> -------------------
stm.return.noexp-> >>> return ;
stm.return.exp-> >>> return ( exp ) ;
stm.loop-> >>> loop stm
stm.if.ifelse-> >>> if ( exp ) then stm else stm
stm.dec-> >>> ty : var = exp ;
ty.real-> >>> realtype
ty.poly-> >>> id < ty >
ty.func-> >>> function : ( fieldlist ) => ( fieldlist )
ty.array-> >>> ty [ int ]
ty.pointer-> >>> * ty
ty.bool-> >>> boolean
ty.char-> >>> chartype
ty.short-> >>> shorttype
ty.name-> >>> id
ty.int-> >>> inttype
ty.void-> >>> void
stm.assign.sub-> >>> varExp - = exp ;
varExp.var-> >>> var
var.simple-> >>> id
var.field-> >>> var . id 
var.arrowfield-> >>> var -> id
var.subcript-> >>> var [ exp ]
var.deref-> >>> * var
varExp.arrowfield-> >>> exp -> id
exp.true-> >>> true
exp.string-> >>> string
exp.sizeof-> >>> sizeof ( var )
exp.real-> >>> real
exp.array-> >>> [ explist ]
exp.op-> >>> exp oper exp
exp.func-> >>> ( fieldlist ) => ( fieldlist ) stm
exp.char-> >>> char
exp.call-> >>> varExp ( explist )
exp.address-> >>> & var
exp.var-> >>> varExp
exp.paren-> >>> ( exp )
exp.int-> >>> int
exp.false-> >>> false
exp.minus-> >>> - exp
varExp.field-> >>> exp . id
varExp.subcript-> >>> exp [ exp ]
stm.assign.normal-> >>> varExp = exp ;
stm.assign.mul-> >>> varExp * = exp ;
stm.assign.increment-> >>> varExp + + ;
stm.assign.div-> >>> varExp / = exp ;
stm.for-> >>> ( stm ) from ( exp ) to ( stm ) stm
stm.break-> >>> break ;
stm.while-> >>> ( exp ) to stm
stm.call-> >>> varExp ( explist ) ;
stm.compound-> >>> { stmlist }
stm.continue-> >>> continue ;
stm.assign.add-> >>> varExp + = exp ;
stm.if.if-> >>> if ( exp ) then stm
stm.assign.decrement-> >>> varExp - - ;

itemSet287:
stm.for-> ( stm ) from ( exp ) to >>> ( stm ) stm
additionalRules-> -------------------

itemSet288:
dec.jsload-> function : id ( fieldlist ) => ( fieldlist ) = jsload ( string , string ) ; >>>
additionalRules-> -------------------

itemSet289:
stm.if.ifelse-> if ( exp ) then stm else stm >>>
additionalRules-> -------------------

itemSet290:
stm.for-> ( stm ) from ( exp ) to ( >>> stm ) stm
additionalRules-> -------------------
stm.return.noexp-> >>> return ;
stm.return.exp-> >>> return ( exp ) ;
stm.loop-> >>> loop stm
stm.if.ifelse-> >>> if ( exp ) then stm else stm
stm.dec-> >>> ty : var = exp ;
ty.real-> >>> realtype
ty.poly-> >>> id < ty >
ty.func-> >>> function : ( fieldlist ) => ( fieldlist )
ty.array-> >>> ty [ int ]
ty.pointer-> >>> * ty
ty.bool-> >>> boolean
ty.char-> >>> chartype
ty.short-> >>> shorttype
ty.name-> >>> id
ty.int-> >>> inttype
ty.void-> >>> void
stm.assign.sub-> >>> varExp - = exp ;
varExp.var-> >>> var
var.simple-> >>> id
var.field-> >>> var . id
var.arrowfield-> >>> var -> id
var.subcript-> >>> var [ exp ]
var.deref-> >>> * var
varExp.arrowfield-> >>> exp -> id
exp.true-> >>> true
exp.string-> >>> string
exp.sizeof-> >>> sizeof ( var )
exp.real-> >>> real
exp.array-> >>> [ explist ]
exp.op-> >>> exp oper exp
exp.func-> >>> ( fieldlist ) => ( fieldlist ) stm
exp.char-> >>> char
exp.call-> >>> varExp ( explist )
exp.address-> >>> & var
exp.var-> >>> varExp
exp.paren-> >>> ( exp )
exp.int-> >>> int
exp.false-> >>> false
exp.minus-> >>> - exp
varExp.field-> >>> exp . id
varExp.subcript-> >>> exp [ exp ]
stm.assign.normal-> >>> varExp = exp ; 
stm.assign.mul-> >>> varExp * = exp ;
stm.assign.increment-> >>> varExp + + ;
stm.assign.div-> >>> varExp / = exp ;
stm.for-> >>> ( stm ) from ( exp ) to ( stm ) stm
stm.break-> >>> break ;
stm.while-> >>> ( exp ) to stm
stm.call-> >>> varExp ( explist ) ;
stm.compound-> >>> { stmlist }
stm.continue-> >>> continue ;
stm.assign.add-> >>> varExp + = exp ;
stm.if.if-> >>> if ( exp ) then stm
stm.assign.decrement-> >>> varExp - - ;

itemSet291:
stm.for-> ( stm ) from ( exp ) to ( stm >>> ) stm
additionalRules-> -------------------

itemSet292:
stm.for-> ( stm ) from ( exp ) to ( stm ) >>> stm
additionalRules-> -------------------
stm.return.noexp-> >>> return ;
stm.return.exp-> >>> return ( exp ) ;
stm.loop-> >>> loop stm
stm.if.ifelse-> >>> if ( exp ) then stm else stm
stm.dec-> >>> ty : var = exp ;
ty.real-> >>> realtype
ty.poly-> >>> id < ty >
ty.func-> >>> function : ( fieldlist ) => ( fieldlist )
ty.array-> >>> ty [ int ]
ty.pointer-> >>> * ty
ty.bool-> >>> boolean
ty.char-> >>> chartype
ty.short-> >>> shorttype
ty.name-> >>> id
ty.int-> >>> inttype
ty.void-> >>> void
stm.assign.sub-> >>> varExp - = exp ;
varExp.var-> >>> var
var.simple-> >>> id
var.field-> >>> var . id
var.arrowfield-> >>> var -> id
var.subcript-> >>> var [ exp ]
var.deref-> >>> * var
varExp.arrowfield-> >>> exp -> id
exp.true-> >>> true
exp.string-> >>> string
exp.sizeof-> >>> sizeof ( var )
exp.real-> >>> real
exp.array-> >>> [ explist ]
exp.op-> >>> exp oper exp
exp.func-> >>> ( fieldlist ) => ( fieldlist ) stm
exp.char-> >>> char
exp.call-> >>> varExp ( explist )
exp.address-> >>> & var
exp.var-> >>> varExp
exp.paren-> >>> ( exp )
exp.int-> >>> int
exp.false-> >>> false
exp.minus-> >>> - exp
varExp.field-> >>> exp . id
varExp.subcript-> >>> exp [ exp ]
stm.assign.normal-> >>> varExp = exp ;
stm.assign.mul-> >>> varExp * = exp ;
stm.assign.increment-> >>> varExp + + ;
stm.assign.div-> >>> varExp / = exp ;
stm.for-> >>> ( stm ) from ( exp ) to ( stm ) stm
stm.break-> >>> break ;
stm.while-> >>> ( exp ) to stm
stm.call-> >>> varExp ( explist ) ;
stm.compound-> >>> { stmlist }
stm.continue-> >>> continue ;
stm.assign.add-> >>> varExp + = exp ;
stm.if.if-> >>> if ( exp ) then stm
stm.assign.decrement-> >>> varExp - - ;

itemSet293:
stm.for-> ( stm ) from ( exp ) to ( stm ) stm >>>
additionalRules-> -------------------